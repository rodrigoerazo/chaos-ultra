//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	fractalRenderMainFloat
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 4 .u32 seed;
.global .align 16 .b8 $str[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str1[28] = {109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str2[70] = {115, 0, 117, 0, 112, 0, 101, 0, 114, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 105, 0, 110, 0, 103, 0, 76, 0, 101, 0, 118, 0, 101, 0, 108, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 16 .b8 $str8[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};

.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .u32 fractalRenderMainFloat_param_2,
	.param .u32 fractalRenderMainFloat_param_3,
	.param .f32 fractalRenderMainFloat_param_4,
	.param .f32 fractalRenderMainFloat_param_5,
	.param .f32 fractalRenderMainFloat_param_6,
	.param .f32 fractalRenderMainFloat_param_7,
	.param .u32 fractalRenderMainFloat_param_8,
	.param .u32 fractalRenderMainFloat_param_9,
	.param .u8 fractalRenderMainFloat_param_10,
	.param .u8 fractalRenderMainFloat_param_11,
	.param .u64 fractalRenderMainFloat_param_12,
	.param .u32 fractalRenderMainFloat_param_13,
	.param .u32 fractalRenderMainFloat_param_14,
	.param .u32 fractalRenderMainFloat_param_15
)
{
	.local .align 8 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<19>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<67>;
	.reg .b32 	%r<88>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<28>;


	mov.u64 	%rd27, __local_depot0;
	cvta.local.u64 	%SP, %rd27;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r16, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r17, [fractalRenderMainFloat_param_2];
	ld.param.u32 	%r18, [fractalRenderMainFloat_param_3];
	ld.param.f32 	%f13, [fractalRenderMainFloat_param_4];
	ld.param.f32 	%f14, [fractalRenderMainFloat_param_5];
	ld.param.f32 	%f15, [fractalRenderMainFloat_param_6];
	ld.param.f32 	%f16, [fractalRenderMainFloat_param_7];
	ld.param.u32 	%r19, [fractalRenderMainFloat_param_8];
	ld.param.u32 	%r20, [fractalRenderMainFloat_param_9];
	ld.param.u32 	%r21, [fractalRenderMainFloat_param_13];
	ld.param.u32 	%r22, [fractalRenderMainFloat_param_14];
	ld.param.u32 	%r23, [fractalRenderMainFloat_param_15];
	ld.param.s8 	%rs1, [fractalRenderMainFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd2, $str;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r24, 103;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r24;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	mov.u32 	%r25, %tid.x;
	mov.u32 	%r26, %tid.y;
	mad.lo.s32 	%r27, %r1, %r26, %r25;
	shl.b32 	%r28, %r1, 2;
	and.b32  	%r29, %r27, 15;
	rem.u32 	%r30, %r27, %r28;
	sub.s32 	%r31, %r30, %r29;
	shr.u32 	%r32, %r31, 2;
	and.b32  	%r33, %r27, 3;
	add.s32 	%r34, %r32, %r33;
	div.u32 	%r35, %r27, %r28;
	shl.b32 	%r36, %r35, 2;
	bfe.u32 	%r37, %r27, 2, 2;
	add.s32 	%r38, %r36, %r37;
	mov.u32 	%r39, %ctaid.x;
	mad.lo.s32 	%r2, %r39, %r1, %r34;
	mov.u32 	%r40, %ctaid.y;
	mov.u32 	%r41, %ntid.y;
	mad.lo.s32 	%r3, %r40, %r41, %r38;
	setp.ge.u32	%p2, %r3, %r18;
	setp.ge.u32	%p3, %r2, %r17;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB0_18;

	mov.u32 	%r86, 0;
	sad.s32 	%r43, %r2, %r22, %r86;
	shr.u32 	%r4, %r21, 1;
	setp.gt.u32	%p5, %r43, %r4;
	@%p5 bra 	BB0_18;

	sad.s32 	%r45, %r3, %r23, %r86;
	setp.gt.u32	%p6, %r45, %r4;
	@%p6 bra 	BB0_18;

	setp.lt.u32	%p7, %r20, 257;
	@%p7 bra 	BB0_7;

	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str1;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 143;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB0_7:
	setp.eq.s32	%p8, %r20, 0;
	mov.u32 	%r85, %r86;
	@%p8 bra 	BB0_17;

	cvt.rn.f32.u32	%f1, %r2;
	cvt.rn.f32.u32	%f2, %r3;
	sub.f32 	%f17, %f15, %f13;
	cvt.rn.f32.u32	%f18, %r17;
	div.rn.f32 	%f3, %f17, %f18;
	cvt.rn.f32.u32	%f19, %r18;
	sub.f32 	%f20, %f16, %f14;
	div.rn.f32 	%f4, %f20, %f19;
	mov.u32 	%r50, 0;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r80, %r50;
	mov.u32 	%r86, %r50;
	mov.u32 	%r85, %r20;

BB0_9:
	cvt.rn.f32.u32	%f23, %r85;
	cvt.rn.f32.u32	%f24, %r80;
	div.rn.f32 	%f25, %f24, %f23;
	add.f32 	%f26, %f1, %f25;
	add.f32 	%f27, %f2, %f25;
	neg.f32 	%f28, %f27;
	fma.rn.f32 	%f5, %f3, %f26, %f13;
	fma.rn.f32 	%f6, %f4, %f28, %f16;
	setp.eq.s32	%p9, %r19, 0;
	mov.f32 	%f65, 0f00000000;
	mov.u32 	%r84, %r50;
	mov.f32 	%f66, %f65;
	@%p9 bra 	BB0_12;

BB0_10:
	mul.f32 	%f9, %f65, %f65;
	mul.f32 	%f10, %f66, %f66;
	add.f32 	%f29, %f10, %f9;
	setp.geu.f32	%p10, %f29, 0f40800000;
	@%p10 bra 	BB0_12;

	sub.f32 	%f30, %f10, %f9;
	add.f32 	%f11, %f5, %f30;
	add.f32 	%f31, %f66, %f66;
	fma.rn.f32 	%f65, %f31, %f65, %f6;
	add.s32 	%r84, %r84, 1;
	setp.lt.u32	%p11, %r84, %r19;
	mov.f32 	%f66, %f11;
	@%p11 bra 	BB0_10;

BB0_12:
	add.s32 	%r86, %r84, %r86;
	setp.gt.u32	%p12, %r80, 9;
	@%p12 bra 	BB0_14;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r80, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r84;

BB0_14:
	setp.eq.s16	%p13, %rs2, 0;
	setp.ne.s32	%p14, %r80, 10;
	or.pred  	%p15, %p14, %p13;
	@%p15 bra 	BB0_16;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	mul.wide.u32 	%rd20, %r86, -1171354717;
	shr.u64 	%rd21, %rd20, 35;
	cvt.u32.u64	%r56, %rd21;
	cvt.rn.f32.u32	%f32, %r56;
	ld.local.v2.u32 	{%r57, %r58}, [%rd19];
	cvt.rn.f32.u32	%f33, %r57;
	sub.f32 	%f34, %f33, %f32;
	fma.rn.f32 	%f35, %f34, %f34, 0f00000000;
	cvt.rn.f32.u32	%f36, %r58;
	sub.f32 	%f37, %f36, %f32;
	fma.rn.f32 	%f38, %f37, %f37, %f35;
	ld.local.v2.u32 	{%r61, %r62}, [%rd19+8];
	cvt.rn.f32.u32	%f39, %r61;
	sub.f32 	%f40, %f39, %f32;
	fma.rn.f32 	%f41, %f40, %f40, %f38;
	cvt.rn.f32.u32	%f42, %r62;
	sub.f32 	%f43, %f42, %f32;
	fma.rn.f32 	%f44, %f43, %f43, %f41;
	ld.local.v2.u32 	{%r65, %r66}, [%rd19+16];
	cvt.rn.f32.u32	%f45, %r65;
	sub.f32 	%f46, %f45, %f32;
	fma.rn.f32 	%f47, %f46, %f46, %f44;
	cvt.rn.f32.u32	%f48, %r66;
	sub.f32 	%f49, %f48, %f32;
	fma.rn.f32 	%f50, %f49, %f49, %f47;
	ld.local.v2.u32 	{%r69, %r70}, [%rd19+24];
	cvt.rn.f32.u32	%f51, %r69;
	sub.f32 	%f52, %f51, %f32;
	fma.rn.f32 	%f53, %f52, %f52, %f50;
	cvt.rn.f32.u32	%f54, %r70;
	sub.f32 	%f55, %f54, %f32;
	fma.rn.f32 	%f56, %f55, %f55, %f53;
	ld.local.v2.u32 	{%r73, %r74}, [%rd19+32];
	cvt.rn.f32.u32	%f57, %r73;
	sub.f32 	%f58, %f57, %f32;
	fma.rn.f32 	%f59, %f58, %f58, %f56;
	cvt.rn.f32.u32	%f60, %r74;
	sub.f32 	%f61, %f60, %f32;
	fma.rn.f32 	%f62, %f61, %f61, %f59;
	div.rn.f32 	%f63, %f62, 0f41100000;
	div.rn.f32 	%f64, %f63, %f32;
	mov.u32 	%r54, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r54, 0; vote.ballot.b32 %r53, p; } 
	// inline asm
	cvt.f64.f32	%fd1, %f64;
	setp.le.f64	%p16, %fd1, 0d3F847AE147AE147B;
	vote.sync.all.pred 	%p17, %p16, %r53;
	mov.u32 	%r85, 11;

BB0_16:
	add.s32 	%r80, %r80, 1;
	setp.lt.u32	%p18, %r80, %r85;
	@%p18 bra 	BB0_9;

BB0_17:
	mul.lo.s32 	%r78, %r3, %r16;
	cvt.u64.u32	%rd22, %r78;
	cvta.to.global.u64 	%rd23, %rd1;
	add.s64 	%rd24, %rd23, %rd22;
	mul.wide.u32 	%rd25, %r2, 4;
	add.s64 	%rd26, %rd24, %rd25;
	div.u32 	%r79, %r86, %r85;
	st.global.u32 	[%rd26], %r79;

BB0_18:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .u32 fractalRenderMainDouble_param_2,
	.param .u32 fractalRenderMainDouble_param_3,
	.param .f64 fractalRenderMainDouble_param_4,
	.param .f64 fractalRenderMainDouble_param_5,
	.param .f64 fractalRenderMainDouble_param_6,
	.param .f64 fractalRenderMainDouble_param_7,
	.param .u32 fractalRenderMainDouble_param_8,
	.param .u32 fractalRenderMainDouble_param_9,
	.param .u8 fractalRenderMainDouble_param_10,
	.param .u8 fractalRenderMainDouble_param_11,
	.param .u64 fractalRenderMainDouble_param_12,
	.param .u32 fractalRenderMainDouble_param_13,
	.param .u32 fractalRenderMainDouble_param_14,
	.param .u32 fractalRenderMainDouble_param_15
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<19>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<88>;
	.reg .f64 	%fd<67>;
	.reg .b64 	%rd<28>;


	mov.u64 	%rd27, __local_depot1;
	cvta.local.u64 	%SP, %rd27;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r16, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r17, [fractalRenderMainDouble_param_2];
	ld.param.u32 	%r18, [fractalRenderMainDouble_param_3];
	ld.param.f64 	%fd13, [fractalRenderMainDouble_param_4];
	ld.param.f64 	%fd14, [fractalRenderMainDouble_param_5];
	ld.param.f64 	%fd15, [fractalRenderMainDouble_param_6];
	ld.param.f64 	%fd16, [fractalRenderMainDouble_param_7];
	ld.param.u32 	%r19, [fractalRenderMainDouble_param_8];
	ld.param.u32 	%r20, [fractalRenderMainDouble_param_9];
	ld.param.u32 	%r21, [fractalRenderMainDouble_param_13];
	ld.param.u32 	%r22, [fractalRenderMainDouble_param_14];
	ld.param.u32 	%r23, [fractalRenderMainDouble_param_15];
	ld.param.s8 	%rs1, [fractalRenderMainDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r24, 103;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r24;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_2:
	mov.u32 	%r25, %tid.x;
	mov.u32 	%r26, %tid.y;
	mad.lo.s32 	%r27, %r1, %r26, %r25;
	shl.b32 	%r28, %r1, 2;
	and.b32  	%r29, %r27, 15;
	rem.u32 	%r30, %r27, %r28;
	sub.s32 	%r31, %r30, %r29;
	shr.u32 	%r32, %r31, 2;
	and.b32  	%r33, %r27, 3;
	add.s32 	%r34, %r32, %r33;
	div.u32 	%r35, %r27, %r28;
	shl.b32 	%r36, %r35, 2;
	bfe.u32 	%r37, %r27, 2, 2;
	add.s32 	%r38, %r36, %r37;
	mov.u32 	%r39, %ctaid.x;
	mad.lo.s32 	%r2, %r39, %r1, %r34;
	mov.u32 	%r40, %ctaid.y;
	mov.u32 	%r41, %ntid.y;
	mad.lo.s32 	%r3, %r40, %r41, %r38;
	setp.ge.u32	%p2, %r3, %r18;
	setp.ge.u32	%p3, %r2, %r17;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB1_18;

	mov.u32 	%r86, 0;
	sad.s32 	%r43, %r2, %r22, %r86;
	shr.u32 	%r4, %r21, 1;
	setp.gt.u32	%p5, %r43, %r4;
	@%p5 bra 	BB1_18;

	sad.s32 	%r45, %r3, %r23, %r86;
	setp.gt.u32	%p6, %r45, %r4;
	@%p6 bra 	BB1_18;

	setp.lt.u32	%p7, %r20, 257;
	@%p7 bra 	BB1_7;

	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str1;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 143;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_7:
	setp.eq.s32	%p8, %r20, 0;
	mov.u32 	%r85, %r86;
	@%p8 bra 	BB1_17;

	cvt.rn.f64.u32	%fd1, %r2;
	cvt.rn.f64.u32	%fd2, %r3;
	sub.f64 	%fd17, %fd15, %fd13;
	cvt.rn.f64.u32	%fd18, %r17;
	div.rn.f64 	%fd3, %fd17, %fd18;
	cvt.rn.f64.u32	%fd19, %r18;
	sub.f64 	%fd20, %fd16, %fd14;
	div.rn.f64 	%fd4, %fd20, %fd19;
	mov.u32 	%r50, 0;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r80, %r50;
	mov.u32 	%r86, %r50;
	mov.u32 	%r85, %r20;

BB1_9:
	cvt.rn.f64.u32	%fd23, %r85;
	cvt.rn.f64.u32	%fd24, %r80;
	div.rn.f64 	%fd25, %fd24, %fd23;
	add.f64 	%fd26, %fd1, %fd25;
	add.f64 	%fd27, %fd2, %fd25;
	neg.f64 	%fd28, %fd27;
	fma.rn.f64 	%fd5, %fd3, %fd26, %fd13;
	fma.rn.f64 	%fd6, %fd4, %fd28, %fd16;
	setp.eq.s32	%p9, %r19, 0;
	mov.f64 	%fd65, 0d0000000000000000;
	mov.u32 	%r84, %r50;
	mov.f64 	%fd66, %fd65;
	@%p9 bra 	BB1_12;

BB1_10:
	mul.f64 	%fd9, %fd65, %fd65;
	mul.f64 	%fd10, %fd66, %fd66;
	add.f64 	%fd29, %fd10, %fd9;
	setp.geu.f64	%p10, %fd29, 0d4010000000000000;
	@%p10 bra 	BB1_12;

	sub.f64 	%fd30, %fd10, %fd9;
	add.f64 	%fd11, %fd5, %fd30;
	add.f64 	%fd31, %fd66, %fd66;
	fma.rn.f64 	%fd65, %fd31, %fd65, %fd6;
	add.s32 	%r84, %r84, 1;
	setp.lt.u32	%p11, %r84, %r19;
	mov.f64 	%fd66, %fd11;
	@%p11 bra 	BB1_10;

BB1_12:
	add.s32 	%r86, %r84, %r86;
	setp.gt.u32	%p12, %r80, 9;
	@%p12 bra 	BB1_14;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r80, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r84;

BB1_14:
	setp.eq.s16	%p13, %rs2, 0;
	setp.ne.s32	%p14, %r80, 10;
	or.pred  	%p15, %p14, %p13;
	@%p15 bra 	BB1_16;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	mul.wide.u32 	%rd20, %r86, -1171354717;
	shr.u64 	%rd21, %rd20, 35;
	cvt.u32.u64	%r56, %rd21;
	cvt.rn.f64.u32	%fd32, %r56;
	ld.local.v2.u32 	{%r57, %r58}, [%rd19];
	cvt.rn.f64.u32	%fd33, %r57;
	sub.f64 	%fd34, %fd33, %fd32;
	fma.rn.f64 	%fd35, %fd34, %fd34, 0d0000000000000000;
	cvt.rn.f64.u32	%fd36, %r58;
	sub.f64 	%fd37, %fd36, %fd32;
	fma.rn.f64 	%fd38, %fd37, %fd37, %fd35;
	ld.local.v2.u32 	{%r61, %r62}, [%rd19+8];
	cvt.rn.f64.u32	%fd39, %r61;
	sub.f64 	%fd40, %fd39, %fd32;
	fma.rn.f64 	%fd41, %fd40, %fd40, %fd38;
	cvt.rn.f64.u32	%fd42, %r62;
	sub.f64 	%fd43, %fd42, %fd32;
	fma.rn.f64 	%fd44, %fd43, %fd43, %fd41;
	ld.local.v2.u32 	{%r65, %r66}, [%rd19+16];
	cvt.rn.f64.u32	%fd45, %r65;
	sub.f64 	%fd46, %fd45, %fd32;
	fma.rn.f64 	%fd47, %fd46, %fd46, %fd44;
	cvt.rn.f64.u32	%fd48, %r66;
	sub.f64 	%fd49, %fd48, %fd32;
	fma.rn.f64 	%fd50, %fd49, %fd49, %fd47;
	ld.local.v2.u32 	{%r69, %r70}, [%rd19+24];
	cvt.rn.f64.u32	%fd51, %r69;
	sub.f64 	%fd52, %fd51, %fd32;
	fma.rn.f64 	%fd53, %fd52, %fd52, %fd50;
	cvt.rn.f64.u32	%fd54, %r70;
	sub.f64 	%fd55, %fd54, %fd32;
	fma.rn.f64 	%fd56, %fd55, %fd55, %fd53;
	ld.local.v2.u32 	{%r73, %r74}, [%rd19+32];
	cvt.rn.f64.u32	%fd57, %r73;
	sub.f64 	%fd58, %fd57, %fd32;
	fma.rn.f64 	%fd59, %fd58, %fd58, %fd56;
	cvt.rn.f64.u32	%fd60, %r74;
	sub.f64 	%fd61, %fd60, %fd32;
	fma.rn.f64 	%fd62, %fd61, %fd61, %fd59;
	div.rn.f64 	%fd63, %fd62, 0d4022000000000000;
	div.rn.f64 	%fd64, %fd63, %fd32;
	mov.u32 	%r54, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r54, 0; vote.ballot.b32 %r53, p; } 
	// inline asm
	setp.le.f64	%p16, %fd64, 0d3F847AE147AE147B;
	vote.sync.all.pred 	%p17, %p16, %r53;
	mov.u32 	%r85, 11;

BB1_16:
	add.s32 	%r80, %r80, 1;
	setp.lt.u32	%p18, %r80, %r85;
	@%p18 bra 	BB1_9;

BB1_17:
	mul.lo.s32 	%r78, %r3, %r16;
	cvt.u64.u32	%rd22, %r78;
	cvta.to.global.u64 	%rd23, %rd1;
	add.s64 	%rd24, %rd23, %rd22;
	mul.wide.u32 	%rd25, %r2, 4;
	add.s64 	%rd26, %rd24, %rd25;
	div.u32 	%r79, %r86, %r85;
	st.global.u32 	[%rd26], %r79;

BB1_18:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9,
	.param .u32 compose_param_10,
	.param .u32 compose_param_11,
	.param .u32 compose_param_12
)
{
	.reg .pred 	%p<11>;
	.reg .b32 	%r<35>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd4, [compose_param_0];
	ld.param.u32 	%r6, [compose_param_1];
	ld.param.u64 	%rd5, [compose_param_2];
	ld.param.u32 	%r7, [compose_param_3];
	ld.param.u64 	%rd6, [compose_param_4];
	ld.param.u32 	%r13, [compose_param_5];
	ld.param.u32 	%r14, [compose_param_6];
	ld.param.u64 	%rd7, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.u32 	%r9, [compose_param_9];
	ld.param.u32 	%r10, [compose_param_10];
	ld.param.u32 	%r11, [compose_param_11];
	ld.param.u32 	%r12, [compose_param_12];
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r1, %r16, %r15, %r17;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %tid.y;
	mad.lo.s32 	%r2, %r18, %r19, %r20;
	setp.ge.u32	%p3, %r2, %r14;
	setp.ge.u32	%p4, %r1, %r13;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB2_9;

	mov.u32 	%r21, 0;
	sad.s32 	%r22, %r1, %r11, %r21;
	shr.u32 	%r3, %r10, 1;
	setp.gt.u32	%p7, %r22, %r3;
	mov.pred 	%p10, -1;
	@%p7 bra 	BB2_3;

	sad.s32 	%r24, %r2, %r12, %r21;
	setp.gt.u32	%p10, %r24, %r3;

BB2_3:
	@%p10 bra 	BB2_5;
	bra.uni 	BB2_4;

BB2_5:
	cvta.to.global.u64 	%rd10, %rd5;
	mul.lo.s32 	%r26, %r2, %r7;
	cvt.u64.u32	%rd11, %r26;
	add.s64 	%rd20, %rd10, %rd11;
	bra.uni 	BB2_6;

BB2_4:
	cvta.to.global.u64 	%rd8, %rd4;
	mul.lo.s32 	%r25, %r2, %r6;
	cvt.u64.u32	%rd9, %r25;
	add.s64 	%rd20, %rd8, %rd9;

BB2_6:
	mul.wide.u32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd20, %rd12;
	ld.global.u32 	%r4, [%rd13];
	rem.u32 	%r27, %r4, %r8;
	sub.s32 	%r28, %r8, %r27;
	add.s32 	%r5, %r28, -1;
	setp.lt.u32	%p8, %r5, %r8;
	@%p8 bra 	BB2_8;

	mov.u64 	%rd14, $str8;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str1;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r29, 242;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r29;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_8:
	shl.b32 	%r30, %r5, 2;
	suld.b.2d.b32.trap {%r32}, [%rd7, {%r30, %r21}];
	setp.eq.s32	%p9, %r4, %r9;
	selp.b32	%r33, -16711681, %r32, %p9;
	shl.b32 	%r34, %r1, 2;
	sust.b.2d.b32.trap 	[%rd6, {%r34, %r2}], {%r33};

BB2_9:
	ret;
}

	// .globl	blur
.visible .entry blur(

)
{



	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<29>;
	.reg .b32 	%r<80>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd4, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r30, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r31, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r32, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f9, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f10, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r33, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r34, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r35, %ntid.x;
	mov.u32 	%r36, %ctaid.x;
	mov.u32 	%r37, %tid.x;
	mad.lo.s32 	%r38, %r36, %r35, %r37;
	mul.lo.s32 	%r1, %r38, %r34;
	mov.u32 	%r39, %ctaid.y;
	mov.u32 	%r40, %ntid.y;
	mov.u32 	%r2, %tid.y;
	mad.lo.s32 	%r41, %r39, %r40, %r2;
	mul.lo.s32 	%r3, %r41, %r34;
	sub.s32 	%r42, %r32, %r34;
	setp.ge.u32	%p1, %r3, %r42;
	sub.s32 	%r43, %r31, %r34;
	setp.ge.u32	%p2, %r1, %r43;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB4_17;

	sub.f32 	%f15, %f11, %f9;
	cvt.rn.f32.u32	%f16, %r31;
	div.rn.f32 	%f17, %f15, %f16;
	cvt.rn.f32.u32	%f18, %r32;
	sub.f32 	%f19, %f12, %f10;
	div.rn.f32 	%f20, %f19, %f18;
	cvt.rn.f32.u32	%f21, %r1;
	fma.rn.f32 	%f1, %f21, %f17, %f9;
	cvt.rn.f32.u32	%f22, %r3;
	mul.f32 	%f23, %f22, %f20;
	sub.f32 	%f2, %f12, %f23;
	setp.eq.s32	%p4, %r33, 0;
	mov.f32 	%f27, 0f00000000;
	mov.u32 	%r70, 0;
	@%p4 bra 	BB4_5;

	mov.f32 	%f28, %f27;

BB4_3:
	mul.f32 	%f5, %f28, %f28;
	mul.f32 	%f6, %f27, %f27;
	add.f32 	%f24, %f5, %f6;
	setp.geu.f32	%p5, %f24, 0f40800000;
	@%p5 bra 	BB4_5;

	sub.f32 	%f25, %f6, %f5;
	add.f32 	%f7, %f1, %f25;
	add.f32 	%f26, %f27, %f27;
	fma.rn.f32 	%f28, %f28, %f26, %f2;
	add.s32 	%r70, %r70, 1;
	setp.lt.u32	%p6, %r70, %r33;
	mov.f32 	%f27, %f7;
	@%p6 bra 	BB4_3;

BB4_5:
	setp.eq.s32	%p7, %r34, 0;
	@%p7 bra 	BB4_17;

	cvta.to.global.u64 	%rd1, %rd4;
	mul.lo.s32 	%r47, %r3, %r30;
	cvt.u64.u32	%rd5, %r47;
	add.s64 	%rd2, %rd1, %rd5;
	mad.lo.s32 	%r7, %r34, %r41, 3;
	shl.b32 	%r8, %r30, 2;
	mov.u32 	%r46, 0;
	mov.u32 	%r71, %r46;

BB4_7:
	add.s32 	%r55, %r71, %r1;
	cvt.u64.u32	%rd3, %r55;
	and.b32  	%r54, %r34, 3;
	setp.eq.s32	%p8, %r54, 0;
	mov.u32 	%r79, %r46;
	@%p8 bra 	BB4_13;

	setp.eq.s32	%p9, %r54, 1;
	mov.u32 	%r73, %r46;
	@%p9 bra 	BB4_12;

	setp.eq.s32	%p10, %r54, 2;
	mov.u32 	%r72, %r46;
	@%p10 bra 	BB4_11;

	shl.b64 	%rd6, %rd3, 2;
	add.s64 	%rd7, %rd2, %rd6;
	st.global.u32 	[%rd7], %r70;
	mov.u32 	%r72, 1;

BB4_11:
	add.s32 	%r57, %r72, %r3;
	mul.lo.s32 	%r58, %r57, %r30;
	cvt.u64.u32	%rd8, %r58;
	add.s64 	%rd9, %rd1, %rd8;
	shl.b64 	%rd10, %rd3, 2;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u32 	[%rd11], %r70;
	add.s32 	%r73, %r72, 1;

BB4_12:
	add.s32 	%r59, %r73, %r3;
	mul.lo.s32 	%r60, %r59, %r30;
	cvt.u64.u32	%rd12, %r60;
	add.s64 	%rd13, %rd1, %rd12;
	shl.b64 	%rd14, %rd3, 2;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.u32 	[%rd15], %r70;
	add.s32 	%r79, %r73, 1;

BB4_13:
	setp.lt.u32	%p11, %r34, 4;
	@%p11 bra 	BB4_16;

	add.s32 	%r61, %r7, %r79;
	mul.lo.s32 	%r78, %r30, %r61;
	mad.lo.s32 	%r66, %r34, %r41, %r79;
	add.s32 	%r67, %r66, 2;
	mul.lo.s32 	%r77, %r30, %r67;
	add.s32 	%r68, %r66, 1;
	mul.lo.s32 	%r76, %r30, %r68;
	mul.lo.s32 	%r75, %r30, %r66;

BB4_15:
	cvt.u64.u32	%rd16, %r75;
	add.s64 	%rd17, %rd1, %rd16;
	shl.b64 	%rd18, %rd3, 2;
	add.s64 	%rd19, %rd17, %rd18;
	st.global.u32 	[%rd19], %r70;
	cvt.u64.u32	%rd20, %r76;
	add.s64 	%rd21, %rd1, %rd20;
	add.s64 	%rd22, %rd21, %rd18;
	st.global.u32 	[%rd22], %r70;
	cvt.u64.u32	%rd23, %r77;
	add.s64 	%rd24, %rd1, %rd23;
	add.s64 	%rd25, %rd24, %rd18;
	st.global.u32 	[%rd25], %r70;
	cvt.u64.u32	%rd26, %r78;
	add.s64 	%rd27, %rd1, %rd26;
	add.s64 	%rd28, %rd27, %rd18;
	st.global.u32 	[%rd28], %r70;
	add.s32 	%r78, %r78, %r8;
	add.s32 	%r77, %r77, %r8;
	add.s32 	%r76, %r76, %r8;
	add.s32 	%r75, %r75, %r8;
	add.s32 	%r79, %r79, 4;
	setp.lt.u32	%p12, %r79, %r34;
	@%p12 bra 	BB4_15;

BB4_16:
	add.s32 	%r71, %r71, 1;
	setp.lt.u32	%p13, %r71, %r34;
	@%p13 bra 	BB4_7;

BB4_17:
	ret;
}

	// .globl	debug
.visible .entry debug(
	.param .align 4 .b8 debug_param_0[24],
	.param .u32 debug_param_1
)
{



	ret;
}

	// .globl	init
.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderReuseSamples
.visible .entry fractalRenderReuseSamples(
	.param .u64 fractalRenderReuseSamples_param_0,
	.param .u32 fractalRenderReuseSamples_param_1,
	.param .u32 fractalRenderReuseSamples_param_2,
	.param .u32 fractalRenderReuseSamples_param_3,
	.param .f32 fractalRenderReuseSamples_param_4,
	.param .f32 fractalRenderReuseSamples_param_5,
	.param .f32 fractalRenderReuseSamples_param_6,
	.param .f32 fractalRenderReuseSamples_param_7,
	.param .u32 fractalRenderReuseSamples_param_8,
	.param .f32 fractalRenderReuseSamples_param_9,
	.param .f32 fractalRenderReuseSamples_param_10,
	.param .f32 fractalRenderReuseSamples_param_11,
	.param .f32 fractalRenderReuseSamples_param_12,
	.param .u64 fractalRenderReuseSamples_param_13,
	.param .u32 fractalRenderReuseSamples_param_14
)
{
	.reg .pred 	%p<26>;
	.reg .f32 	%f<61>;
	.reg .b32 	%r<54>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd2, [fractalRenderReuseSamples_param_0];
	ld.param.u32 	%r10, [fractalRenderReuseSamples_param_1];
	ld.param.u32 	%r11, [fractalRenderReuseSamples_param_2];
	ld.param.u32 	%r12, [fractalRenderReuseSamples_param_3];
	ld.param.f32 	%f23, [fractalRenderReuseSamples_param_4];
	ld.param.f32 	%f24, [fractalRenderReuseSamples_param_5];
	ld.param.f32 	%f25, [fractalRenderReuseSamples_param_6];
	ld.param.f32 	%f26, [fractalRenderReuseSamples_param_7];
	ld.param.u32 	%r13, [fractalRenderReuseSamples_param_8];
	ld.param.f32 	%f27, [fractalRenderReuseSamples_param_9];
	ld.param.f32 	%f28, [fractalRenderReuseSamples_param_10];
	ld.param.f32 	%f29, [fractalRenderReuseSamples_param_11];
	ld.param.f32 	%f30, [fractalRenderReuseSamples_param_12];
	ld.param.u64 	%rd3, [fractalRenderReuseSamples_param_13];
	ld.param.u32 	%r14, [fractalRenderReuseSamples_param_14];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p2, %r1, 32;
	@%p2 bra 	BB7_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r15, 103;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r15;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB7_2:
	mov.u32 	%r16, %tid.y;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r18, %r1, %r16, %r17;
	shl.b32 	%r19, %r1, 2;
	and.b32  	%r20, %r18, 15;
	rem.u32 	%r21, %r18, %r19;
	sub.s32 	%r22, %r21, %r20;
	shr.u32 	%r23, %r22, 2;
	and.b32  	%r24, %r18, 3;
	add.s32 	%r25, %r23, %r24;
	div.u32 	%r26, %r18, %r19;
	shl.b32 	%r27, %r26, 2;
	bfe.u32 	%r28, %r18, 2, 2;
	add.s32 	%r29, %r27, %r28;
	mov.u32 	%r30, %ctaid.x;
	mad.lo.s32 	%r2, %r30, %r1, %r25;
	mov.u32 	%r31, %ctaid.y;
	mov.u32 	%r32, %ntid.y;
	mad.lo.s32 	%r3, %r31, %r32, %r29;
	setp.lt.u32	%p3, %r2, %r11;
	setp.lt.u32	%p4, %r3, %r12;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB7_14;
	bra.uni 	BB7_3;

BB7_3:
	cvt.rn.f32.u32	%f1, %r2;
	sub.f32 	%f31, %f29, %f27;
	sub.f32 	%f2, %f25, %f23;
	div.rn.f32 	%f32, %f2, %f31;
	sub.f32 	%f33, %f30, %f28;
	sub.f32 	%f3, %f26, %f24;
	div.rn.f32 	%f34, %f3, %f33;
	sub.f32 	%f35, %f23, %f27;
	div.rn.f32 	%f36, %f35, %f2;
	sub.f32 	%f37, %f30, %f26;
	div.rn.f32 	%f38, %f37, %f3;
	cvt.rn.f32.u32	%f4, %r11;
	mul.f32 	%f39, %f4, %f36;
	cvt.rn.f32.u32	%f5, %r12;
	mul.f32 	%f40, %f5, %f38;
	cvt.rn.f32.u32	%f6, %r3;
	fma.rn.f32 	%f7, %f1, %f32, %f39;
	fma.rn.f32 	%f8, %f6, %f34, %f40;
	abs.f32 	%f41, %f7;
	mov.b32 	 %r33, %f7;
	and.b32  	%r34, %r33, -2147483648;
	or.b32  	%r35, %r34, 1056964608;
	mov.b32 	 %f42, %r35;
	add.f32 	%f43, %f7, %f42;
	cvt.rzi.f32.f32	%f44, %f43;
	setp.gt.f32	%p6, %f41, 0f4B000000;
	selp.f32	%f57, %f7, %f44, %p6;
	setp.geu.f32	%p7, %f41, 0f3F000000;
	@%p7 bra 	BB7_5;

	cvt.rzi.f32.f32	%f57, %f7;

BB7_5:
	cvt.rzi.s32.f32	%r4, %f57;
	mov.b32 	 %r36, %f8;
	and.b32  	%r37, %r36, -2147483648;
	or.b32  	%r38, %r37, 1056964608;
	mov.b32 	 %f45, %r38;
	add.f32 	%f46, %f8, %f45;
	cvt.rzi.f32.f32	%f47, %f46;
	abs.f32 	%f48, %f8;
	setp.gt.f32	%p8, %f48, 0f4B000000;
	selp.f32	%f58, %f8, %f47, %p8;
	setp.geu.f32	%p9, %f48, 0f3F000000;
	@%p9 bra 	BB7_7;

	cvt.rzi.f32.f32	%f58, %f8;

BB7_7:
	cvt.rzi.s32.f32	%r40, %f58;
	mul.lo.s32 	%r41, %r40, %r14;
	cvt.u64.u32	%rd10, %r41;
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd10;
	mul.wide.u32 	%rd13, %r4, 4;
	add.s64 	%rd1, %rd12, %rd13;
	setp.lt.u32	%p11, %r4, %r11;
	setp.gt.s32	%p12, %r4, -1;
	and.pred  	%p13, %p11, %p12;
	setp.gt.s32	%p14, %r40, -1;
	and.pred  	%p15, %p13, %p14;
	setp.lt.u32	%p16, %r40, %r12;
	and.pred  	%p17, %p16, %p15;
	mov.u32 	%r51, 404;
	mov.pred 	%p25, 0;
	@!%p17 bra 	BB7_9;
	bra.uni 	BB7_8;

BB7_8:
	ld.global.u32 	%r51, [%rd1];
	mov.pred 	%p25, -1;

BB7_9:
	div.rn.f32 	%f51, %f2, %f4;
	fma.rn.f32 	%f15, %f1, %f51, %f23;
	div.rn.f32 	%f52, %f3, %f5;
	mul.f32 	%f53, %f6, %f52;
	sub.f32 	%f16, %f26, %f53;
	setp.eq.s32	%p19, %r13, 0;
	mov.f32 	%f59, 0f00000000;
	mov.u32 	%r53, 0;
	@%p19 bra 	BB7_13;

	mov.f32 	%f60, %f59;

BB7_11:
	mul.f32 	%f19, %f59, %f59;
	mul.f32 	%f20, %f60, %f60;
	add.f32 	%f54, %f20, %f19;
	setp.geu.f32	%p20, %f54, 0f40800000;
	@%p20 bra 	BB7_13;

	sub.f32 	%f55, %f20, %f19;
	add.f32 	%f21, %f15, %f55;
	add.f32 	%f56, %f60, %f60;
	fma.rn.f32 	%f59, %f56, %f59, %f16;
	add.s32 	%r53, %r53, 1;
	setp.lt.u32	%p21, %r53, %r13;
	mov.f32 	%f60, %f21;
	@%p21 bra 	BB7_11;

BB7_13:
	add.s32 	%r44, %r53, %r51;
	shr.u32 	%r45, %r44, 1;
	selp.b32	%r46, %r45, %r53, %p25;
	add.s32 	%r47, %r11, -16;
	setp.lt.u32	%p22, %r2, %r47;
	add.s32 	%r48, %r12, -16;
	setp.lt.u32	%p23, %r3, %r48;
	and.pred  	%p24, %p22, %p23;
	selp.b32	%r49, %r46, %r13, %p24;
	mul.lo.s32 	%r50, %r3, %r10;
	cvt.u64.u32	%rd14, %r50;
	cvta.to.global.u64 	%rd15, %rd2;
	add.s64 	%rd16, %rd15, %rd14;
	mul.wide.u32 	%rd17, %r2, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.u32 	[%rd18], %r49;

BB7_14:
	ret;
}


