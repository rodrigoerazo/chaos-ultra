//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	fractalRenderMainFloat
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 8 .u64 seed;
.global .align 2 .b8 $str[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 2 .b8 $str1[28] = {109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 2 .b8 $str2[70] = {115, 0, 117, 0, 112, 0, 101, 0, 114, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 105, 0, 110, 0, 103, 0, 76, 0, 101, 0, 118, 0, 101, 0, 108, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 2 .b8 $str4[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 1 .b8 $str5[8] = {97, 97, 58, 9, 37, 117, 10, 0};
.global .align 1 .b8 $str6[8] = {97, 98, 58, 9, 37, 117, 10, 0};
.global .align 1 .b8 $str7[8] = {97, 99, 58, 9, 37, 117, 10, 0};
.global .align 1 .b8 $str8[8] = {97, 100, 58, 9, 37, 117, 10, 0};
.global .align 1 .b8 $str9[8] = {97, 101, 58, 9, 37, 117, 10, 0};
.global .align 1 .b8 $str10[8] = {97, 102, 58, 9, 37, 117, 10, 0};
.global .align 1 .b8 $str11[7] = {99, 58, 9, 37, 117, 10, 0};

.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .u32 fractalRenderMainFloat_param_2,
	.param .u32 fractalRenderMainFloat_param_3,
	.param .f32 fractalRenderMainFloat_param_4,
	.param .f32 fractalRenderMainFloat_param_5,
	.param .f32 fractalRenderMainFloat_param_6,
	.param .f32 fractalRenderMainFloat_param_7,
	.param .u32 fractalRenderMainFloat_param_8,
	.param .u32 fractalRenderMainFloat_param_9,
	.param .u8 fractalRenderMainFloat_param_10,
	.param .u8 fractalRenderMainFloat_param_11,
	.param .u64 fractalRenderMainFloat_param_12,
	.param .u32 fractalRenderMainFloat_param_13,
	.param .u32 fractalRenderMainFloat_param_14,
	.param .u32 fractalRenderMainFloat_param_15
)
{
	.local .align 4 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<18>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<67>;
	.reg .b32 	%r<85>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<28>;


	mov.u64 	%rd27, __local_depot0;
	cvta.local.u64 	%SP, %rd27;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r16, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r17, [fractalRenderMainFloat_param_2];
	ld.param.u32 	%r18, [fractalRenderMainFloat_param_3];
	ld.param.f32 	%f13, [fractalRenderMainFloat_param_4];
	ld.param.f32 	%f14, [fractalRenderMainFloat_param_5];
	ld.param.f32 	%f15, [fractalRenderMainFloat_param_6];
	ld.param.f32 	%f16, [fractalRenderMainFloat_param_7];
	ld.param.u32 	%r19, [fractalRenderMainFloat_param_8];
	ld.param.u32 	%r83, [fractalRenderMainFloat_param_9];
	ld.param.u32 	%r21, [fractalRenderMainFloat_param_13];
	ld.param.u32 	%r22, [fractalRenderMainFloat_param_14];
	ld.param.u32 	%r23, [fractalRenderMainFloat_param_15];
	ld.param.s8 	%rs1, [fractalRenderMainFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd2, $str;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r24, 139;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r24;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	mov.u32 	%r25, %tid.y;
	mov.u32 	%r26, %tid.x;
	mad.lo.s32 	%r27, %r1, %r25, %r26;
	shl.b32 	%r28, %r1, 2;
	neg.s32 	%r29, %r27;
	and.b32  	%r30, %r29, 15;
	rem.u32 	%r31, %r27, %r28;
	add.s32 	%r32, %r31, %r30;
	shr.u32 	%r33, %r32, 2;
	and.b32  	%r34, %r27, 3;
	add.s32 	%r35, %r33, %r34;
	div.u32 	%r36, %r27, %r28;
	shl.b32 	%r37, %r36, 2;
	bfe.u32 	%r38, %r27, 2, 2;
	add.s32 	%r39, %r37, %r38;
	mov.u32 	%r40, %ctaid.x;
	mad.lo.s32 	%r2, %r40, %r1, %r35;
	mov.u32 	%r41, %ctaid.y;
	mov.u32 	%r42, %ntid.y;
	mad.lo.s32 	%r3, %r41, %r42, %r39;
	setp.ge.u32	%p2, %r3, %r18;
	setp.ge.u32	%p3, %r2, %r17;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB0_18;

	mov.u32 	%r82, 0;
	sad.s32 	%r44, %r2, %r22, %r82;
	shr.u32 	%r4, %r21, 1;
	setp.gt.u32	%p5, %r44, %r4;
	@%p5 bra 	BB0_18;

	sad.s32 	%r46, %r3, %r23, %r82;
	setp.gt.u32	%p6, %r46, %r4;
	@%p6 bra 	BB0_18;

	setp.lt.u32	%p7, %r83, 257;
	@%p7 bra 	BB0_7;

	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str1;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r47, 177;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB0_7:
	setp.eq.s32	%p8, %r83, 0;
	mov.u32 	%r75, %r82;
	@%p8 bra 	BB0_17;

	sub.f32 	%f17, %f15, %f13;
	cvt.rn.f32.u32	%f18, %r17;
	div.rn.f32 	%f1, %f17, %f18;
	cvt.rn.f32.u32	%f19, %r18;
	sub.f32 	%f20, %f16, %f14;
	div.rn.f32 	%f2, %f20, %f19;
	cvt.rn.f32.u32	%f3, %r2;
	cvt.rn.f32.u32	%f4, %r3;
	mov.u32 	%r51, 0;
	mov.u32 	%r70, %r51;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r78, %r51;

BB0_9:
	mov.u32 	%r79, %r83;
	mov.u32 	%r84, %r79;
	cvt.rn.f32.u32	%f23, %r84;
	cvt.rn.f32.u32	%f24, %r70;
	div.rn.f32 	%f25, %f24, %f23;
	add.f32 	%f26, %f3, %f25;
	fma.rn.f32 	%f5, %f1, %f26, %f13;
	add.f32 	%f27, %f4, %f25;
	mul.f32 	%f28, %f2, %f27;
	sub.f32 	%f6, %f16, %f28;
	setp.eq.s32	%p9, %r19, 0;
	mov.f32 	%f66, 0f00000000;
	mov.f32 	%f65, %f66;
	mov.u32 	%r76, %r51;
	mov.u32 	%r77, %r51;
	@%p9 bra 	BB0_12;

BB0_10:
	mov.u32 	%r74, %r77;
	mov.u32 	%r76, %r74;
	mov.f32 	%f8, %f66;
	mul.f32 	%f9, %f65, %f65;
	mul.f32 	%f10, %f8, %f8;
	add.f32 	%f29, %f9, %f10;
	setp.geu.f32	%p10, %f29, 0f40800000;
	@%p10 bra 	BB0_12;

	sub.f32 	%f30, %f10, %f9;
	add.f32 	%f66, %f5, %f30;
	add.f32 	%f31, %f8, %f8;
	fma.rn.f32 	%f65, %f65, %f31, %f6;
	add.s32 	%r9, %r76, 1;
	setp.lt.u32	%p11, %r9, %r19;
	mov.u32 	%r76, %r9;
	mov.u32 	%r77, %r9;
	@%p11 bra 	BB0_10;

BB0_12:
	add.s32 	%r78, %r76, %r78;
	setp.gt.u32	%p12, %r70, 9;
	@%p12 bra 	BB0_14;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r70, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r76;

BB0_14:
	setp.ne.s16	%p13, %rs2, 0;
	setp.eq.s32	%p14, %r70, 10;
	and.pred  	%p15, %p14, %p13;
	@!%p15 bra 	BB0_16;
	bra.uni 	BB0_15;

BB0_15:
	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	mul.wide.u32 	%rd20, %r78, -1171354717;
	shr.u64 	%rd21, %rd20, 35;
	cvt.u32.u64	%r57, %rd21;
	cvt.rn.f32.u32	%f32, %r57;
	ld.local.u32 	%r58, [%rd19];
	cvt.rn.f32.u32	%f33, %r58;
	sub.f32 	%f34, %f33, %f32;
	fma.rn.f32 	%f35, %f34, %f34, 0f00000000;
	ld.local.u32 	%r59, [%rd19+4];
	cvt.rn.f32.u32	%f36, %r59;
	sub.f32 	%f37, %f36, %f32;
	fma.rn.f32 	%f38, %f37, %f37, %f35;
	ld.local.u32 	%r60, [%rd19+8];
	cvt.rn.f32.u32	%f39, %r60;
	sub.f32 	%f40, %f39, %f32;
	fma.rn.f32 	%f41, %f40, %f40, %f38;
	ld.local.u32 	%r61, [%rd19+12];
	cvt.rn.f32.u32	%f42, %r61;
	sub.f32 	%f43, %f42, %f32;
	fma.rn.f32 	%f44, %f43, %f43, %f41;
	ld.local.u32 	%r62, [%rd19+16];
	cvt.rn.f32.u32	%f45, %r62;
	sub.f32 	%f46, %f45, %f32;
	fma.rn.f32 	%f47, %f46, %f46, %f44;
	ld.local.u32 	%r63, [%rd19+20];
	cvt.rn.f32.u32	%f48, %r63;
	sub.f32 	%f49, %f48, %f32;
	fma.rn.f32 	%f50, %f49, %f49, %f47;
	ld.local.u32 	%r64, [%rd19+24];
	cvt.rn.f32.u32	%f51, %r64;
	sub.f32 	%f52, %f51, %f32;
	fma.rn.f32 	%f53, %f52, %f52, %f50;
	ld.local.u32 	%r65, [%rd19+28];
	cvt.rn.f32.u32	%f54, %r65;
	sub.f32 	%f55, %f54, %f32;
	fma.rn.f32 	%f56, %f55, %f55, %f53;
	ld.local.u32 	%r66, [%rd19+32];
	cvt.rn.f32.u32	%f57, %r66;
	sub.f32 	%f58, %f57, %f32;
	fma.rn.f32 	%f59, %f58, %f58, %f56;
	ld.local.u32 	%r67, [%rd19+36];
	cvt.rn.f32.u32	%f60, %r67;
	sub.f32 	%f61, %f60, %f32;
	fma.rn.f32 	%f62, %f61, %f61, %f59;
	div.rn.f32 	%f63, %f62, 0f41100000;
	div.rn.f32 	%f64, %f63, %f32;
	cvt.f64.f32	%fd1, %f64;
	setp.le.f64	%p16, %fd1, 0d3F847AE147AE147B;
	selp.u32	%r55, 1, 0, %p16;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r55, 0; 
	vote.all.pred 	%p2, %p1; 
	selp.s32 	%r54, 1, 0, %p2; 
	}
	// inline asm
	mov.u32 	%r84, 11;

BB0_16:
	mov.u32 	%r83, %r84;
	add.s32 	%r70, %r70, 1;
	setp.lt.u32	%p17, %r70, %r83;
	mov.u32 	%r75, %r78;
	mov.u32 	%r82, %r83;
	@%p17 bra 	BB0_9;

BB0_17:
	mul.lo.s32 	%r68, %r3, %r16;
	cvt.u64.u32	%rd22, %r68;
	cvta.to.global.u64 	%rd23, %rd1;
	add.s64 	%rd24, %rd23, %rd22;
	mul.wide.u32 	%rd25, %r2, 4;
	add.s64 	%rd26, %rd24, %rd25;
	div.u32 	%r69, %r75, %r82;
	st.global.u32 	[%rd26], %r69;

BB0_18:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .u32 fractalRenderMainDouble_param_2,
	.param .u32 fractalRenderMainDouble_param_3,
	.param .f64 fractalRenderMainDouble_param_4,
	.param .f64 fractalRenderMainDouble_param_5,
	.param .f64 fractalRenderMainDouble_param_6,
	.param .f64 fractalRenderMainDouble_param_7,
	.param .u32 fractalRenderMainDouble_param_8,
	.param .u32 fractalRenderMainDouble_param_9,
	.param .u8 fractalRenderMainDouble_param_10,
	.param .u8 fractalRenderMainDouble_param_11,
	.param .u64 fractalRenderMainDouble_param_12,
	.param .u32 fractalRenderMainDouble_param_13,
	.param .u32 fractalRenderMainDouble_param_14,
	.param .u32 fractalRenderMainDouble_param_15
)
{
	.local .align 4 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<18>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<85>;
	.reg .f64 	%fd<36>;
	.reg .b64 	%rd<28>;


	mov.u64 	%rd27, __local_depot1;
	cvta.local.u64 	%SP, %rd27;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r16, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r17, [fractalRenderMainDouble_param_2];
	ld.param.u32 	%r18, [fractalRenderMainDouble_param_3];
	ld.param.f64 	%fd13, [fractalRenderMainDouble_param_4];
	ld.param.f64 	%fd14, [fractalRenderMainDouble_param_5];
	ld.param.f64 	%fd15, [fractalRenderMainDouble_param_6];
	ld.param.f64 	%fd16, [fractalRenderMainDouble_param_7];
	ld.param.u32 	%r19, [fractalRenderMainDouble_param_8];
	ld.param.u32 	%r83, [fractalRenderMainDouble_param_9];
	ld.param.u32 	%r21, [fractalRenderMainDouble_param_13];
	ld.param.u32 	%r22, [fractalRenderMainDouble_param_14];
	ld.param.u32 	%r23, [fractalRenderMainDouble_param_15];
	ld.param.s8 	%rs1, [fractalRenderMainDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r24, 139;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r24;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_2:
	mov.u32 	%r25, %tid.y;
	mov.u32 	%r26, %tid.x;
	mad.lo.s32 	%r27, %r1, %r25, %r26;
	shl.b32 	%r28, %r1, 2;
	neg.s32 	%r29, %r27;
	and.b32  	%r30, %r29, 15;
	rem.u32 	%r31, %r27, %r28;
	add.s32 	%r32, %r31, %r30;
	shr.u32 	%r33, %r32, 2;
	and.b32  	%r34, %r27, 3;
	add.s32 	%r35, %r33, %r34;
	div.u32 	%r36, %r27, %r28;
	shl.b32 	%r37, %r36, 2;
	bfe.u32 	%r38, %r27, 2, 2;
	add.s32 	%r39, %r37, %r38;
	mov.u32 	%r40, %ctaid.x;
	mad.lo.s32 	%r2, %r40, %r1, %r35;
	mov.u32 	%r41, %ctaid.y;
	mov.u32 	%r42, %ntid.y;
	mad.lo.s32 	%r3, %r41, %r42, %r39;
	setp.ge.u32	%p2, %r3, %r18;
	setp.ge.u32	%p3, %r2, %r17;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB1_18;

	mov.u32 	%r82, 0;
	sad.s32 	%r44, %r2, %r22, %r82;
	shr.u32 	%r4, %r21, 1;
	setp.gt.u32	%p5, %r44, %r4;
	@%p5 bra 	BB1_18;

	sad.s32 	%r46, %r3, %r23, %r82;
	setp.gt.u32	%p6, %r46, %r4;
	@%p6 bra 	BB1_18;

	setp.lt.u32	%p7, %r83, 257;
	@%p7 bra 	BB1_7;

	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str1;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r47, 177;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_7:
	setp.eq.s32	%p8, %r83, 0;
	mov.u32 	%r75, %r82;
	@%p8 bra 	BB1_17;

	sub.f64 	%fd17, %fd15, %fd13;
	cvt.rn.f64.u32	%fd18, %r17;
	div.rn.f64 	%fd1, %fd17, %fd18;
	cvt.rn.f64.u32	%fd19, %r18;
	sub.f64 	%fd20, %fd16, %fd14;
	div.rn.f64 	%fd2, %fd20, %fd19;
	cvt.rn.f64.u32	%fd3, %r2;
	cvt.rn.f64.u32	%fd4, %r3;
	mov.u32 	%r51, 0;
	mov.u32 	%r70, %r51;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r78, %r51;

BB1_9:
	mov.u32 	%r79, %r83;
	mov.u32 	%r84, %r79;
	cvt.rn.f64.u32	%fd23, %r84;
	cvt.rn.f64.u32	%fd24, %r70;
	div.rn.f64 	%fd25, %fd24, %fd23;
	add.f64 	%fd26, %fd3, %fd25;
	fma.rn.f64 	%fd5, %fd1, %fd26, %fd13;
	add.f64 	%fd27, %fd4, %fd25;
	mul.f64 	%fd28, %fd2, %fd27;
	sub.f64 	%fd6, %fd16, %fd28;
	setp.eq.s32	%p9, %r19, 0;
	mov.f64 	%fd35, 0d0000000000000000;
	mov.f64 	%fd34, %fd35;
	mov.u32 	%r76, %r51;
	mov.u32 	%r77, %r51;
	@%p9 bra 	BB1_12;

BB1_10:
	mov.u32 	%r74, %r77;
	mov.u32 	%r76, %r74;
	mov.f64 	%fd8, %fd35;
	mul.f64 	%fd9, %fd34, %fd34;
	mul.f64 	%fd10, %fd8, %fd8;
	add.f64 	%fd29, %fd9, %fd10;
	setp.geu.f64	%p10, %fd29, 0d4010000000000000;
	@%p10 bra 	BB1_12;

	sub.f64 	%fd30, %fd10, %fd9;
	add.f64 	%fd35, %fd5, %fd30;
	add.f64 	%fd31, %fd8, %fd8;
	fma.rn.f64 	%fd34, %fd34, %fd31, %fd6;
	add.s32 	%r9, %r76, 1;
	setp.lt.u32	%p11, %r9, %r19;
	mov.u32 	%r76, %r9;
	mov.u32 	%r77, %r9;
	@%p11 bra 	BB1_10;

BB1_12:
	add.s32 	%r78, %r76, %r78;
	setp.gt.u32	%p12, %r70, 9;
	@%p12 bra 	BB1_14;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r70, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r76;

BB1_14:
	setp.ne.s16	%p13, %rs2, 0;
	setp.eq.s32	%p14, %r70, 10;
	and.pred  	%p15, %p14, %p13;
	@!%p15 bra 	BB1_16;
	bra.uni 	BB1_15;

BB1_15:
	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	mul.wide.u32 	%rd20, %r78, -1171354717;
	shr.u64 	%rd21, %rd20, 35;
	cvt.u32.u64	%r57, %rd21;
	cvt.rn.f64.u32	%fd32, %r57;
	cvt.rn.f32.f64	%f1, %fd32;
	ld.local.u32 	%r58, [%rd19];
	cvt.rn.f32.u32	%f2, %r58;
	sub.f32 	%f3, %f2, %f1;
	fma.rn.f32 	%f4, %f3, %f3, 0f00000000;
	ld.local.u32 	%r59, [%rd19+4];
	cvt.rn.f32.u32	%f5, %r59;
	sub.f32 	%f6, %f5, %f1;
	fma.rn.f32 	%f7, %f6, %f6, %f4;
	ld.local.u32 	%r60, [%rd19+8];
	cvt.rn.f32.u32	%f8, %r60;
	sub.f32 	%f9, %f8, %f1;
	fma.rn.f32 	%f10, %f9, %f9, %f7;
	ld.local.u32 	%r61, [%rd19+12];
	cvt.rn.f32.u32	%f11, %r61;
	sub.f32 	%f12, %f11, %f1;
	fma.rn.f32 	%f13, %f12, %f12, %f10;
	ld.local.u32 	%r62, [%rd19+16];
	cvt.rn.f32.u32	%f14, %r62;
	sub.f32 	%f15, %f14, %f1;
	fma.rn.f32 	%f16, %f15, %f15, %f13;
	ld.local.u32 	%r63, [%rd19+20];
	cvt.rn.f32.u32	%f17, %r63;
	sub.f32 	%f18, %f17, %f1;
	fma.rn.f32 	%f19, %f18, %f18, %f16;
	ld.local.u32 	%r64, [%rd19+24];
	cvt.rn.f32.u32	%f20, %r64;
	sub.f32 	%f21, %f20, %f1;
	fma.rn.f32 	%f22, %f21, %f21, %f19;
	ld.local.u32 	%r65, [%rd19+28];
	cvt.rn.f32.u32	%f23, %r65;
	sub.f32 	%f24, %f23, %f1;
	fma.rn.f32 	%f25, %f24, %f24, %f22;
	ld.local.u32 	%r66, [%rd19+32];
	cvt.rn.f32.u32	%f26, %r66;
	sub.f32 	%f27, %f26, %f1;
	fma.rn.f32 	%f28, %f27, %f27, %f25;
	ld.local.u32 	%r67, [%rd19+36];
	cvt.rn.f32.u32	%f29, %r67;
	sub.f32 	%f30, %f29, %f1;
	fma.rn.f32 	%f31, %f30, %f30, %f28;
	div.rn.f32 	%f32, %f31, 0f41100000;
	div.rn.f32 	%f33, %f32, %f1;
	cvt.f64.f32	%fd33, %f33;
	setp.le.f64	%p16, %fd33, 0d3F847AE147AE147B;
	selp.u32	%r55, 1, 0, %p16;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r55, 0; 
	vote.all.pred 	%p2, %p1; 
	selp.s32 	%r54, 1, 0, %p2; 
	}
	// inline asm
	mov.u32 	%r84, 11;

BB1_16:
	mov.u32 	%r83, %r84;
	add.s32 	%r70, %r70, 1;
	setp.lt.u32	%p17, %r70, %r83;
	mov.u32 	%r75, %r78;
	mov.u32 	%r82, %r83;
	@%p17 bra 	BB1_9;

BB1_17:
	mul.lo.s32 	%r68, %r3, %r16;
	cvt.u64.u32	%rd22, %r68;
	cvta.to.global.u64 	%rd23, %rd1;
	add.s64 	%rd24, %rd23, %rd22;
	mul.wide.u32 	%rd25, %r2, 4;
	add.s64 	%rd26, %rd24, %rd25;
	div.u32 	%r69, %r75, %r82;
	st.global.u32 	[%rd26], %r69;

BB1_18:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9,
	.param .u32 compose_param_10,
	.param .u32 compose_param_11,
	.param .u32 compose_param_12
)
{
	.reg .pred 	%p<11>;
	.reg .b32 	%r<35>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd4, [compose_param_0];
	ld.param.u32 	%r6, [compose_param_1];
	ld.param.u64 	%rd5, [compose_param_2];
	ld.param.u32 	%r7, [compose_param_3];
	ld.param.u64 	%rd6, [compose_param_4];
	ld.param.u32 	%r13, [compose_param_5];
	ld.param.u32 	%r14, [compose_param_6];
	ld.param.u64 	%rd7, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.u32 	%r9, [compose_param_9];
	ld.param.u32 	%r10, [compose_param_10];
	ld.param.u32 	%r11, [compose_param_11];
	ld.param.u32 	%r12, [compose_param_12];
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r1, %r16, %r15, %r17;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %tid.y;
	mad.lo.s32 	%r2, %r18, %r19, %r20;
	setp.ge.u32	%p3, %r2, %r14;
	setp.ge.u32	%p4, %r1, %r13;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB2_9;

	mov.u32 	%r21, 0;
	sad.s32 	%r22, %r1, %r11, %r21;
	shr.u32 	%r3, %r10, 1;
	setp.gt.u32	%p7, %r22, %r3;
	mov.pred 	%p10, -1;
	@%p7 bra 	BB2_3;

	sad.s32 	%r24, %r2, %r12, %r21;
	setp.gt.u32	%p10, %r24, %r3;

BB2_3:
	@%p10 bra 	BB2_5;
	bra.uni 	BB2_4;

BB2_5:
	cvta.to.global.u64 	%rd10, %rd5;
	mul.lo.s32 	%r26, %r2, %r7;
	cvt.u64.u32	%rd11, %r26;
	add.s64 	%rd20, %rd10, %rd11;
	bra.uni 	BB2_6;

BB2_4:
	cvta.to.global.u64 	%rd8, %rd4;
	mul.lo.s32 	%r25, %r2, %r6;
	cvt.u64.u32	%rd9, %r25;
	add.s64 	%rd20, %rd8, %rd9;

BB2_6:
	mul.wide.u32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd20, %rd12;
	ld.global.u32 	%r4, [%rd13];
	rem.u32 	%r27, %r4, %r8;
	sub.s32 	%r28, %r8, %r27;
	add.s32 	%r5, %r28, -1;
	setp.lt.u32	%p8, %r5, %r8;
	@%p8 bra 	BB2_8;

	mov.u64 	%rd14, $str4;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str1;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r29, 276;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r29;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_8:
	shl.b32 	%r30, %r5, 2;
	suld.b.2d.b32.trap {%r32}, [%rd7, {%r30, %r21}];
	setp.eq.s32	%p9, %r4, %r9;
	selp.b32	%r33, -16711681, %r32, %p9;
	shl.b32 	%r34, %r1, 2;
	sust.b.2d.b32.trap 	[%rd6, {%r34, %r2}], {%r33};

BB2_9:
	ret;
}

	// .globl	blur
.visible .entry blur(

)
{



	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<29>;
	.reg .b32 	%r<44>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r15, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r16, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r17, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f9, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f10, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r18, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r19, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r20, %ntid.x;
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %tid.x;
	mad.lo.s32 	%r23, %r21, %r20, %r22;
	mul.lo.s32 	%r1, %r23, %r19;
	mov.u32 	%r24, %ctaid.y;
	mov.u32 	%r2, %ntid.y;
	mov.u32 	%r3, %tid.y;
	mad.lo.s32 	%r25, %r24, %r2, %r3;
	mul.lo.s32 	%r4, %r25, %r19;
	sub.s32 	%r26, %r17, %r19;
	setp.ge.u32	%p1, %r4, %r26;
	sub.s32 	%r27, %r16, %r19;
	setp.ge.u32	%p2, %r1, %r27;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB4_9;

	sub.f32 	%f15, %f11, %f9;
	cvt.rn.f32.u32	%f16, %r16;
	div.rn.f32 	%f17, %f15, %f16;
	cvt.rn.f32.u32	%f18, %r17;
	sub.f32 	%f19, %f12, %f10;
	div.rn.f32 	%f20, %f19, %f18;
	cvt.rn.f32.u32	%f21, %r1;
	fma.rn.f32 	%f1, %f21, %f17, %f9;
	cvt.rn.f32.u32	%f22, %r4;
	mul.f32 	%f23, %f22, %f20;
	sub.f32 	%f2, %f12, %f23;
	setp.eq.s32	%p4, %r18, 0;
	mov.f32 	%f28, 0f00000000;
	mov.f32 	%f27, %f28;
	mov.u32 	%r39, 0;
	mov.u32 	%r38, %r39;
	@%p4 bra 	BB4_4;

BB4_2:
	mov.u32 	%r37, %r39;
	mov.u32 	%r38, %r37;
	mov.f32 	%f4, %f28;
	mul.f32 	%f5, %f27, %f27;
	mul.f32 	%f6, %f4, %f4;
	add.f32 	%f24, %f5, %f6;
	setp.geu.f32	%p5, %f24, 0f40800000;
	@%p5 bra 	BB4_4;

	sub.f32 	%f25, %f6, %f5;
	add.f32 	%f28, %f1, %f25;
	add.f32 	%f26, %f4, %f4;
	fma.rn.f32 	%f27, %f27, %f26, %f2;
	add.s32 	%r39, %r38, 1;
	setp.lt.u32	%p6, %r39, %r18;
	mov.u32 	%r38, %r39;
	@%p6 bra 	BB4_2;

BB4_4:
	setp.eq.s32	%p7, %r19, 0;
	@%p7 bra 	BB4_9;

	cvta.to.global.u64 	%rd1, %rd3;
	mul.lo.s32 	%r33, %r19, %r15;
	mul.lo.s32 	%r8, %r33, %r25;
	mov.u32 	%r30, 0;
	mov.u32 	%r43, %r30;

BB4_6:
	add.s32 	%r35, %r43, %r1;
	cvt.u64.u32	%rd2, %r35;
	mov.u32 	%r40, %r8;
	mov.u32 	%r42, %r30;

BB4_7:
	mov.u32 	%r11, %r42;
	mov.u32 	%r10, %r40;
	cvt.u64.u32	%rd4, %r10;
	add.s64 	%rd5, %rd1, %rd4;
	shl.b64 	%rd6, %rd2, 2;
	add.s64 	%rd7, %rd5, %rd6;
	st.global.u32 	[%rd7], %r38;
	add.s32 	%r12, %r10, %r15;
	add.s32 	%r13, %r11, 1;
	setp.lt.u32	%p8, %r13, %r19;
	mov.u32 	%r40, %r12;
	mov.u32 	%r42, %r13;
	@%p8 bra 	BB4_7;

	add.s32 	%r43, %r43, 1;
	setp.lt.u32	%p9, %r43, %r19;
	@%p9 bra 	BB4_6;

BB4_9:
	ret;
}

	// .globl	debug
.visible .entry debug(
	.param .align 4 .b8 debug_param_0[24],
	.param .u32 debug_param_1
)
{
	.local .align 8 .b8 	__local_depot5[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<4>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<18>;


	mov.u64 	%rd17, __local_depot5;
	cvta.local.u64 	%SP, %rd17;
	ld.param.u32 	%r6, [debug_param_0+20];
	ld.param.u32 	%r5, [debug_param_0+16];
	ld.param.u32 	%r4, [debug_param_0+12];
	ld.param.u32 	%r3, [debug_param_0+8];
	ld.param.u32 	%r2, [debug_param_0+4];
	ld.param.u32 	%r1, [debug_param_0];
	ld.param.u32 	%r7, [debug_param_1];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %ntid.x;
	mul.lo.s32 	%r10, %r8, %r9;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mul.lo.s32 	%r13, %r11, %r12;
	mov.u32 	%r14, %tid.x;
	neg.s32 	%r15, %r14;
	setp.eq.s32	%p1, %r10, %r15;
	mov.u32 	%r16, %tid.y;
	neg.s32 	%r17, %r16;
	setp.eq.s32	%p2, %r13, %r17;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB5_2;
	bra.uni 	BB5_1;

BB5_1:
	add.u64 	%rd1, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd1;
	st.local.u32 	[%rd2], %r1;
	mov.u64 	%rd3, $str5;
	cvta.global.u64 	%rd4, %rd3;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r18, [retval0+0];
	
	//{
	}// Callseq End 5
	st.local.u32 	[%rd2], %r2;
	mov.u64 	%rd5, $str6;
	cvta.global.u64 	%rd6, %rd5;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r19, [retval0+0];
	
	//{
	}// Callseq End 6
	st.local.u32 	[%rd2], %r3;
	mov.u64 	%rd7, $str7;
	cvta.global.u64 	%rd8, %rd7;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r20, [retval0+0];
	
	//{
	}// Callseq End 7
	st.local.u32 	[%rd2], %r4;
	mov.u64 	%rd9, $str8;
	cvta.global.u64 	%rd10, %rd9;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r21, [retval0+0];
	
	//{
	}// Callseq End 8
	st.local.u32 	[%rd2], %r5;
	mov.u64 	%rd11, $str9;
	cvta.global.u64 	%rd12, %rd11;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r22, [retval0+0];
	
	//{
	}// Callseq End 9
	st.local.u32 	[%rd2], %r6;
	mov.u64 	%rd13, $str10;
	cvta.global.u64 	%rd14, %rd13;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r23, [retval0+0];
	
	//{
	}// Callseq End 10
	st.local.u32 	[%rd2], %r7;
	mov.u64 	%rd15, $str11;
	cvta.global.u64 	%rd16, %rd15;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r24, [retval0+0];
	
	//{
	}// Callseq End 11

BB5_2:
	ret;
}

	// .globl	init
.visible .entry init(

)
{



	ret;
}


