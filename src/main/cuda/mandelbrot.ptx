//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	fractalRenderMainFloat
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 4 .f32 PI_F = 0f40490FDB;
.global .align 4 .u32 MAX_SS_LEVEL = 256;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str1[28] = {109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str2[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str3[56] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 16 .b8 $str9[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str12[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str13[66] = {114, 0, 101, 0, 117, 0, 115, 0, 105, 0, 110, 0, 103, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 32, 0, 124, 0, 124, 0, 32, 0, 115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str14[34] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 87, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};

.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u8 fractalRenderMainFloat_param_6,
	.param .u8 fractalRenderMainFloat_param_7
)
{
	.local .align 8 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<25>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<81>;
	.reg .b32 	%r<91>;
	.reg .b64 	%rd<50>;


	mov.u64 	%rd49, __local_depot0;
	cvta.local.u64 	%SP, %rd49;
	ld.param.u64 	%rd2, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r28, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f32, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f31, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f29, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r29, [fractalRenderMainFloat_param_4];
	ld.param.u32 	%r81, [fractalRenderMainFloat_param_5];
	ld.param.s8 	%rs1, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r31, 107;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r31;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	mov.u32 	%r32, %tid.x;
	mov.u32 	%r33, %tid.y;
	mad.lo.s32 	%r34, %r1, %r33, %r32;
	shl.b32 	%r35, %r1, 2;
	and.b32  	%r36, %r34, 15;
	rem.u32 	%r37, %r34, %r35;
	sub.s32 	%r38, %r37, %r36;
	shr.u32 	%r39, %r38, 2;
	and.b32  	%r40, %r34, 3;
	add.s32 	%r41, %r39, %r40;
	div.u32 	%r42, %r34, %r35;
	shl.b32 	%r43, %r42, 2;
	bfe.u32 	%r44, %r34, 2, 2;
	add.s32 	%r45, %r43, %r44;
	mov.u32 	%r46, %ctaid.x;
	mad.lo.s32 	%r4, %r46, %r1, %r41;
	mov.u32 	%r47, %ctaid.y;
	mov.u32 	%r48, %ntid.y;
	mad.lo.s32 	%r5, %r47, %r48, %r45;
	setp.lt.u32	%p2, %r4, %r27;
	setp.lt.u32	%p3, %r5, %r28;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB0_27;
	bra.uni 	BB0_3;

BB0_3:
	setp.lt.u32	%p5, %r81, 257;
	@%p5 bra 	BB0_5;

	mov.u64 	%rd9, $str3;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str1;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r49, 137;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB0_5:
	setp.eq.s32	%p6, %r81, 0;
	cvt.rn.f32.u32	%f80, %r81;
	mov.u32 	%r89, 0;
	@%p6 bra 	BB0_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	cvt.rn.f32.u32	%f33, %r27;
	sub.f32 	%f34, %f31, %f29;
	div.rn.f32 	%f6, %f34, %f33;
	cvt.rn.f32.u32	%f35, %r28;
	sub.f32 	%f36, %f32, %f30;
	div.rn.f32 	%f7, %f36, %f35;
	mov.u32 	%r53, 0;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r79, %r53;
	mov.u32 	%r89, %r53;

BB0_8:
	cvt.rn.f32.u32	%f39, %r79;
	div.rn.f32 	%f40, %f39, %f80;
	add.f32 	%f41, %f4, %f40;
	add.f32 	%f42, %f5, %f40;
	neg.f32 	%f43, %f42;
	fma.rn.f32 	%f9, %f6, %f41, %f29;
	fma.rn.f32 	%f10, %f7, %f43, %f32;
	setp.eq.s32	%p7, %r29, 0;
	mov.f32 	%f73, 0f00000000;
	mov.u32 	%r83, %r53;
	mov.f32 	%f74, %f73;
	@%p7 bra 	BB0_11;

BB0_9:
	mul.f32 	%f13, %f73, %f73;
	mul.f32 	%f14, %f74, %f74;
	add.f32 	%f44, %f14, %f13;
	setp.geu.f32	%p8, %f44, 0f40800000;
	@%p8 bra 	BB0_11;

	sub.f32 	%f45, %f14, %f13;
	add.f32 	%f15, %f9, %f45;
	add.f32 	%f46, %f74, %f74;
	fma.rn.f32 	%f73, %f46, %f73, %f10;
	add.s32 	%r83, %r83, 1;
	setp.lt.u32	%p9, %r83, %r29;
	mov.f32 	%f74, %f15;
	@%p9 bra 	BB0_9;

BB0_11:
	add.s32 	%r89, %r83, %r89;
	setp.gt.u32	%p10, %r79, 9;
	@%p10 bra 	BB0_13;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r79, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r83;

BB0_13:
	setp.eq.s16	%p11, %rs2, 0;
	and.b32  	%r56, %r79, -9;
	setp.ne.s32	%p12, %r56, 2;
	add.s32 	%r13, %r79, 1;
	or.pred  	%p13, %p12, %p11;
	@%p13 bra 	BB0_24;

	div.u32 	%r57, %r89, %r13;
	cvt.rn.f32.u32	%f17, %r57;
	setp.eq.s32	%p14, %r79, 0;
	mov.f32 	%f79, 0f00000000;
	@%p14 bra 	BB0_23;

	and.b32  	%r14, %r79, 3;
	setp.eq.s32	%p15, %r14, 0;
	mov.f32 	%f79, 0f00000000;
	mov.u32 	%r87, 0;
	@%p15 bra 	BB0_21;

	setp.eq.s32	%p16, %r14, 1;
	mov.f32 	%f76, 0f00000000;
	mov.u32 	%r85, 0;
	@%p16 bra 	BB0_20;

	setp.eq.s32	%p17, %r14, 2;
	mov.f32 	%f75, 0f00000000;
	mov.u32 	%r84, 0;
	@%p17 bra 	BB0_19;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r62, [%rd20];
	cvt.rn.f32.u32	%f51, %r62;
	sub.f32 	%f52, %f51, %f17;
	fma.rn.f32 	%f75, %f52, %f52, 0f00000000;
	mov.u32 	%r84, 1;

BB0_19:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r84, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r63, [%rd24];
	cvt.rn.f32.u32	%f53, %r63;
	sub.f32 	%f54, %f53, %f17;
	fma.rn.f32 	%f76, %f54, %f54, %f75;
	add.s32 	%r85, %r84, 1;

BB0_20:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r85, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r64, [%rd28];
	cvt.rn.f32.u32	%f55, %r64;
	sub.f32 	%f56, %f55, %f17;
	fma.rn.f32 	%f79, %f56, %f56, %f76;
	add.s32 	%r87, %r85, 1;

BB0_21:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p18, %r79, 4;
	@%p18 bra 	BB0_23;

BB0_22:
	mul.wide.u32 	%rd30, %r87, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r65, [%rd31];
	cvt.rn.f32.u32	%f57, %r65;
	sub.f32 	%f58, %f57, %f17;
	fma.rn.f32 	%f59, %f58, %f58, %f79;
	add.s32 	%r66, %r87, 1;
	mul.wide.u32 	%rd32, %r66, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r67, [%rd33];
	cvt.rn.f32.u32	%f60, %r67;
	sub.f32 	%f61, %f60, %f17;
	fma.rn.f32 	%f62, %f61, %f61, %f59;
	add.s32 	%r68, %r87, 2;
	mul.wide.u32 	%rd34, %r68, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r69, [%rd35];
	cvt.rn.f32.u32	%f63, %r69;
	sub.f32 	%f64, %f63, %f17;
	fma.rn.f32 	%f65, %f64, %f64, %f62;
	add.s32 	%r70, %r87, 3;
	mul.wide.u32 	%rd36, %r70, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r71, [%rd37];
	cvt.rn.f32.u32	%f66, %r71;
	sub.f32 	%f67, %f66, %f17;
	fma.rn.f32 	%f79, %f67, %f67, %f65;
	add.s32 	%r87, %r87, 4;
	setp.lt.u32	%p19, %r87, %r79;
	@%p19 bra 	BB0_22;

BB0_23:
	add.s32 	%r74, %r79, -1;
	cvt.rn.f32.u32	%f68, %r74;
	div.rn.f32 	%f69, %f79, %f68;
	div.rn.f32 	%f70, %f69, %f17;
	setp.eq.s32	%p20, %r79, 2;
	selp.f32	%f71, 0f3C23D70A, 0f3DCCCCCD, %p20;
	mov.u32 	%r73, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r73, 0; vote.ballot.b32 %r72, p; } 
	// inline asm
	setp.le.f32	%p21, %f70, %f71;
	vote.sync.all.pred 	%p22, %p21, %r72;
	selp.b32	%r81, %r13, %r81, %p22;

BB0_24:
	cvt.rn.f32.u32	%f80, %r81;
	setp.lt.u32	%p23, %r13, %r81;
	mov.u32 	%r79, %r13;
	@%p23 bra 	BB0_8;
	bra.uni 	BB0_25;

BB0_6:
	mov.u32 	%r81, %r89;

BB0_25:
	mul.lo.s32 	%r76, %r5, %r26;
	cvt.u64.u32	%rd38, %r76;
	cvta.to.global.u64 	%rd39, %rd2;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r4, 8;
	add.s64 	%rd42, %rd40, %rd41;
	div.u32 	%r77, %r89, %r81;
	st.global.u32 	[%rd42], %r77;
	st.global.f32 	[%rd42+4], %f80;
	setp.gt.f32	%p24, %f80, 0f00000000;
	@%p24 bra 	BB0_27;

	mov.u64 	%rd43, $str2;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str1;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r78, 194;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r78;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB0_27:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u8 fractalRenderMainDouble_param_6,
	.param .u8 fractalRenderMainDouble_param_7
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<25>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<91>;
	.reg .f64 	%fd<76>;
	.reg .b64 	%rd<50>;


	mov.u64 	%rd49, __local_depot1;
	cvta.local.u64 	%SP, %rd49;
	ld.param.u64 	%rd2, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd28, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd27, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd26, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd25, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r29, [fractalRenderMainDouble_param_4];
	ld.param.u32 	%r30, [fractalRenderMainDouble_param_5];
	ld.param.s8 	%rs1, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r31, 107;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r31;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_2:
	mov.u32 	%r32, %tid.x;
	mov.u32 	%r33, %tid.y;
	mad.lo.s32 	%r34, %r1, %r33, %r32;
	shl.b32 	%r35, %r1, 2;
	and.b32  	%r36, %r34, 15;
	rem.u32 	%r37, %r34, %r35;
	sub.s32 	%r38, %r37, %r36;
	shr.u32 	%r39, %r38, 2;
	and.b32  	%r40, %r34, 3;
	add.s32 	%r41, %r39, %r40;
	div.u32 	%r42, %r34, %r35;
	shl.b32 	%r43, %r42, 2;
	bfe.u32 	%r44, %r34, 2, 2;
	add.s32 	%r45, %r43, %r44;
	mov.u32 	%r46, %ctaid.x;
	mad.lo.s32 	%r4, %r46, %r1, %r41;
	mov.u32 	%r47, %ctaid.y;
	mov.u32 	%r48, %ntid.y;
	mad.lo.s32 	%r5, %r47, %r48, %r45;
	setp.lt.u32	%p2, %r4, %r27;
	setp.lt.u32	%p3, %r5, %r28;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_26;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r30, 257;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd9, $str3;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str1;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r49, 137;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB1_5:
	setp.eq.s32	%p6, %r30, 0;
	mov.u32 	%r89, 0;
	mov.u32 	%r81, %r89;
	@%p6 bra 	BB1_24;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	cvt.rn.f64.u32	%fd29, %r27;
	sub.f64 	%fd30, %fd27, %fd25;
	div.rn.f64 	%fd5, %fd30, %fd29;
	cvt.rn.f64.u32	%fd31, %r28;
	sub.f64 	%fd32, %fd28, %fd26;
	div.rn.f64 	%fd6, %fd32, %fd31;
	mov.u32 	%r53, 0;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r79, %r53;
	mov.u32 	%r89, %r53;
	mov.u32 	%r81, %r30;

BB1_7:
	cvt.rn.f64.u32	%fd35, %r81;
	cvt.rn.f64.u32	%fd36, %r79;
	div.rn.f64 	%fd37, %fd36, %fd35;
	add.f64 	%fd38, %fd3, %fd37;
	add.f64 	%fd39, %fd4, %fd37;
	neg.f64 	%fd40, %fd39;
	fma.rn.f64 	%fd7, %fd5, %fd38, %fd25;
	fma.rn.f64 	%fd8, %fd6, %fd40, %fd28;
	setp.eq.s32	%p7, %r29, 0;
	mov.f64 	%fd69, 0d0000000000000000;
	mov.u32 	%r83, %r53;
	mov.f64 	%fd70, %fd69;
	@%p7 bra 	BB1_10;

BB1_8:
	mul.f64 	%fd11, %fd69, %fd69;
	mul.f64 	%fd12, %fd70, %fd70;
	add.f64 	%fd41, %fd12, %fd11;
	setp.geu.f64	%p8, %fd41, 0d4010000000000000;
	@%p8 bra 	BB1_10;

	sub.f64 	%fd42, %fd12, %fd11;
	add.f64 	%fd13, %fd7, %fd42;
	add.f64 	%fd43, %fd70, %fd70;
	fma.rn.f64 	%fd69, %fd43, %fd69, %fd8;
	add.s32 	%r83, %r83, 1;
	setp.lt.u32	%p9, %r83, %r29;
	mov.f64 	%fd70, %fd13;
	@%p9 bra 	BB1_8;

BB1_10:
	add.s32 	%r89, %r83, %r89;
	setp.gt.u32	%p10, %r79, 9;
	@%p10 bra 	BB1_12;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r79, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r83;

BB1_12:
	setp.eq.s16	%p11, %rs2, 0;
	and.b32  	%r56, %r79, -9;
	setp.ne.s32	%p12, %r56, 2;
	add.s32 	%r13, %r79, 1;
	or.pred  	%p13, %p12, %p11;
	@%p13 bra 	BB1_23;

	div.u32 	%r57, %r89, %r13;
	cvt.rn.f64.u32	%fd15, %r57;
	setp.eq.s32	%p14, %r79, 0;
	mov.f64 	%fd75, 0d0000000000000000;
	@%p14 bra 	BB1_22;

	and.b32  	%r14, %r79, 3;
	setp.eq.s32	%p15, %r14, 0;
	mov.f64 	%fd75, 0d0000000000000000;
	mov.u32 	%r87, 0;
	@%p15 bra 	BB1_20;

	setp.eq.s32	%p16, %r14, 1;
	mov.f64 	%fd72, 0d0000000000000000;
	mov.u32 	%r85, 0;
	@%p16 bra 	BB1_19;

	setp.eq.s32	%p17, %r14, 2;
	mov.f64 	%fd71, 0d0000000000000000;
	mov.u32 	%r84, 0;
	@%p17 bra 	BB1_18;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r62, [%rd20];
	cvt.rn.f64.u32	%fd48, %r62;
	sub.f64 	%fd49, %fd48, %fd15;
	fma.rn.f64 	%fd71, %fd49, %fd49, 0d0000000000000000;
	mov.u32 	%r84, 1;

BB1_18:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r84, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r63, [%rd24];
	cvt.rn.f64.u32	%fd50, %r63;
	sub.f64 	%fd51, %fd50, %fd15;
	fma.rn.f64 	%fd72, %fd51, %fd51, %fd71;
	add.s32 	%r85, %r84, 1;

BB1_19:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r85, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r64, [%rd28];
	cvt.rn.f64.u32	%fd52, %r64;
	sub.f64 	%fd53, %fd52, %fd15;
	fma.rn.f64 	%fd75, %fd53, %fd53, %fd72;
	add.s32 	%r87, %r85, 1;

BB1_20:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p18, %r79, 4;
	@%p18 bra 	BB1_22;

BB1_21:
	mul.wide.u32 	%rd30, %r87, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r65, [%rd31];
	cvt.rn.f64.u32	%fd54, %r65;
	sub.f64 	%fd55, %fd54, %fd15;
	fma.rn.f64 	%fd56, %fd55, %fd55, %fd75;
	add.s32 	%r66, %r87, 1;
	mul.wide.u32 	%rd32, %r66, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r67, [%rd33];
	cvt.rn.f64.u32	%fd57, %r67;
	sub.f64 	%fd58, %fd57, %fd15;
	fma.rn.f64 	%fd59, %fd58, %fd58, %fd56;
	add.s32 	%r68, %r87, 2;
	mul.wide.u32 	%rd34, %r68, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r69, [%rd35];
	cvt.rn.f64.u32	%fd60, %r69;
	sub.f64 	%fd61, %fd60, %fd15;
	fma.rn.f64 	%fd62, %fd61, %fd61, %fd59;
	add.s32 	%r70, %r87, 3;
	mul.wide.u32 	%rd36, %r70, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r71, [%rd37];
	cvt.rn.f64.u32	%fd63, %r71;
	sub.f64 	%fd64, %fd63, %fd15;
	fma.rn.f64 	%fd75, %fd64, %fd64, %fd62;
	add.s32 	%r87, %r87, 4;
	setp.lt.u32	%p19, %r87, %r79;
	@%p19 bra 	BB1_21;

BB1_22:
	add.s32 	%r74, %r79, -1;
	cvt.rn.f64.u32	%fd65, %r74;
	div.rn.f64 	%fd66, %fd75, %fd65;
	div.rn.f64 	%fd67, %fd66, %fd15;
	setp.eq.s32	%p20, %r79, 2;
	selp.f64	%fd68, 0d3F847AE140000000, 0d3FB99999A0000000, %p20;
	mov.u32 	%r73, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r73, 0; vote.ballot.b32 %r72, p; } 
	// inline asm
	setp.le.f64	%p21, %fd67, %fd68;
	vote.sync.all.pred 	%p22, %p21, %r72;
	selp.b32	%r81, %r13, %r81, %p22;

BB1_23:
	setp.lt.u32	%p23, %r13, %r81;
	mov.u32 	%r79, %r13;
	@%p23 bra 	BB1_7;

BB1_24:
	mul.lo.s32 	%r76, %r5, %r26;
	cvt.u64.u32	%rd38, %r76;
	cvta.to.global.u64 	%rd39, %rd2;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r4, 8;
	add.s64 	%rd42, %rd40, %rd41;
	div.u32 	%r77, %r89, %r81;
	st.global.u32 	[%rd42], %r77;
	cvt.rn.f32.u32	%f1, %r81;
	st.global.f32 	[%rd42+4], %f1;
	setp.gt.f32	%p24, %f1, 0f00000000;
	@%p24 bra 	BB1_26;

	mov.u64 	%rd43, $str2;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str1;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r78, 194;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r78;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB1_26:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd1, [compose_param_0];
	ld.param.u32 	%r4, [compose_param_1];
	ld.param.u64 	%rd2, [compose_param_4];
	ld.param.u32 	%r6, [compose_param_5];
	ld.param.u32 	%r7, [compose_param_6];
	ld.param.u64 	%rd3, [compose_param_7];
	ld.param.u32 	%r5, [compose_param_8];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r9, %r8, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	setp.ge.u32	%p1, %r2, %r7;
	setp.ge.u32	%p2, %r1, %r6;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB2_4;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.lo.s32 	%r14, %r2, %r4;
	cvt.u64.u32	%rd5, %r14;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u32 	%r15, [%rd8];
	rem.u32 	%r16, %r15, %r5;
	sub.s32 	%r17, %r5, %r16;
	add.s32 	%r3, %r17, -1;
	setp.lt.u32	%p4, %r3, %r5;
	@%p4 bra 	BB2_3;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str1;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r18, 251;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r18;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB2_3:
	shl.b32 	%r19, %r3, 2;
	mov.u32 	%r20, 0;
	suld.b.2d.b32.trap {%r21}, [%rd3, {%r19, %r20}];
	shl.b32 	%r22, %r1, 2;
	sust.b.2d.b32.trap 	[%rd2, {%r22, %r2}], {%r21};

BB2_4:
	ret;
}

	// .globl	blur
.visible .entry blur(

)
{



	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<76>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd4, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r28, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r29, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r30, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f10, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r31, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r32, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r33, %ntid.x;
	mov.u32 	%r34, %ctaid.x;
	mov.u32 	%r35, %tid.x;
	mad.lo.s32 	%r36, %r34, %r33, %r35;
	mul.lo.s32 	%r1, %r36, %r32;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ntid.y;
	mov.u32 	%r39, %tid.y;
	mad.lo.s32 	%r40, %r37, %r38, %r39;
	mul.lo.s32 	%r2, %r40, %r32;
	sub.s32 	%r41, %r30, %r32;
	setp.ge.u32	%p1, %r2, %r41;
	sub.s32 	%r42, %r29, %r32;
	setp.ge.u32	%p2, %r1, %r42;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB4_17;

	sub.f32 	%f16, %f12, %f10;
	cvt.rn.f32.u32	%f17, %r29;
	div.rn.f32 	%f18, %f16, %f17;
	cvt.rn.f32.u32	%f19, %r30;
	sub.f32 	%f20, %f13, %f11;
	div.rn.f32 	%f21, %f20, %f19;
	cvt.rn.f32.u32	%f22, %r1;
	fma.rn.f32 	%f1, %f22, %f18, %f10;
	cvt.rn.f32.u32	%f23, %r2;
	mul.f32 	%f24, %f23, %f21;
	sub.f32 	%f2, %f13, %f24;
	setp.eq.s32	%p4, %r31, 0;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r66, 0;
	@%p4 bra 	BB4_5;

	mov.f32 	%f30, %f29;

BB4_3:
	mul.f32 	%f5, %f30, %f30;
	mul.f32 	%f6, %f29, %f29;
	add.f32 	%f25, %f5, %f6;
	setp.geu.f32	%p5, %f25, 0f40800000;
	@%p5 bra 	BB4_5;

	sub.f32 	%f26, %f6, %f5;
	add.f32 	%f7, %f1, %f26;
	add.f32 	%f27, %f29, %f29;
	fma.rn.f32 	%f30, %f30, %f27, %f2;
	add.s32 	%r66, %r66, 1;
	setp.lt.u32	%p6, %r66, %r31;
	mov.f32 	%f29, %f7;
	@%p6 bra 	BB4_3;

BB4_5:
	setp.eq.s32	%p7, %r32, 0;
	@%p7 bra 	BB4_17;

	cvta.to.global.u64 	%rd1, %rd4;
	cvt.rn.f32.u32	%f28, %r32;
	rcp.rn.f32 	%f9, %f28;
	mul.lo.s32 	%r46, %r2, %r28;
	cvt.u64.u32	%rd5, %r46;
	add.s64 	%rd2, %rd1, %rd5;
	shl.b32 	%r6, %r28, 2;
	mov.u32 	%r45, 0;
	mov.u32 	%r67, %r45;

BB4_7:
	add.s32 	%r51, %r67, %r1;
	cvt.u64.u32	%rd3, %r51;
	and.b32  	%r50, %r32, 3;
	setp.eq.s32	%p8, %r50, 0;
	mov.u32 	%r75, %r45;
	@%p8 bra 	BB4_13;

	setp.eq.s32	%p9, %r50, 1;
	mov.u32 	%r69, %r45;
	@%p9 bra 	BB4_12;

	setp.eq.s32	%p10, %r50, 2;
	mov.u32 	%r68, %r45;
	@%p10 bra 	BB4_11;

	shl.b64 	%rd6, %rd3, 3;
	add.s64 	%rd7, %rd2, %rd6;
	st.global.u32 	[%rd7], %r66;
	st.global.f32 	[%rd7+4], %f9;
	mov.u32 	%r68, 1;

BB4_11:
	add.s32 	%r53, %r68, %r2;
	mul.lo.s32 	%r54, %r53, %r28;
	cvt.u64.u32	%rd8, %r54;
	add.s64 	%rd9, %rd1, %rd8;
	shl.b64 	%rd10, %rd3, 3;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u32 	[%rd11], %r66;
	st.global.f32 	[%rd11+4], %f9;
	add.s32 	%r69, %r68, 1;

BB4_12:
	add.s32 	%r55, %r69, %r2;
	mul.lo.s32 	%r56, %r55, %r28;
	cvt.u64.u32	%rd12, %r56;
	add.s64 	%rd13, %rd1, %rd12;
	shl.b64 	%rd14, %rd3, 3;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.u32 	[%rd15], %r66;
	st.global.f32 	[%rd15+4], %f9;
	add.s32 	%r75, %r69, 1;

BB4_13:
	setp.lt.u32	%p11, %r32, 4;
	@%p11 bra 	BB4_16;

	mad.lo.s32 	%r61, %r32, %r40, %r75;
	add.s32 	%r62, %r61, 3;
	mul.lo.s32 	%r74, %r28, %r62;
	add.s32 	%r63, %r61, 2;
	mul.lo.s32 	%r73, %r28, %r63;
	add.s32 	%r64, %r61, 1;
	mul.lo.s32 	%r72, %r28, %r64;
	mul.lo.s32 	%r71, %r28, %r61;

BB4_15:
	cvt.u64.u32	%rd16, %r71;
	add.s64 	%rd17, %rd1, %rd16;
	shl.b64 	%rd18, %rd3, 3;
	add.s64 	%rd19, %rd17, %rd18;
	st.global.u32 	[%rd19], %r66;
	st.global.f32 	[%rd19+4], %f9;
	cvt.u64.u32	%rd20, %r72;
	add.s64 	%rd21, %rd1, %rd20;
	add.s64 	%rd22, %rd21, %rd18;
	st.global.u32 	[%rd22], %r66;
	st.global.f32 	[%rd22+4], %f9;
	cvt.u64.u32	%rd23, %r73;
	add.s64 	%rd24, %rd1, %rd23;
	add.s64 	%rd25, %rd24, %rd18;
	st.global.u32 	[%rd25], %r66;
	st.global.f32 	[%rd25+4], %f9;
	cvt.u64.u32	%rd26, %r74;
	add.s64 	%rd27, %rd1, %rd26;
	add.s64 	%rd28, %rd27, %rd18;
	st.global.u32 	[%rd28], %r66;
	st.global.f32 	[%rd28+4], %f9;
	add.s32 	%r74, %r74, %r6;
	add.s32 	%r73, %r73, %r6;
	add.s32 	%r72, %r72, %r6;
	add.s32 	%r71, %r71, %r6;
	add.s32 	%r75, %r75, 4;
	setp.lt.u32	%p12, %r75, %r32;
	@%p12 bra 	BB4_15;

BB4_16:
	add.s32 	%r67, %r67, 1;
	setp.lt.u32	%p13, %r67, %r32;
	@%p13 bra 	BB4_7;

BB4_17:
	ret;
}

	// .globl	debug
.visible .entry debug(
	.param .align 4 .b8 debug_param_0[24],
	.param .u32 debug_param_1
)
{



	ret;
}

	// .globl	init
.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderReuseSamples
.visible .entry fractalRenderReuseSamples(
	.param .u64 fractalRenderReuseSamples_param_0,
	.param .u32 fractalRenderReuseSamples_param_1,
	.param .align 4 .b8 fractalRenderReuseSamples_param_2[8],
	.param .align 4 .b8 fractalRenderReuseSamples_param_3[16],
	.param .u32 fractalRenderReuseSamples_param_4,
	.param .u32 fractalRenderReuseSamples_param_5,
	.param .u8 fractalRenderReuseSamples_param_6,
	.param .u8 fractalRenderReuseSamples_param_7,
	.param .align 4 .b8 fractalRenderReuseSamples_param_8[16],
	.param .u64 fractalRenderReuseSamples_param_9,
	.param .u32 fractalRenderReuseSamples_param_10,
	.param .u8 fractalRenderReuseSamples_param_11,
	.param .align 4 .b8 fractalRenderReuseSamples_param_12[8],
	.param .u8 fractalRenderReuseSamples_param_13
)
{
	.local .align 8 .b8 	__local_depot7[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<55>;
	.reg .b16 	%rs<14>;
	.reg .f32 	%f<175>;
	.reg .b32 	%r<131>;
	.reg .b64 	%rd<68>;


	mov.u64 	%rd67, __local_depot7;
	cvta.local.u64 	%SP, %rd67;
	ld.param.u64 	%rd2, [fractalRenderReuseSamples_param_0];
	ld.param.u32 	%r39, [fractalRenderReuseSamples_param_1];
	ld.param.u32 	%r41, [fractalRenderReuseSamples_param_2+4];
	ld.param.u32 	%r40, [fractalRenderReuseSamples_param_2];
	ld.param.s8 	%rs5, [fractalRenderReuseSamples_param_13];
	ld.param.s8 	%rs4, [fractalRenderReuseSamples_param_11];
	ld.param.s8 	%rs3, [fractalRenderReuseSamples_param_7];
	ld.param.s8 	%rs2, [fractalRenderReuseSamples_param_6];
	ld.param.f32 	%f46, [fractalRenderReuseSamples_param_3+12];
	ld.param.f32 	%f45, [fractalRenderReuseSamples_param_3+8];
	ld.param.f32 	%f44, [fractalRenderReuseSamples_param_3+4];
	ld.param.f32 	%f43, [fractalRenderReuseSamples_param_3];
	ld.param.u32 	%r42, [fractalRenderReuseSamples_param_4];
	ld.param.u32 	%r43, [fractalRenderReuseSamples_param_5];
	ld.param.f32 	%f50, [fractalRenderReuseSamples_param_8+12];
	ld.param.f32 	%f49, [fractalRenderReuseSamples_param_8+8];
	ld.param.f32 	%f48, [fractalRenderReuseSamples_param_8+4];
	ld.param.f32 	%f47, [fractalRenderReuseSamples_param_8];
	ld.param.u64 	%rd3, [fractalRenderReuseSamples_param_9];
	ld.param.u32 	%r44, [fractalRenderReuseSamples_param_10];
	ld.param.u32 	%r46, [fractalRenderReuseSamples_param_12+4];
	ld.param.u32 	%r45, [fractalRenderReuseSamples_param_12];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB7_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r47, 107;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB7_2:
	mov.u32 	%r48, %tid.x;
	mov.u32 	%r49, %tid.y;
	mad.lo.s32 	%r50, %r1, %r49, %r48;
	shl.b32 	%r51, %r1, 2;
	and.b32  	%r52, %r50, 15;
	rem.u32 	%r53, %r50, %r51;
	sub.s32 	%r54, %r53, %r52;
	shr.u32 	%r55, %r54, 2;
	and.b32  	%r56, %r50, 3;
	add.s32 	%r57, %r55, %r56;
	div.u32 	%r58, %r50, %r51;
	shl.b32 	%r59, %r58, 2;
	bfe.u32 	%r60, %r50, 2, 2;
	add.s32 	%r61, %r59, %r60;
	mov.u32 	%r62, %ctaid.x;
	mad.lo.s32 	%r4, %r62, %r1, %r57;
	mov.u32 	%r63, %ctaid.y;
	mov.u32 	%r64, %ntid.y;
	mad.lo.s32 	%r5, %r63, %r64, %r61;
	setp.lt.u32	%p2, %r4, %r40;
	setp.lt.u32	%p3, %r5, %r41;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB7_49;
	bra.uni 	BB7_3;

BB7_3:
	and.b16  	%rs7, %rs5, 255;
	setp.eq.s16	%p5, %rs7, 0;
	mov.u16 	%rs13, 0;
	@%p5 bra 	BB7_10;

	cvt.rn.f32.u32	%f52, %r4;
	sub.f32 	%f53, %f45, %f43;
	sub.f32 	%f54, %f46, %f44;
	sub.f32 	%f55, %f49, %f47;
	sub.f32 	%f56, %f50, %f48;
	div.rn.f32 	%f57, %f53, %f55;
	div.rn.f32 	%f58, %f54, %f56;
	sub.f32 	%f59, %f43, %f47;
	sub.f32 	%f60, %f50, %f46;
	div.rn.f32 	%f61, %f59, %f53;
	div.rn.f32 	%f62, %f60, %f54;
	cvt.rn.f32.u32	%f63, %r40;
	mul.f32 	%f64, %f63, %f61;
	cvt.rn.f32.u32	%f65, %r41;
	mul.f32 	%f66, %f65, %f62;
	cvt.rn.f32.u32	%f67, %r5;
	fma.rn.f32 	%f1, %f52, %f57, %f64;
	fma.rn.f32 	%f2, %f67, %f58, %f66;
	abs.f32 	%f68, %f1;
	mov.b32 	 %r66, %f1;
	and.b32  	%r67, %r66, -2147483648;
	or.b32  	%r68, %r67, 1056964608;
	mov.b32 	 %f69, %r68;
	add.f32 	%f70, %f1, %f69;
	cvt.rzi.f32.f32	%f71, %f70;
	setp.gt.f32	%p6, %f68, 0f4B000000;
	selp.f32	%f163, %f1, %f71, %p6;
	setp.geu.f32	%p7, %f68, 0f3F000000;
	@%p7 bra 	BB7_6;

	cvt.rzi.f32.f32	%f163, %f1;

BB7_6:
	cvt.rzi.s32.f32	%r6, %f163;
	mov.b32 	 %r69, %f2;
	and.b32  	%r70, %r69, -2147483648;
	or.b32  	%r71, %r70, 1056964608;
	mov.b32 	 %f72, %r71;
	add.f32 	%f73, %f2, %f72;
	cvt.rzi.f32.f32	%f74, %f73;
	abs.f32 	%f75, %f2;
	setp.gt.f32	%p8, %f75, 0f4B000000;
	selp.f32	%f164, %f2, %f74, %p8;
	setp.geu.f32	%p9, %f75, 0f3F000000;
	@%p9 bra 	BB7_8;

	cvt.rzi.f32.f32	%f164, %f2;

BB7_8:
	setp.lt.u32	%p10, %r6, %r40;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p10, %p11;
	cvt.rzi.s32.f32	%r7, %f164;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r41;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB7_10;
	bra.uni 	BB7_9;

BB7_9:
	cvta.to.global.u64 	%rd10, %rd3;
	mul.lo.s32 	%r73, %r7, %r44;
	cvt.u64.u32	%rd11, %r73;
	add.s64 	%rd12, %rd10, %rd11;
	mul.wide.u32 	%rd13, %r6, 8;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u32 	%r115, [%rd14];
	ld.global.f32 	%f165, [%rd14+4];
	mov.u16 	%rs13, 1;

BB7_10:
	and.b16  	%rs10, %rs4, 255;
	setp.eq.s16	%p17, %rs10, 0;
	mov.u32 	%r116, %r43;
	@%p17 bra 	BB7_17;

	cvt.rn.f32.u32	%f77, %r45;
	cvt.rn.f32.u32	%f78, %r46;
	and.b32  	%r74, %r4, -8;
	cvt.rn.f32.u32	%f79, %r74;
	and.b32  	%r75, %r5, -4;
	cvt.rn.f32.u32	%f80, %r75;
	sub.f32 	%f81, %f77, %f79;
	sub.f32 	%f82, %f78, %f80;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f81, %f81, %f83;
	sqrt.rn.f32 	%f85, %f84;
	mul.f32 	%f86, %f85, 0f3CD94079;
	ld.global.f32 	%f87, [screenDistance];
	div.rn.f32 	%f11, %f86, %f87;
	abs.f32 	%f12, %f11;
	setp.leu.f32	%p18, %f12, 0f3F800000;
	mov.f32 	%f166, %f12;
	@%p18 bra 	BB7_13;

	rcp.rn.f32 	%f166, %f12;

BB7_13:
	mul.rn.f32 	%f88, %f166, %f166;
	mov.f32 	%f89, 0fC0B59883;
	mov.f32 	%f90, 0fBF52C7EA;
	fma.rn.f32 	%f91, %f88, %f90, %f89;
	mov.f32 	%f92, 0fC0D21907;
	fma.rn.f32 	%f93, %f91, %f88, %f92;
	mul.f32 	%f94, %f88, %f93;
	mul.f32 	%f95, %f166, %f94;
	add.f32 	%f96, %f88, 0f41355DC0;
	mov.f32 	%f97, 0f41E6BD60;
	fma.rn.f32 	%f98, %f96, %f88, %f97;
	mov.f32 	%f99, 0f419D92C8;
	fma.rn.f32 	%f100, %f98, %f88, %f99;
	rcp.rn.f32 	%f101, %f100;
	fma.rn.f32 	%f102, %f95, %f101, %f166;
	mov.f32 	%f103, 0f3FC90FDB;
	sub.f32 	%f104, %f103, %f102;
	setp.gt.f32	%p19, %f12, 0f3F800000;
	selp.f32	%f105, %f104, %f102, %p19;
	mov.b32 	 %r76, %f105;
	mov.b32 	 %r77, %f11;
	and.b32  	%r78, %r77, -2147483648;
	or.b32  	%r79, %r76, %r78;
	mov.b32 	 %f106, %r79;
	setp.gtu.f32	%p20, %f12, 0f7F800000;
	selp.f32	%f107, %f105, %f106, %p20;
	mul.f32 	%f108, %f107, 0f43340000;
	div.rn.f32 	%f15, %f108, 0f40490FDB;
	setp.ge.f32	%p21, %f15, 0f00000000;
	@%p21 bra 	BB7_15;

	mov.u64 	%rd15, $str12;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str1;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r80, 358;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r80;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB7_15:
	fma.rn.f32 	%f109, %f15, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f15, 0f40B00000;
	selp.f32	%f110, %f109, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f111, %r43;
	mul.f32 	%f112, %f111, %f110;
	cvt.rzi.u32.f32	%r116, %f112;
	setp.gtu.f32	%p23, %f15, 0f42700000;
	@%p23 bra 	BB7_17;

	mov.u32 	%r81, 1;
	max.u32 	%r116, %r81, %r116;

BB7_17:
	setp.eq.f32	%p24, %f165, 0f00000000;
	setp.eq.s16	%p25, %rs13, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r116, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r116, %p28;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB7_19;

	mov.u64 	%rd21, $str3;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str1;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r82, 137;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r82;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB7_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r127, 0;
	mov.u32 	%r119, %r127;
	@%p30 bra 	BB7_38;

	cvt.rn.f32.u32	%f18, %r4;
	cvt.rn.f32.u32	%f19, %r5;
	sub.f32 	%f113, %f45, %f43;
	cvt.rn.f32.u32	%f114, %r40;
	div.rn.f32 	%f20, %f113, %f114;
	sub.f32 	%f115, %f46, %f44;
	cvt.rn.f32.u32	%f116, %r41;
	div.rn.f32 	%f21, %f115, %f116;
	mov.u32 	%r86, 0;
	and.b16  	%rs11, %rs2, 255;
	mov.u32 	%r117, %r86;
	mov.u32 	%r127, %r86;
	mov.u32 	%r119, %r13;

BB7_21:
	cvt.rn.f32.u32	%f119, %r119;
	cvt.rn.f32.u32	%f120, %r117;
	div.rn.f32 	%f121, %f120, %f119;
	add.f32 	%f122, %f18, %f121;
	add.f32 	%f123, %f19, %f121;
	neg.f32 	%f124, %f123;
	fma.rn.f32 	%f22, %f20, %f122, %f43;
	fma.rn.f32 	%f23, %f21, %f124, %f46;
	setp.eq.s32	%p31, %r42, 0;
	mov.f32 	%f167, 0f00000000;
	mov.u32 	%r121, %r86;
	mov.f32 	%f168, %f167;
	@%p31 bra 	BB7_24;

BB7_22:
	mul.f32 	%f26, %f167, %f167;
	mul.f32 	%f27, %f168, %f168;
	add.f32 	%f125, %f27, %f26;
	setp.geu.f32	%p32, %f125, 0f40800000;
	@%p32 bra 	BB7_24;

	sub.f32 	%f126, %f27, %f26;
	add.f32 	%f28, %f22, %f126;
	add.f32 	%f127, %f168, %f168;
	fma.rn.f32 	%f167, %f127, %f167, %f23;
	add.s32 	%r121, %r121, 1;
	setp.lt.u32	%p33, %r121, %r42;
	mov.f32 	%f168, %f28;
	@%p33 bra 	BB7_22;

BB7_24:
	add.s32 	%r127, %r121, %r127;
	setp.gt.u32	%p34, %r117, 9;
	@%p34 bra 	BB7_26;

	add.u64 	%rd27, %SP, 0;
	cvta.to.local.u64 	%rd28, %rd27;
	mul.wide.u32 	%rd29, %r117, 4;
	add.s64 	%rd30, %rd28, %rd29;
	st.local.u32 	[%rd30], %r121;

BB7_26:
	setp.eq.s16	%p35, %rs11, 0;
	and.b32  	%r89, %r117, -9;
	setp.ne.s32	%p36, %r89, 2;
	add.s32 	%r21, %r117, 1;
	or.pred  	%p37, %p36, %p35;
	@%p37 bra 	BB7_37;

	div.u32 	%r90, %r127, %r21;
	cvt.rn.f32.u32	%f30, %r90;
	setp.eq.s32	%p38, %r117, 0;
	mov.f32 	%f173, 0f00000000;
	@%p38 bra 	BB7_36;

	and.b32  	%r22, %r117, 3;
	setp.eq.s32	%p39, %r22, 0;
	mov.f32 	%f173, 0f00000000;
	mov.u32 	%r125, 0;
	@%p39 bra 	BB7_34;

	setp.eq.s32	%p40, %r22, 1;
	mov.f32 	%f170, 0f00000000;
	mov.u32 	%r123, 0;
	@%p40 bra 	BB7_33;

	setp.eq.s32	%p41, %r22, 2;
	mov.f32 	%f169, 0f00000000;
	mov.u32 	%r122, 0;
	@%p41 bra 	BB7_32;

	add.u64 	%rd31, %SP, 0;
	cvta.to.local.u64 	%rd32, %rd31;
	ld.local.u32 	%r95, [%rd32];
	cvt.rn.f32.u32	%f132, %r95;
	sub.f32 	%f133, %f132, %f30;
	fma.rn.f32 	%f169, %f133, %f133, 0f00000000;
	mov.u32 	%r122, 1;

BB7_32:
	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r122, 4;
	add.s64 	%rd36, %rd34, %rd35;
	ld.local.u32 	%r96, [%rd36];
	cvt.rn.f32.u32	%f134, %r96;
	sub.f32 	%f135, %f134, %f30;
	fma.rn.f32 	%f170, %f135, %f135, %f169;
	add.s32 	%r123, %r122, 1;

BB7_33:
	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	mul.wide.u32 	%rd39, %r123, 4;
	add.s64 	%rd40, %rd38, %rd39;
	ld.local.u32 	%r97, [%rd40];
	cvt.rn.f32.u32	%f136, %r97;
	sub.f32 	%f137, %f136, %f30;
	fma.rn.f32 	%f173, %f137, %f137, %f170;
	add.s32 	%r125, %r123, 1;

BB7_34:
	add.u64 	%rd41, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd41;
	setp.lt.u32	%p42, %r117, 4;
	@%p42 bra 	BB7_36;

BB7_35:
	mul.wide.u32 	%rd42, %r125, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.local.u32 	%r98, [%rd43];
	cvt.rn.f32.u32	%f138, %r98;
	sub.f32 	%f139, %f138, %f30;
	fma.rn.f32 	%f140, %f139, %f139, %f173;
	add.s32 	%r99, %r125, 1;
	mul.wide.u32 	%rd44, %r99, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.local.u32 	%r100, [%rd45];
	cvt.rn.f32.u32	%f141, %r100;
	sub.f32 	%f142, %f141, %f30;
	fma.rn.f32 	%f143, %f142, %f142, %f140;
	add.s32 	%r101, %r125, 2;
	mul.wide.u32 	%rd46, %r101, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.local.u32 	%r102, [%rd47];
	cvt.rn.f32.u32	%f144, %r102;
	sub.f32 	%f145, %f144, %f30;
	fma.rn.f32 	%f146, %f145, %f145, %f143;
	add.s32 	%r103, %r125, 3;
	mul.wide.u32 	%rd48, %r103, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r104, [%rd49];
	cvt.rn.f32.u32	%f147, %r104;
	sub.f32 	%f148, %f147, %f30;
	fma.rn.f32 	%f173, %f148, %f148, %f146;
	add.s32 	%r125, %r125, 4;
	setp.lt.u32	%p43, %r125, %r117;
	@%p43 bra 	BB7_35;

BB7_36:
	add.s32 	%r107, %r117, -1;
	cvt.rn.f32.u32	%f149, %r107;
	div.rn.f32 	%f150, %f173, %f149;
	div.rn.f32 	%f151, %f150, %f30;
	setp.eq.s32	%p44, %r117, 2;
	selp.f32	%f152, 0f3C23D70A, 0f3DCCCCCD, %p44;
	mov.u32 	%r106, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r106, 0; vote.ballot.b32 %r105, p; } 
	// inline asm
	setp.le.f32	%p45, %f151, %f152;
	vote.sync.all.pred 	%p46, %p45, %r105;
	selp.b32	%r119, %r21, %r119, %p46;

BB7_37:
	setp.lt.u32	%p47, %r21, %r119;
	mov.u32 	%r117, %r21;
	@%p47 bra 	BB7_21;

BB7_38:
	div.u32 	%r129, %r127, %r119;
	setp.ne.s16	%p48, %rs13, 0;
	setp.ne.s32	%p49, %r119, 0;
	or.pred  	%p50, %p49, %p48;
	@%p50 bra 	BB7_40;

	mov.u64 	%rd50, $str13;
	cvta.global.u64 	%rd51, %rd50;
	mov.u64 	%rd52, $str1;
	cvta.global.u64 	%rd53, %rd52;
	mov.u32 	%r109, 407;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd55, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd51;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd53;
	.param .b32 param2;
	st.param.b32	[param2+0], %r109;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd54;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd55;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB7_40:
	@%p25 bra 	BB7_44;

	setp.eq.s32	%p52, %r119, 0;
	@%p52 bra 	BB7_42;

	mul.f32 	%f153, %f165, 0f3F266666;
	cvt.rn.f32.u32	%f154, %r119;
	add.f32 	%f165, %f153, %f154;
	cvt.rn.f32.u32	%f155, %r115;
	mul.lo.s32 	%r110, %r129, %r119;
	cvt.rn.f32.u32	%f156, %r110;
	fma.rn.f32 	%f157, %f155, %f153, %f156;
	div.rn.f32 	%f158, %f157, %f165;
	cvt.rzi.u32.f32	%r129, %f158;
	bra.uni 	BB7_45;

BB7_44:
	cvt.rn.f32.u32	%f165, %r119;
	bra.uni 	BB7_45;

BB7_42:
	mov.u32 	%r129, %r115;

BB7_45:
	and.b16  	%rs12, %rs3, 255;
	setp.eq.s16	%p53, %rs12, 0;
	@%p53 bra 	BB7_47;

	cvt.u32.u16	%r111, %rs13;
	add.s32 	%r112, %r119, %r111;
	cvt.rn.f32.u32	%f159, %r112;
	cvt.rn.f32.u32	%f160, %r43;
	div.rn.f32 	%f161, %f159, %f160;
	mul.f32 	%f162, %f161, 0f437F0000;
	cvt.rzi.u32.f32	%r129, %f162;

BB7_47:
	mul.lo.s32 	%r113, %r5, %r39;
	cvt.u64.u32	%rd56, %r113;
	cvta.to.global.u64 	%rd57, %rd2;
	add.s64 	%rd58, %rd57, %rd56;
	mul.wide.u32 	%rd59, %r4, 8;
	add.s64 	%rd60, %rd58, %rd59;
	st.global.u32 	[%rd60], %r129;
	st.global.f32 	[%rd60+4], %f165;
	setp.gt.f32	%p54, %f165, 0f00000000;
	@%p54 bra 	BB7_49;

	mov.u64 	%rd61, $str14;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str1;
	cvta.global.u64 	%rd64, %rd63;
	mov.u32 	%r114, 440;
	mov.u64 	%rd65, 0;
	mov.u64 	%rd66, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r114;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd65;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd66;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB7_49:
	ret;
}


