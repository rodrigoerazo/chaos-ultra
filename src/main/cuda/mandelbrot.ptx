//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	fractalRenderMainFloat
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 4 .f32 PI_F = 0f40490FDB;
.global .align 4 .u32 MAX_SS_LEVEL = 256;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str1[28] = {109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str2[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str3[56] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 16 .b8 $str9[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str10[28] = {102, 114, 97, 99, 116, 97, 108, 82, 101, 110, 100, 101, 114, 82, 101, 117, 115, 101, 83, 97, 109, 112, 108, 101, 115, 58, 10, 0};
.global .align 16 .b8 $str13[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str14[66] = {114, 0, 101, 0, 117, 0, 115, 0, 105, 0, 110, 0, 103, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 32, 0, 124, 0, 124, 0, 32, 0, 115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str15[34] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 87, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};

.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .u32 fractalRenderMainFloat_param_2,
	.param .u32 fractalRenderMainFloat_param_3,
	.param .f32 fractalRenderMainFloat_param_4,
	.param .f32 fractalRenderMainFloat_param_5,
	.param .f32 fractalRenderMainFloat_param_6,
	.param .f32 fractalRenderMainFloat_param_7,
	.param .u32 fractalRenderMainFloat_param_8,
	.param .u32 fractalRenderMainFloat_param_9,
	.param .u8 fractalRenderMainFloat_param_10,
	.param .u8 fractalRenderMainFloat_param_11,
	.param .u64 fractalRenderMainFloat_param_12,
	.param .u32 fractalRenderMainFloat_param_13,
	.param .u32 fractalRenderMainFloat_param_14,
	.param .u32 fractalRenderMainFloat_param_15
)
{
	.local .align 8 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<25>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<79>;
	.reg .b32 	%r<89>;
	.reg .b64 	%rd<50>;


	mov.u64 	%rd49, __local_depot0;
	cvta.local.u64 	%SP, %rd49;
	ld.param.u64 	%rd2, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r24, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_2];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_3];
	ld.param.f32 	%f27, [fractalRenderMainFloat_param_4];
	ld.param.f32 	%f28, [fractalRenderMainFloat_param_5];
	ld.param.f32 	%f29, [fractalRenderMainFloat_param_6];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_7];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_8];
	ld.param.u32 	%r79, [fractalRenderMainFloat_param_9];
	ld.param.s8 	%rs1, [fractalRenderMainFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r29, 107;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r29;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	mov.u32 	%r30, %tid.x;
	mov.u32 	%r31, %tid.y;
	mad.lo.s32 	%r32, %r1, %r31, %r30;
	shl.b32 	%r33, %r1, 2;
	and.b32  	%r34, %r32, 15;
	rem.u32 	%r35, %r32, %r33;
	sub.s32 	%r36, %r35, %r34;
	shr.u32 	%r37, %r36, 2;
	and.b32  	%r38, %r32, 3;
	add.s32 	%r39, %r37, %r38;
	div.u32 	%r40, %r32, %r33;
	shl.b32 	%r41, %r40, 2;
	bfe.u32 	%r42, %r32, 2, 2;
	add.s32 	%r43, %r41, %r42;
	mov.u32 	%r44, %ctaid.x;
	mad.lo.s32 	%r2, %r44, %r1, %r39;
	mov.u32 	%r45, %ctaid.y;
	mov.u32 	%r46, %ntid.y;
	mad.lo.s32 	%r3, %r45, %r46, %r43;
	setp.ge.u32	%p2, %r3, %r26;
	setp.ge.u32	%p3, %r2, %r25;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB0_27;

	setp.lt.u32	%p5, %r79, 257;
	@%p5 bra 	BB0_5;

	mov.u64 	%rd9, $str3;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str1;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r47, 137;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB0_5:
	setp.eq.s32	%p6, %r79, 0;
	cvt.rn.f32.u32	%f78, %r79;
	mov.u32 	%r87, 0;
	@%p6 bra 	BB0_6;

	cvt.rn.f32.u32	%f2, %r2;
	cvt.rn.f32.u32	%f3, %r3;
	cvt.rn.f32.u32	%f31, %r25;
	sub.f32 	%f32, %f29, %f27;
	div.rn.f32 	%f4, %f32, %f31;
	cvt.rn.f32.u32	%f33, %r26;
	sub.f32 	%f34, %f30, %f28;
	div.rn.f32 	%f5, %f34, %f33;
	mov.u32 	%r51, 0;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r77, %r51;
	mov.u32 	%r87, %r51;

BB0_8:
	cvt.rn.f32.u32	%f37, %r77;
	div.rn.f32 	%f38, %f37, %f78;
	add.f32 	%f39, %f2, %f38;
	add.f32 	%f40, %f3, %f38;
	neg.f32 	%f41, %f40;
	fma.rn.f32 	%f7, %f4, %f39, %f27;
	fma.rn.f32 	%f8, %f5, %f41, %f30;
	setp.eq.s32	%p7, %r27, 0;
	mov.f32 	%f71, 0f00000000;
	mov.u32 	%r81, %r51;
	mov.f32 	%f72, %f71;
	@%p7 bra 	BB0_11;

BB0_9:
	mul.f32 	%f11, %f71, %f71;
	mul.f32 	%f12, %f72, %f72;
	add.f32 	%f42, %f12, %f11;
	setp.geu.f32	%p8, %f42, 0f40800000;
	@%p8 bra 	BB0_11;

	sub.f32 	%f43, %f12, %f11;
	add.f32 	%f13, %f7, %f43;
	add.f32 	%f44, %f72, %f72;
	fma.rn.f32 	%f71, %f44, %f71, %f8;
	add.s32 	%r81, %r81, 1;
	setp.lt.u32	%p9, %r81, %r27;
	mov.f32 	%f72, %f13;
	@%p9 bra 	BB0_9;

BB0_11:
	add.s32 	%r87, %r81, %r87;
	setp.gt.u32	%p10, %r77, 9;
	@%p10 bra 	BB0_13;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r77, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r81;

BB0_13:
	setp.eq.s16	%p11, %rs2, 0;
	and.b32  	%r54, %r77, -9;
	setp.ne.s32	%p12, %r54, 2;
	add.s32 	%r11, %r77, 1;
	or.pred  	%p13, %p12, %p11;
	@%p13 bra 	BB0_24;

	div.u32 	%r55, %r87, %r11;
	cvt.rn.f32.u32	%f15, %r55;
	setp.eq.s32	%p14, %r77, 0;
	mov.f32 	%f77, 0f00000000;
	@%p14 bra 	BB0_23;

	and.b32  	%r12, %r77, 3;
	setp.eq.s32	%p15, %r12, 0;
	mov.f32 	%f77, 0f00000000;
	mov.u32 	%r85, 0;
	@%p15 bra 	BB0_21;

	setp.eq.s32	%p16, %r12, 1;
	mov.f32 	%f74, 0f00000000;
	mov.u32 	%r83, 0;
	@%p16 bra 	BB0_20;

	setp.eq.s32	%p17, %r12, 2;
	mov.f32 	%f73, 0f00000000;
	mov.u32 	%r82, 0;
	@%p17 bra 	BB0_19;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r60, [%rd20];
	cvt.rn.f32.u32	%f49, %r60;
	sub.f32 	%f50, %f49, %f15;
	fma.rn.f32 	%f73, %f50, %f50, 0f00000000;
	mov.u32 	%r82, 1;

BB0_19:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r61, [%rd24];
	cvt.rn.f32.u32	%f51, %r61;
	sub.f32 	%f52, %f51, %f15;
	fma.rn.f32 	%f74, %f52, %f52, %f73;
	add.s32 	%r83, %r82, 1;

BB0_20:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r83, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r62, [%rd28];
	cvt.rn.f32.u32	%f53, %r62;
	sub.f32 	%f54, %f53, %f15;
	fma.rn.f32 	%f77, %f54, %f54, %f74;
	add.s32 	%r85, %r83, 1;

BB0_21:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p18, %r77, 4;
	@%p18 bra 	BB0_23;

BB0_22:
	mul.wide.u32 	%rd30, %r85, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r63, [%rd31];
	cvt.rn.f32.u32	%f55, %r63;
	sub.f32 	%f56, %f55, %f15;
	fma.rn.f32 	%f57, %f56, %f56, %f77;
	add.s32 	%r64, %r85, 1;
	mul.wide.u32 	%rd32, %r64, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r65, [%rd33];
	cvt.rn.f32.u32	%f58, %r65;
	sub.f32 	%f59, %f58, %f15;
	fma.rn.f32 	%f60, %f59, %f59, %f57;
	add.s32 	%r66, %r85, 2;
	mul.wide.u32 	%rd34, %r66, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r67, [%rd35];
	cvt.rn.f32.u32	%f61, %r67;
	sub.f32 	%f62, %f61, %f15;
	fma.rn.f32 	%f63, %f62, %f62, %f60;
	add.s32 	%r68, %r85, 3;
	mul.wide.u32 	%rd36, %r68, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r69, [%rd37];
	cvt.rn.f32.u32	%f64, %r69;
	sub.f32 	%f65, %f64, %f15;
	fma.rn.f32 	%f77, %f65, %f65, %f63;
	add.s32 	%r85, %r85, 4;
	setp.lt.u32	%p19, %r85, %r77;
	@%p19 bra 	BB0_22;

BB0_23:
	add.s32 	%r72, %r77, -1;
	cvt.rn.f32.u32	%f66, %r72;
	div.rn.f32 	%f67, %f77, %f66;
	div.rn.f32 	%f68, %f67, %f15;
	setp.eq.s32	%p20, %r77, 2;
	selp.f32	%f69, 0f3C23D70A, 0f3DCCCCCD, %p20;
	mov.u32 	%r71, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r71, 0; vote.ballot.b32 %r70, p; } 
	// inline asm
	setp.le.f32	%p21, %f68, %f69;
	vote.sync.all.pred 	%p22, %p21, %r70;
	selp.b32	%r79, %r11, %r79, %p22;

BB0_24:
	cvt.rn.f32.u32	%f78, %r79;
	setp.lt.u32	%p23, %r11, %r79;
	mov.u32 	%r77, %r11;
	@%p23 bra 	BB0_8;
	bra.uni 	BB0_25;

BB0_6:
	mov.u32 	%r79, %r87;

BB0_25:
	mul.lo.s32 	%r74, %r3, %r24;
	cvt.u64.u32	%rd38, %r74;
	cvta.to.global.u64 	%rd39, %rd2;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r2, 8;
	add.s64 	%rd42, %rd40, %rd41;
	div.u32 	%r75, %r87, %r79;
	st.global.u32 	[%rd42], %r75;
	st.global.f32 	[%rd42+4], %f78;
	setp.gt.f32	%p24, %f78, 0f00000000;
	@%p24 bra 	BB0_27;

	mov.u64 	%rd43, $str2;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str1;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r76, 192;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r76;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB0_27:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .u32 fractalRenderMainDouble_param_2,
	.param .u32 fractalRenderMainDouble_param_3,
	.param .f64 fractalRenderMainDouble_param_4,
	.param .f64 fractalRenderMainDouble_param_5,
	.param .f64 fractalRenderMainDouble_param_6,
	.param .f64 fractalRenderMainDouble_param_7,
	.param .u32 fractalRenderMainDouble_param_8,
	.param .u32 fractalRenderMainDouble_param_9,
	.param .u8 fractalRenderMainDouble_param_10,
	.param .u8 fractalRenderMainDouble_param_11,
	.param .u64 fractalRenderMainDouble_param_12,
	.param .u32 fractalRenderMainDouble_param_13,
	.param .u32 fractalRenderMainDouble_param_14,
	.param .u32 fractalRenderMainDouble_param_15
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<25>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<89>;
	.reg .f64 	%fd<74>;
	.reg .b64 	%rd<50>;


	mov.u64 	%rd49, __local_depot1;
	cvta.local.u64 	%SP, %rd49;
	ld.param.u64 	%rd2, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r24, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_2];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_3];
	ld.param.f64 	%fd23, [fractalRenderMainDouble_param_4];
	ld.param.f64 	%fd24, [fractalRenderMainDouble_param_5];
	ld.param.f64 	%fd25, [fractalRenderMainDouble_param_6];
	ld.param.f64 	%fd26, [fractalRenderMainDouble_param_7];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_8];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_9];
	ld.param.s8 	%rs1, [fractalRenderMainDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r29, 107;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r29;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_2:
	mov.u32 	%r30, %tid.x;
	mov.u32 	%r31, %tid.y;
	mad.lo.s32 	%r32, %r1, %r31, %r30;
	shl.b32 	%r33, %r1, 2;
	and.b32  	%r34, %r32, 15;
	rem.u32 	%r35, %r32, %r33;
	sub.s32 	%r36, %r35, %r34;
	shr.u32 	%r37, %r36, 2;
	and.b32  	%r38, %r32, 3;
	add.s32 	%r39, %r37, %r38;
	div.u32 	%r40, %r32, %r33;
	shl.b32 	%r41, %r40, 2;
	bfe.u32 	%r42, %r32, 2, 2;
	add.s32 	%r43, %r41, %r42;
	mov.u32 	%r44, %ctaid.x;
	mad.lo.s32 	%r2, %r44, %r1, %r39;
	mov.u32 	%r45, %ctaid.y;
	mov.u32 	%r46, %ntid.y;
	mad.lo.s32 	%r3, %r45, %r46, %r43;
	setp.ge.u32	%p2, %r3, %r26;
	setp.ge.u32	%p3, %r2, %r25;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB1_26;

	setp.lt.u32	%p5, %r28, 257;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd9, $str3;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str1;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r47, 137;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB1_5:
	setp.eq.s32	%p6, %r28, 0;
	mov.u32 	%r87, 0;
	mov.u32 	%r79, %r87;
	@%p6 bra 	BB1_24;

	cvt.rn.f64.u32	%fd1, %r2;
	cvt.rn.f64.u32	%fd2, %r3;
	cvt.rn.f64.u32	%fd27, %r25;
	sub.f64 	%fd28, %fd25, %fd23;
	div.rn.f64 	%fd3, %fd28, %fd27;
	cvt.rn.f64.u32	%fd29, %r26;
	sub.f64 	%fd30, %fd26, %fd24;
	div.rn.f64 	%fd4, %fd30, %fd29;
	mov.u32 	%r51, 0;
	and.b16  	%rs2, %rs1, 255;
	mov.u32 	%r77, %r51;
	mov.u32 	%r87, %r51;
	mov.u32 	%r79, %r28;

BB1_7:
	cvt.rn.f64.u32	%fd33, %r79;
	cvt.rn.f64.u32	%fd34, %r77;
	div.rn.f64 	%fd35, %fd34, %fd33;
	add.f64 	%fd36, %fd1, %fd35;
	add.f64 	%fd37, %fd2, %fd35;
	neg.f64 	%fd38, %fd37;
	fma.rn.f64 	%fd5, %fd3, %fd36, %fd23;
	fma.rn.f64 	%fd6, %fd4, %fd38, %fd26;
	setp.eq.s32	%p7, %r27, 0;
	mov.f64 	%fd67, 0d0000000000000000;
	mov.u32 	%r81, %r51;
	mov.f64 	%fd68, %fd67;
	@%p7 bra 	BB1_10;

BB1_8:
	mul.f64 	%fd9, %fd67, %fd67;
	mul.f64 	%fd10, %fd68, %fd68;
	add.f64 	%fd39, %fd10, %fd9;
	setp.geu.f64	%p8, %fd39, 0d4010000000000000;
	@%p8 bra 	BB1_10;

	sub.f64 	%fd40, %fd10, %fd9;
	add.f64 	%fd11, %fd5, %fd40;
	add.f64 	%fd41, %fd68, %fd68;
	fma.rn.f64 	%fd67, %fd41, %fd67, %fd6;
	add.s32 	%r81, %r81, 1;
	setp.lt.u32	%p9, %r81, %r27;
	mov.f64 	%fd68, %fd11;
	@%p9 bra 	BB1_8;

BB1_10:
	add.s32 	%r87, %r81, %r87;
	setp.gt.u32	%p10, %r77, 9;
	@%p10 bra 	BB1_12;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r77, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r81;

BB1_12:
	setp.eq.s16	%p11, %rs2, 0;
	and.b32  	%r54, %r77, -9;
	setp.ne.s32	%p12, %r54, 2;
	add.s32 	%r11, %r77, 1;
	or.pred  	%p13, %p12, %p11;
	@%p13 bra 	BB1_23;

	div.u32 	%r55, %r87, %r11;
	cvt.rn.f64.u32	%fd13, %r55;
	setp.eq.s32	%p14, %r77, 0;
	mov.f64 	%fd73, 0d0000000000000000;
	@%p14 bra 	BB1_22;

	and.b32  	%r12, %r77, 3;
	setp.eq.s32	%p15, %r12, 0;
	mov.f64 	%fd73, 0d0000000000000000;
	mov.u32 	%r85, 0;
	@%p15 bra 	BB1_20;

	setp.eq.s32	%p16, %r12, 1;
	mov.f64 	%fd70, 0d0000000000000000;
	mov.u32 	%r83, 0;
	@%p16 bra 	BB1_19;

	setp.eq.s32	%p17, %r12, 2;
	mov.f64 	%fd69, 0d0000000000000000;
	mov.u32 	%r82, 0;
	@%p17 bra 	BB1_18;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r60, [%rd20];
	cvt.rn.f64.u32	%fd46, %r60;
	sub.f64 	%fd47, %fd46, %fd13;
	fma.rn.f64 	%fd69, %fd47, %fd47, 0d0000000000000000;
	mov.u32 	%r82, 1;

BB1_18:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r61, [%rd24];
	cvt.rn.f64.u32	%fd48, %r61;
	sub.f64 	%fd49, %fd48, %fd13;
	fma.rn.f64 	%fd70, %fd49, %fd49, %fd69;
	add.s32 	%r83, %r82, 1;

BB1_19:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r83, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r62, [%rd28];
	cvt.rn.f64.u32	%fd50, %r62;
	sub.f64 	%fd51, %fd50, %fd13;
	fma.rn.f64 	%fd73, %fd51, %fd51, %fd70;
	add.s32 	%r85, %r83, 1;

BB1_20:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p18, %r77, 4;
	@%p18 bra 	BB1_22;

BB1_21:
	mul.wide.u32 	%rd30, %r85, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r63, [%rd31];
	cvt.rn.f64.u32	%fd52, %r63;
	sub.f64 	%fd53, %fd52, %fd13;
	fma.rn.f64 	%fd54, %fd53, %fd53, %fd73;
	add.s32 	%r64, %r85, 1;
	mul.wide.u32 	%rd32, %r64, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r65, [%rd33];
	cvt.rn.f64.u32	%fd55, %r65;
	sub.f64 	%fd56, %fd55, %fd13;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd54;
	add.s32 	%r66, %r85, 2;
	mul.wide.u32 	%rd34, %r66, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r67, [%rd35];
	cvt.rn.f64.u32	%fd58, %r67;
	sub.f64 	%fd59, %fd58, %fd13;
	fma.rn.f64 	%fd60, %fd59, %fd59, %fd57;
	add.s32 	%r68, %r85, 3;
	mul.wide.u32 	%rd36, %r68, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r69, [%rd37];
	cvt.rn.f64.u32	%fd61, %r69;
	sub.f64 	%fd62, %fd61, %fd13;
	fma.rn.f64 	%fd73, %fd62, %fd62, %fd60;
	add.s32 	%r85, %r85, 4;
	setp.lt.u32	%p19, %r85, %r77;
	@%p19 bra 	BB1_21;

BB1_22:
	add.s32 	%r72, %r77, -1;
	cvt.rn.f64.u32	%fd63, %r72;
	div.rn.f64 	%fd64, %fd73, %fd63;
	div.rn.f64 	%fd65, %fd64, %fd13;
	setp.eq.s32	%p20, %r77, 2;
	selp.f64	%fd66, 0d3F847AE140000000, 0d3FB99999A0000000, %p20;
	mov.u32 	%r71, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r71, 0; vote.ballot.b32 %r70, p; } 
	// inline asm
	setp.le.f64	%p21, %fd65, %fd66;
	vote.sync.all.pred 	%p22, %p21, %r70;
	selp.b32	%r79, %r11, %r79, %p22;

BB1_23:
	setp.lt.u32	%p23, %r11, %r79;
	mov.u32 	%r77, %r11;
	@%p23 bra 	BB1_7;

BB1_24:
	mul.lo.s32 	%r74, %r3, %r24;
	cvt.u64.u32	%rd38, %r74;
	cvta.to.global.u64 	%rd39, %rd2;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r2, 8;
	add.s64 	%rd42, %rd40, %rd41;
	div.u32 	%r75, %r87, %r79;
	st.global.u32 	[%rd42], %r75;
	cvt.rn.f32.u32	%f1, %r79;
	st.global.f32 	[%rd42+4], %f1;
	setp.gt.f32	%p24, %f1, 0f00000000;
	@%p24 bra 	BB1_26;

	mov.u64 	%rd43, $str2;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str1;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r76, 192;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r76;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB1_26:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9,
	.param .u32 compose_param_10,
	.param .u32 compose_param_11,
	.param .u32 compose_param_12
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd4, [compose_param_0];
	ld.param.u32 	%r5, [compose_param_1];
	ld.param.u64 	%rd5, [compose_param_2];
	ld.param.u32 	%r6, [compose_param_3];
	ld.param.u64 	%rd6, [compose_param_4];
	ld.param.u32 	%r11, [compose_param_5];
	ld.param.u32 	%r12, [compose_param_6];
	ld.param.u64 	%rd7, [compose_param_7];
	ld.param.u32 	%r7, [compose_param_8];
	ld.param.u32 	%r8, [compose_param_10];
	ld.param.u32 	%r9, [compose_param_11];
	ld.param.u32 	%r10, [compose_param_12];
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r14, %r13, %r15;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r16, %r17, %r18;
	setp.ge.u32	%p3, %r2, %r12;
	setp.ge.u32	%p4, %r1, %r11;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB2_9;

	mov.u32 	%r19, 0;
	sad.s32 	%r20, %r1, %r9, %r19;
	shr.u32 	%r3, %r8, 1;
	setp.gt.u32	%p7, %r20, %r3;
	mov.pred 	%p9, -1;
	@%p7 bra 	BB2_3;

	sad.s32 	%r22, %r2, %r10, %r19;
	setp.gt.u32	%p9, %r22, %r3;

BB2_3:
	@%p9 bra 	BB2_5;
	bra.uni 	BB2_4;

BB2_5:
	cvta.to.global.u64 	%rd10, %rd5;
	mul.lo.s32 	%r24, %r2, %r6;
	cvt.u64.u32	%rd11, %r24;
	add.s64 	%rd20, %rd10, %rd11;
	bra.uni 	BB2_6;

BB2_4:
	cvta.to.global.u64 	%rd8, %rd4;
	mul.lo.s32 	%r23, %r2, %r5;
	cvt.u64.u32	%rd9, %r23;
	add.s64 	%rd20, %rd8, %rd9;

BB2_6:
	mul.wide.u32 	%rd12, %r1, 8;
	add.s64 	%rd13, %rd20, %rd12;
	ld.global.u32 	%r25, [%rd13];
	rem.u32 	%r26, %r25, %r7;
	sub.s32 	%r27, %r7, %r26;
	add.s32 	%r4, %r27, -1;
	setp.lt.u32	%p8, %r4, %r7;
	@%p8 bra 	BB2_8;

	mov.u64 	%rd14, $str9;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str1;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r28, 253;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB2_8:
	shl.b32 	%r29, %r4, 2;
	suld.b.2d.b32.trap {%r31}, [%rd7, {%r29, %r19}];
	shl.b32 	%r32, %r1, 2;
	sust.b.2d.b32.trap 	[%rd6, {%r32, %r2}], {%r31};

BB2_9:
	ret;
}

	// .globl	blur
.visible .entry blur(

)
{



	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<76>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd4, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r28, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r29, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r30, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f10, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r31, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r32, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r33, %ntid.x;
	mov.u32 	%r34, %ctaid.x;
	mov.u32 	%r35, %tid.x;
	mad.lo.s32 	%r36, %r34, %r33, %r35;
	mul.lo.s32 	%r1, %r36, %r32;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ntid.y;
	mov.u32 	%r39, %tid.y;
	mad.lo.s32 	%r40, %r37, %r38, %r39;
	mul.lo.s32 	%r2, %r40, %r32;
	sub.s32 	%r41, %r30, %r32;
	setp.ge.u32	%p1, %r2, %r41;
	sub.s32 	%r42, %r29, %r32;
	setp.ge.u32	%p2, %r1, %r42;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB4_17;

	sub.f32 	%f16, %f12, %f10;
	cvt.rn.f32.u32	%f17, %r29;
	div.rn.f32 	%f18, %f16, %f17;
	cvt.rn.f32.u32	%f19, %r30;
	sub.f32 	%f20, %f13, %f11;
	div.rn.f32 	%f21, %f20, %f19;
	cvt.rn.f32.u32	%f22, %r1;
	fma.rn.f32 	%f1, %f22, %f18, %f10;
	cvt.rn.f32.u32	%f23, %r2;
	mul.f32 	%f24, %f23, %f21;
	sub.f32 	%f2, %f13, %f24;
	setp.eq.s32	%p4, %r31, 0;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r66, 0;
	@%p4 bra 	BB4_5;

	mov.f32 	%f30, %f29;

BB4_3:
	mul.f32 	%f5, %f30, %f30;
	mul.f32 	%f6, %f29, %f29;
	add.f32 	%f25, %f5, %f6;
	setp.geu.f32	%p5, %f25, 0f40800000;
	@%p5 bra 	BB4_5;

	sub.f32 	%f26, %f6, %f5;
	add.f32 	%f7, %f1, %f26;
	add.f32 	%f27, %f29, %f29;
	fma.rn.f32 	%f30, %f30, %f27, %f2;
	add.s32 	%r66, %r66, 1;
	setp.lt.u32	%p6, %r66, %r31;
	mov.f32 	%f29, %f7;
	@%p6 bra 	BB4_3;

BB4_5:
	setp.eq.s32	%p7, %r32, 0;
	@%p7 bra 	BB4_17;

	cvta.to.global.u64 	%rd1, %rd4;
	cvt.rn.f32.u32	%f28, %r32;
	rcp.rn.f32 	%f9, %f28;
	mul.lo.s32 	%r46, %r2, %r28;
	cvt.u64.u32	%rd5, %r46;
	add.s64 	%rd2, %rd1, %rd5;
	shl.b32 	%r6, %r28, 2;
	mov.u32 	%r45, 0;
	mov.u32 	%r67, %r45;

BB4_7:
	add.s32 	%r51, %r67, %r1;
	cvt.u64.u32	%rd3, %r51;
	and.b32  	%r50, %r32, 3;
	setp.eq.s32	%p8, %r50, 0;
	mov.u32 	%r75, %r45;
	@%p8 bra 	BB4_13;

	setp.eq.s32	%p9, %r50, 1;
	mov.u32 	%r69, %r45;
	@%p9 bra 	BB4_12;

	setp.eq.s32	%p10, %r50, 2;
	mov.u32 	%r68, %r45;
	@%p10 bra 	BB4_11;

	shl.b64 	%rd6, %rd3, 3;
	add.s64 	%rd7, %rd2, %rd6;
	st.global.u32 	[%rd7], %r66;
	st.global.f32 	[%rd7+4], %f9;
	mov.u32 	%r68, 1;

BB4_11:
	add.s32 	%r53, %r68, %r2;
	mul.lo.s32 	%r54, %r53, %r28;
	cvt.u64.u32	%rd8, %r54;
	add.s64 	%rd9, %rd1, %rd8;
	shl.b64 	%rd10, %rd3, 3;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.u32 	[%rd11], %r66;
	st.global.f32 	[%rd11+4], %f9;
	add.s32 	%r69, %r68, 1;

BB4_12:
	add.s32 	%r55, %r69, %r2;
	mul.lo.s32 	%r56, %r55, %r28;
	cvt.u64.u32	%rd12, %r56;
	add.s64 	%rd13, %rd1, %rd12;
	shl.b64 	%rd14, %rd3, 3;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.u32 	[%rd15], %r66;
	st.global.f32 	[%rd15+4], %f9;
	add.s32 	%r75, %r69, 1;

BB4_13:
	setp.lt.u32	%p11, %r32, 4;
	@%p11 bra 	BB4_16;

	mad.lo.s32 	%r61, %r32, %r40, %r75;
	add.s32 	%r62, %r61, 3;
	mul.lo.s32 	%r74, %r28, %r62;
	add.s32 	%r63, %r61, 2;
	mul.lo.s32 	%r73, %r28, %r63;
	add.s32 	%r64, %r61, 1;
	mul.lo.s32 	%r72, %r28, %r64;
	mul.lo.s32 	%r71, %r28, %r61;

BB4_15:
	cvt.u64.u32	%rd16, %r71;
	add.s64 	%rd17, %rd1, %rd16;
	shl.b64 	%rd18, %rd3, 3;
	add.s64 	%rd19, %rd17, %rd18;
	st.global.u32 	[%rd19], %r66;
	st.global.f32 	[%rd19+4], %f9;
	cvt.u64.u32	%rd20, %r72;
	add.s64 	%rd21, %rd1, %rd20;
	add.s64 	%rd22, %rd21, %rd18;
	st.global.u32 	[%rd22], %r66;
	st.global.f32 	[%rd22+4], %f9;
	cvt.u64.u32	%rd23, %r73;
	add.s64 	%rd24, %rd1, %rd23;
	add.s64 	%rd25, %rd24, %rd18;
	st.global.u32 	[%rd25], %r66;
	st.global.f32 	[%rd25+4], %f9;
	cvt.u64.u32	%rd26, %r74;
	add.s64 	%rd27, %rd1, %rd26;
	add.s64 	%rd28, %rd27, %rd18;
	st.global.u32 	[%rd28], %r66;
	st.global.f32 	[%rd28+4], %f9;
	add.s32 	%r74, %r74, %r6;
	add.s32 	%r73, %r73, %r6;
	add.s32 	%r72, %r72, %r6;
	add.s32 	%r71, %r71, %r6;
	add.s32 	%r75, %r75, 4;
	setp.lt.u32	%p12, %r75, %r32;
	@%p12 bra 	BB4_15;

BB4_16:
	add.s32 	%r67, %r67, 1;
	setp.lt.u32	%p13, %r67, %r32;
	@%p13 bra 	BB4_7;

BB4_17:
	ret;
}

	// .globl	debug
.visible .entry debug(
	.param .align 4 .b8 debug_param_0[24],
	.param .u32 debug_param_1
)
{



	ret;
}

	// .globl	init
.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderReuseSamples
.visible .entry fractalRenderReuseSamples(
	.param .u64 fractalRenderReuseSamples_param_0,
	.param .u32 fractalRenderReuseSamples_param_1,
	.param .u32 fractalRenderReuseSamples_param_2,
	.param .u32 fractalRenderReuseSamples_param_3,
	.param .f32 fractalRenderReuseSamples_param_4,
	.param .f32 fractalRenderReuseSamples_param_5,
	.param .f32 fractalRenderReuseSamples_param_6,
	.param .f32 fractalRenderReuseSamples_param_7,
	.param .u32 fractalRenderReuseSamples_param_8,
	.param .u32 fractalRenderReuseSamples_param_9,
	.param .u8 fractalRenderReuseSamples_param_10,
	.param .u8 fractalRenderReuseSamples_param_11,
	.param .u64 fractalRenderReuseSamples_param_12,
	.param .u32 fractalRenderReuseSamples_param_13,
	.param .u32 fractalRenderReuseSamples_param_14,
	.param .u32 fractalRenderReuseSamples_param_15,
	.param .f32 fractalRenderReuseSamples_param_16,
	.param .f32 fractalRenderReuseSamples_param_17,
	.param .f32 fractalRenderReuseSamples_param_18,
	.param .f32 fractalRenderReuseSamples_param_19,
	.param .u64 fractalRenderReuseSamples_param_20,
	.param .u32 fractalRenderReuseSamples_param_21,
	.param .u8 fractalRenderReuseSamples_param_22,
	.param .u8 fractalRenderReuseSamples_param_23
)
{
	.local .align 8 .b8 	__local_depot7[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<54>;
	.reg .b16 	%rs<9>;
	.reg .f32 	%f<165>;
	.reg .b32 	%r<130>;
	.reg .b64 	%rd<71>;


	mov.u64 	%rd70, __local_depot7;
	cvta.local.u64 	%SP, %rd70;
	ld.param.u64 	%rd2, [fractalRenderReuseSamples_param_0];
	ld.param.u32 	%r37, [fractalRenderReuseSamples_param_1];
	ld.param.s8 	%rs3, [fractalRenderReuseSamples_param_11];
	ld.param.s8 	%rs2, [fractalRenderReuseSamples_param_10];
	ld.param.u32 	%r38, [fractalRenderReuseSamples_param_2];
	ld.param.u32 	%r39, [fractalRenderReuseSamples_param_3];
	ld.param.f32 	%f46, [fractalRenderReuseSamples_param_4];
	ld.param.f32 	%f47, [fractalRenderReuseSamples_param_5];
	ld.param.f32 	%f48, [fractalRenderReuseSamples_param_6];
	ld.param.f32 	%f49, [fractalRenderReuseSamples_param_7];
	ld.param.u32 	%r40, [fractalRenderReuseSamples_param_8];
	ld.param.u32 	%r41, [fractalRenderReuseSamples_param_9];
	ld.param.u32 	%r42, [fractalRenderReuseSamples_param_14];
	ld.param.u32 	%r43, [fractalRenderReuseSamples_param_15];
	ld.param.f32 	%f50, [fractalRenderReuseSamples_param_16];
	ld.param.f32 	%f51, [fractalRenderReuseSamples_param_17];
	ld.param.f32 	%f52, [fractalRenderReuseSamples_param_18];
	ld.param.f32 	%f53, [fractalRenderReuseSamples_param_19];
	ld.param.u64 	%rd3, [fractalRenderReuseSamples_param_20];
	ld.param.u32 	%r44, [fractalRenderReuseSamples_param_21];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB7_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r45, 107;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r45;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB7_2:
	mov.u32 	%r46, %tid.x;
	mov.u32 	%r47, %tid.y;
	mad.lo.s32 	%r48, %r1, %r47, %r46;
	shl.b32 	%r49, %r1, 2;
	and.b32  	%r50, %r48, 15;
	rem.u32 	%r51, %r48, %r49;
	sub.s32 	%r52, %r51, %r50;
	shr.u32 	%r53, %r52, 2;
	and.b32  	%r54, %r48, 3;
	add.s32 	%r55, %r53, %r54;
	div.u32 	%r56, %r48, %r49;
	shl.b32 	%r57, %r56, 2;
	bfe.u32 	%r58, %r48, 2, 2;
	add.s32 	%r59, %r57, %r58;
	mov.u32 	%r60, %ctaid.x;
	mad.lo.s32 	%r2, %r60, %r1, %r55;
	mov.u32 	%r61, %ctaid.y;
	mov.u32 	%r62, %ntid.y;
	mad.lo.s32 	%r3, %r61, %r62, %r59;
	setp.lt.u32	%p2, %r2, %r38;
	setp.lt.u32	%p3, %r3, %r39;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB7_49;
	bra.uni 	BB7_3;

BB7_3:
	or.b32  	%r63, %r2, %r3;
	setp.ne.s32	%p5, %r63, 0;
	@%p5 bra 	BB7_5;

	mov.u64 	%rd10, $str10;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, 0;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r64, [retval0+0];
	
	//{
	}// Callseq End 8

BB7_5:
	cvt.rn.f32.u32	%f1, %r2;
	sub.f32 	%f54, %f52, %f50;
	sub.f32 	%f2, %f48, %f46;
	div.rn.f32 	%f55, %f2, %f54;
	sub.f32 	%f56, %f53, %f51;
	sub.f32 	%f3, %f49, %f47;
	div.rn.f32 	%f57, %f3, %f56;
	sub.f32 	%f58, %f46, %f50;
	div.rn.f32 	%f59, %f58, %f2;
	sub.f32 	%f60, %f53, %f49;
	div.rn.f32 	%f61, %f60, %f3;
	cvt.rn.f32.u32	%f4, %r38;
	mul.f32 	%f62, %f4, %f59;
	cvt.rn.f32.u32	%f5, %r39;
	mul.f32 	%f63, %f5, %f61;
	cvt.rn.f32.u32	%f6, %r3;
	fma.rn.f32 	%f7, %f1, %f55, %f62;
	fma.rn.f32 	%f8, %f6, %f57, %f63;
	abs.f32 	%f64, %f7;
	mov.b32 	 %r65, %f7;
	and.b32  	%r66, %r65, -2147483648;
	or.b32  	%r67, %r66, 1056964608;
	mov.b32 	 %f65, %r67;
	add.f32 	%f66, %f7, %f65;
	cvt.rzi.f32.f32	%f67, %f66;
	setp.gt.f32	%p6, %f64, 0f4B000000;
	selp.f32	%f153, %f7, %f67, %p6;
	setp.geu.f32	%p7, %f64, 0f3F000000;
	@%p7 bra 	BB7_7;

	cvt.rzi.f32.f32	%f153, %f7;

BB7_7:
	cvt.rzi.s32.f32	%r4, %f153;
	mov.b32 	 %r68, %f8;
	and.b32  	%r69, %r68, -2147483648;
	or.b32  	%r70, %r69, 1056964608;
	mov.b32 	 %f68, %r70;
	add.f32 	%f69, %f8, %f68;
	cvt.rzi.f32.f32	%f70, %f69;
	abs.f32 	%f71, %f8;
	setp.gt.f32	%p8, %f71, 0f4B000000;
	selp.f32	%f154, %f8, %f70, %p8;
	setp.geu.f32	%p9, %f71, 0f3F000000;
	@%p9 bra 	BB7_9;

	cvt.rzi.f32.f32	%f154, %f8;

BB7_9:
	setp.lt.u32	%p10, %r4, %r38;
	setp.gt.s32	%p11, %r4, -1;
	and.pred  	%p12, %p10, %p11;
	cvt.rzi.s32.f32	%r5, %f154;
	setp.gt.s32	%p13, %r5, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r5, %r39;
	and.pred  	%p16, %p15, %p14;
	mov.u32 	%r114, 404;
	mov.u16 	%rs8, 0;
	@!%p16 bra 	BB7_11;
	bra.uni 	BB7_10;

BB7_10:
	cvta.to.global.u64 	%rd13, %rd3;
	mul.lo.s32 	%r72, %r5, %r44;
	cvt.u64.u32	%rd14, %r72;
	add.s64 	%rd15, %rd13, %rd14;
	mul.wide.u32 	%rd16, %r4, 8;
	add.s64 	%rd17, %rd15, %rd16;
	ld.global.u32 	%r114, [%rd17];
	ld.global.f32 	%f164, [%rd17+4];
	mov.u16 	%rs8, 1;

BB7_11:
	and.b32  	%r73, %r2, -8;
	cvt.rn.f32.u32	%f73, %r73;
	and.b32  	%r74, %r3, -4;
	cvt.rn.f32.u32	%f74, %r74;
	cvt.rn.f32.u32	%f75, %r42;
	sub.f32 	%f76, %f75, %f73;
	cvt.rn.f32.u32	%f77, %r43;
	sub.f32 	%f78, %f77, %f74;
	mul.f32 	%f79, %f78, %f78;
	fma.rn.f32 	%f80, %f76, %f76, %f79;
	sqrt.rn.f32 	%f81, %f80;
	mul.f32 	%f82, %f81, 0f3CD94079;
	ld.global.f32 	%f83, [screenDistance];
	div.rn.f32 	%f17, %f82, %f83;
	abs.f32 	%f18, %f17;
	setp.leu.f32	%p17, %f18, 0f3F800000;
	mov.f32 	%f156, %f18;
	@%p17 bra 	BB7_13;

	rcp.rn.f32 	%f156, %f18;

BB7_13:
	mul.rn.f32 	%f84, %f156, %f156;
	mov.f32 	%f85, 0fC0B59883;
	mov.f32 	%f86, 0fBF52C7EA;
	fma.rn.f32 	%f87, %f84, %f86, %f85;
	mov.f32 	%f88, 0fC0D21907;
	fma.rn.f32 	%f89, %f87, %f84, %f88;
	mul.f32 	%f90, %f84, %f89;
	mul.f32 	%f91, %f156, %f90;
	add.f32 	%f92, %f84, 0f41355DC0;
	mov.f32 	%f93, 0f41E6BD60;
	fma.rn.f32 	%f94, %f92, %f84, %f93;
	mov.f32 	%f95, 0f419D92C8;
	fma.rn.f32 	%f96, %f94, %f84, %f95;
	rcp.rn.f32 	%f97, %f96;
	fma.rn.f32 	%f98, %f91, %f97, %f156;
	mov.f32 	%f99, 0f3FC90FDB;
	sub.f32 	%f100, %f99, %f98;
	setp.gt.f32	%p18, %f18, 0f3F800000;
	selp.f32	%f101, %f100, %f98, %p18;
	mov.b32 	 %r75, %f101;
	mov.b32 	 %r76, %f17;
	and.b32  	%r77, %r76, -2147483648;
	or.b32  	%r78, %r75, %r77;
	mov.b32 	 %f102, %r78;
	setp.gtu.f32	%p19, %f18, 0f7F800000;
	selp.f32	%f103, %f101, %f102, %p19;
	mul.f32 	%f104, %f103, 0f43340000;
	div.rn.f32 	%f21, %f104, 0f40490FDB;
	setp.ge.f32	%p20, %f21, 0f00000000;
	@%p20 bra 	BB7_15;

	mov.u64 	%rd18, $str13;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, $str1;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r79, 360;
	mov.u64 	%rd22, 0;
	mov.u64 	%rd23, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd19;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd21;
	.param .b32 param2;
	st.param.b32	[param2+0], %r79;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd22;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd23;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB7_15:
	fma.rn.f32 	%f105, %f21, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p21, %f21, 0f40B00000;
	selp.f32	%f106, %f105, 0f3F800000, %p21;
	cvt.rn.f32.u32	%f22, %r41;
	mul.f32 	%f107, %f22, %f106;
	cvt.rzi.u32.f32	%r115, %f107;
	setp.gtu.f32	%p22, %f21, 0f42700000;
	@%p22 bra 	BB7_17;

	mov.u32 	%r80, 1;
	max.u32 	%r115, %r80, %r115;

BB7_17:
	setp.eq.f32	%p23, %f164, 0f00000000;
	setp.eq.s16	%p24, %rs8, 0;
	or.pred  	%p25, %p24, %p23;
	setp.eq.s32	%p26, %r115, 0;
	and.pred  	%p27, %p25, %p26;
	selp.b32	%r11, 1, %r115, %p27;
	div.rn.f32 	%f23, %f2, %f4;
	div.rn.f32 	%f24, %f3, %f5;
	setp.lt.u32	%p28, %r11, 257;
	@%p28 bra 	BB7_19;

	mov.u64 	%rd24, $str3;
	cvta.global.u64 	%rd25, %rd24;
	mov.u64 	%rd26, $str1;
	cvta.global.u64 	%rd27, %rd26;
	mov.u32 	%r81, 137;
	mov.u64 	%rd28, 0;
	mov.u64 	%rd29, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd25;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd27;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd28;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd29;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB7_19:
	setp.eq.s32	%p29, %r11, 0;
	mov.u32 	%r126, 0;
	mov.u32 	%r118, %r126;
	@%p29 bra 	BB7_38;

	mov.u32 	%r85, 0;
	and.b16  	%rs6, %rs2, 255;
	mov.u32 	%r116, %r85;
	mov.u32 	%r126, %r85;
	mov.u32 	%r118, %r11;

BB7_21:
	cvt.rn.f32.u32	%f110, %r118;
	cvt.rn.f32.u32	%f111, %r116;
	div.rn.f32 	%f112, %f111, %f110;
	add.f32 	%f113, %f1, %f112;
	add.f32 	%f114, %f6, %f112;
	neg.f32 	%f115, %f114;
	fma.rn.f32 	%f25, %f23, %f113, %f46;
	fma.rn.f32 	%f26, %f24, %f115, %f49;
	setp.eq.s32	%p30, %r40, 0;
	mov.f32 	%f157, 0f00000000;
	mov.u32 	%r120, %r85;
	mov.f32 	%f158, %f157;
	@%p30 bra 	BB7_24;

BB7_22:
	mul.f32 	%f29, %f157, %f157;
	mul.f32 	%f30, %f158, %f158;
	add.f32 	%f116, %f30, %f29;
	setp.geu.f32	%p31, %f116, 0f40800000;
	@%p31 bra 	BB7_24;

	sub.f32 	%f117, %f30, %f29;
	add.f32 	%f31, %f25, %f117;
	add.f32 	%f118, %f158, %f158;
	fma.rn.f32 	%f157, %f118, %f157, %f26;
	add.s32 	%r120, %r120, 1;
	setp.lt.u32	%p32, %r120, %r40;
	mov.f32 	%f158, %f31;
	@%p32 bra 	BB7_22;

BB7_24:
	add.s32 	%r126, %r120, %r126;
	setp.gt.u32	%p33, %r116, 9;
	@%p33 bra 	BB7_26;

	add.u64 	%rd30, %SP, 0;
	cvta.to.local.u64 	%rd31, %rd30;
	mul.wide.u32 	%rd32, %r116, 4;
	add.s64 	%rd33, %rd31, %rd32;
	st.local.u32 	[%rd33], %r120;

BB7_26:
	setp.eq.s16	%p34, %rs6, 0;
	and.b32  	%r88, %r116, -9;
	setp.ne.s32	%p35, %r88, 2;
	add.s32 	%r19, %r116, 1;
	or.pred  	%p36, %p35, %p34;
	@%p36 bra 	BB7_37;

	div.u32 	%r89, %r126, %r19;
	cvt.rn.f32.u32	%f33, %r89;
	setp.eq.s32	%p37, %r116, 0;
	mov.f32 	%f163, 0f00000000;
	@%p37 bra 	BB7_36;

	and.b32  	%r20, %r116, 3;
	setp.eq.s32	%p38, %r20, 0;
	mov.f32 	%f163, 0f00000000;
	mov.u32 	%r124, 0;
	@%p38 bra 	BB7_34;

	setp.eq.s32	%p39, %r20, 1;
	mov.f32 	%f160, 0f00000000;
	mov.u32 	%r122, 0;
	@%p39 bra 	BB7_33;

	setp.eq.s32	%p40, %r20, 2;
	mov.f32 	%f159, 0f00000000;
	mov.u32 	%r121, 0;
	@%p40 bra 	BB7_32;

	add.u64 	%rd34, %SP, 0;
	cvta.to.local.u64 	%rd35, %rd34;
	ld.local.u32 	%r94, [%rd35];
	cvt.rn.f32.u32	%f123, %r94;
	sub.f32 	%f124, %f123, %f33;
	fma.rn.f32 	%f159, %f124, %f124, 0f00000000;
	mov.u32 	%r121, 1;

BB7_32:
	add.u64 	%rd36, %SP, 0;
	cvta.to.local.u64 	%rd37, %rd36;
	mul.wide.u32 	%rd38, %r121, 4;
	add.s64 	%rd39, %rd37, %rd38;
	ld.local.u32 	%r95, [%rd39];
	cvt.rn.f32.u32	%f125, %r95;
	sub.f32 	%f126, %f125, %f33;
	fma.rn.f32 	%f160, %f126, %f126, %f159;
	add.s32 	%r122, %r121, 1;

BB7_33:
	add.u64 	%rd40, %SP, 0;
	cvta.to.local.u64 	%rd41, %rd40;
	mul.wide.u32 	%rd42, %r122, 4;
	add.s64 	%rd43, %rd41, %rd42;
	ld.local.u32 	%r96, [%rd43];
	cvt.rn.f32.u32	%f127, %r96;
	sub.f32 	%f128, %f127, %f33;
	fma.rn.f32 	%f163, %f128, %f128, %f160;
	add.s32 	%r124, %r122, 1;

BB7_34:
	add.u64 	%rd44, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd44;
	setp.lt.u32	%p41, %r116, 4;
	@%p41 bra 	BB7_36;

BB7_35:
	mul.wide.u32 	%rd45, %r124, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.local.u32 	%r97, [%rd46];
	cvt.rn.f32.u32	%f129, %r97;
	sub.f32 	%f130, %f129, %f33;
	fma.rn.f32 	%f131, %f130, %f130, %f163;
	add.s32 	%r98, %r124, 1;
	mul.wide.u32 	%rd47, %r98, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.local.u32 	%r99, [%rd48];
	cvt.rn.f32.u32	%f132, %r99;
	sub.f32 	%f133, %f132, %f33;
	fma.rn.f32 	%f134, %f133, %f133, %f131;
	add.s32 	%r100, %r124, 2;
	mul.wide.u32 	%rd49, %r100, 4;
	add.s64 	%rd50, %rd1, %rd49;
	ld.local.u32 	%r101, [%rd50];
	cvt.rn.f32.u32	%f135, %r101;
	sub.f32 	%f136, %f135, %f33;
	fma.rn.f32 	%f137, %f136, %f136, %f134;
	add.s32 	%r102, %r124, 3;
	mul.wide.u32 	%rd51, %r102, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.local.u32 	%r103, [%rd52];
	cvt.rn.f32.u32	%f138, %r103;
	sub.f32 	%f139, %f138, %f33;
	fma.rn.f32 	%f163, %f139, %f139, %f137;
	add.s32 	%r124, %r124, 4;
	setp.lt.u32	%p42, %r124, %r116;
	@%p42 bra 	BB7_35;

BB7_36:
	add.s32 	%r106, %r116, -1;
	cvt.rn.f32.u32	%f140, %r106;
	div.rn.f32 	%f141, %f163, %f140;
	div.rn.f32 	%f142, %f141, %f33;
	setp.eq.s32	%p43, %r116, 2;
	selp.f32	%f143, 0f3C23D70A, 0f3DCCCCCD, %p43;
	mov.u32 	%r105, 1;
	// inline asm
	{ .reg .pred p; setp.ne.u32 p, %r105, 0; vote.ballot.b32 %r104, p; } 
	// inline asm
	setp.le.f32	%p44, %f142, %f143;
	vote.sync.all.pred 	%p45, %p44, %r104;
	selp.b32	%r118, %r19, %r118, %p45;

BB7_37:
	setp.lt.u32	%p46, %r19, %r118;
	mov.u32 	%r116, %r19;
	@%p46 bra 	BB7_21;

BB7_38:
	div.u32 	%r128, %r126, %r118;
	setp.ne.s16	%p47, %rs8, 0;
	setp.ne.s32	%p48, %r118, 0;
	or.pred  	%p49, %p48, %p47;
	@%p49 bra 	BB7_40;

	mov.u64 	%rd53, $str14;
	cvta.global.u64 	%rd54, %rd53;
	mov.u64 	%rd55, $str1;
	cvta.global.u64 	%rd56, %rd55;
	mov.u32 	%r108, 414;
	mov.u64 	%rd57, 0;
	mov.u64 	%rd58, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd54;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd56;
	.param .b32 param2;
	st.param.b32	[param2+0], %r108;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd57;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd58;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB7_40:
	@%p24 bra 	BB7_44;

	setp.eq.s32	%p51, %r118, 0;
	@%p51 bra 	BB7_42;

	mul.f32 	%f144, %f164, 0f3F266666;
	cvt.rn.f32.u32	%f145, %r118;
	add.f32 	%f164, %f144, %f145;
	cvt.rn.f32.u32	%f146, %r114;
	mul.lo.s32 	%r109, %r128, %r118;
	cvt.rn.f32.u32	%f147, %r109;
	fma.rn.f32 	%f148, %f146, %f144, %f147;
	div.rn.f32 	%f149, %f148, %f164;
	cvt.rzi.u32.f32	%r128, %f149;
	bra.uni 	BB7_45;

BB7_44:
	cvt.rn.f32.u32	%f164, %r118;
	bra.uni 	BB7_45;

BB7_42:
	mov.u32 	%r128, %r114;

BB7_45:
	and.b16  	%rs7, %rs3, 255;
	setp.eq.s16	%p52, %rs7, 0;
	@%p52 bra 	BB7_47;

	cvt.u32.u16	%r110, %rs8;
	add.s32 	%r111, %r118, %r110;
	cvt.rn.f32.u32	%f150, %r111;
	div.rn.f32 	%f151, %f150, %f22;
	mul.f32 	%f152, %f151, 0f437F0000;
	cvt.rzi.u32.f32	%r128, %f152;

BB7_47:
	mul.lo.s32 	%r112, %r3, %r37;
	cvt.u64.u32	%rd59, %r112;
	cvta.to.global.u64 	%rd60, %rd2;
	add.s64 	%rd61, %rd60, %rd59;
	mul.wide.u32 	%rd62, %r2, 8;
	add.s64 	%rd63, %rd61, %rd62;
	st.global.u32 	[%rd63], %r128;
	st.global.f32 	[%rd63+4], %f164;
	setp.gt.f32	%p53, %f164, 0f00000000;
	@%p53 bra 	BB7_49;

	mov.u64 	%rd64, $str15;
	cvta.global.u64 	%rd65, %rd64;
	mov.u64 	%rd66, $str1;
	cvta.global.u64 	%rd67, %rd66;
	mov.u32 	%r113, 447;
	mov.u64 	%rd68, 0;
	mov.u64 	%rd69, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd65;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd67;
	.param .b32 param2;
	st.param.b32	[param2+0], %r113;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd68;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd69;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB7_49:
	ret;
}


