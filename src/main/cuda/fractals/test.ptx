//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 4 .u32 amplifier;
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 ZOOMING_IN_FLAG_MASK = 32;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 4 .f32 pixelRealWidthInCm = 0f3CD94079;
.global .align 16 .b8 $str[17] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 116, 101, 115, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[44] = {109, 0, 97, 0, 120, 0, 83, 0, 117, 0, 112, 0, 101, 0, 114, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 105, 0, 110, 0, 103, 0, 32, 0, 62, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str4[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[42] = {109, 0, 97, 0, 120, 0, 83, 0, 117, 0, 112, 0, 101, 0, 114, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 105, 0, 110, 0, 103, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[31] = {102, 111, 99, 117, 115, 58, 32, 115, 97, 109, 112, 108, 101, 115, 58, 37, 102, 44, 32, 114, 101, 117, 115, 105, 110, 103, 58, 37, 105, 10, 0};
.global .align 16 .b8 $str10[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str11[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str12[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str13[120] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .f32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<36>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<89>;
	.reg .b32 	%r<106>;
	.reg .b64 	%rd<57>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r24, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f31, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderMainFloat_param_3];
	ld.param.f32 	%f33, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 59;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r25;
	setp.lt.u32	%p3, %r5, %r26;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_33;
	bra.uni 	BB1_3;

BB1_3:
	setp.ge.f32	%p5, %f33, 0f3F800000;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd8, $str3;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 196;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.lt.f32	%p6, %f33, 0f3F800000;
	mov.f32 	%f86, 0f00000000;
	mov.f32 	%f88, %f86;
	@%p6 bra 	BB1_31;

	abs.f32 	%f36, %f33;
	mov.b32 	 %r47, %f33;
	and.b32  	%r48, %r47, -2147483648;
	or.b32  	%r49, %r48, 1056964608;
	mov.b32 	 %f37, %r49;
	add.f32 	%f38, %f37, %f33;
	cvt.rzi.f32.f32	%f39, %f38;
	setp.gt.f32	%p7, %f36, 0f4B000000;
	selp.f32	%f79, %f33, %f39, %p7;
	setp.geu.f32	%p8, %f36, 0f3F000000;
	@%p8 bra 	BB1_8;

	cvt.rzi.f32.f32	%f79, %f33;

BB1_8:
	cvt.rzi.u32.f32	%r50, %f79;
	mov.u32 	%r51, 64;
	min.u32 	%r103, %r51, %r50;
	setp.lt.u32	%p9, %r103, 65;
	@%p9 bra 	BB1_10;

	mov.u64 	%rd14, $str11;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str2;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r52, 113;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_10:
	setp.eq.s32	%p10, %r103, 0;
	cvt.rn.f32.u32	%f86, %r103;
	mov.u32 	%r104, 0;
	@%p10 bra 	BB1_11;

	cvt.rn.f32.u32	%f7, %r4;
	cvt.rn.f32.u32	%f8, %r5;
	ld.const.u32 	%r57, [amplifier];
	cvt.rn.f32.s32	%f9, %r57;
	cvt.rn.f32.u32	%f40, %r25;
	sub.f32 	%f41, %f31, %f1;
	div.rn.f32 	%f10, %f41, %f40;
	cvt.rn.f32.u32	%f42, %r26;
	sub.f32 	%f43, %f2, %f30;
	div.rn.f32 	%f11, %f43, %f42;
	mov.u32 	%r96, 0;
	and.b32  	%r59, %r27, 1;
	mov.u32 	%r104, %r96;

BB1_13:
	mov.u32 	%r9, %r103;
	mov.u32 	%r7, %r96;
	cvt.rn.f32.u32	%f44, %r7;
	div.rn.f32 	%f45, %f44, %f86;
	add.f32 	%f46, %f7, %f45;
	add.f32 	%f47, %f8, %f45;
	neg.f32 	%f48, %f47;
	fma.rn.f32 	%f49, %f10, %f46, %f1;
	fma.rn.f32 	%f50, %f11, %f48, %f2;
	abs.f32 	%f51, %f49;
	abs.f32 	%f52, %f50;
	add.f32 	%f53, %f51, %f52;
	mul.f32 	%f54, %f53, %f9;
	cvt.rzi.s32.f32	%r58, %f54;
	cvt.rn.f32.s32	%f55, %r58;
	cvt.rzi.u32.f32	%r10, %f55;
	add.s32 	%r104, %r10, %r104;
	setp.gt.u32	%p11, %r7, 9;
	@%p11 bra 	BB1_15;

	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r7, 4;
	add.s64 	%rd23, %rd21, %rd22;
	st.local.u32 	[%rd23], %r10;

BB1_15:
	setp.lt.u32	%p12, %r7, 10;
	setp.eq.b32	%p13, %r59, 1;
	setp.ne.s32	%p14, %r7, 0;
	and.pred  	%p15, %p12, %p14;
	and.pred  	%p16, %p15, %p13;
	shr.u32 	%r60, %r9, 1;
	setp.eq.s32	%p17, %r7, %r60;
	or.pred  	%p18, %p16, %p17;
	add.s32 	%r96, %r7, 1;
	mov.u32 	%r103, %r9;
	@!%p18 bra 	BB1_29;
	bra.uni 	BB1_16;

BB1_16:
	div.u32 	%r61, %r104, %r96;
	cvt.rn.f32.u32	%f13, %r61;
	setp.eq.s32	%p19, %r7, 0;
	mov.f32 	%f85, 0f00000000;
	@%p19 bra 	BB1_25;

	and.b32  	%r63, %r7, 3;
	setp.eq.s32	%p20, %r63, 0;
	mov.f32 	%f85, 0f00000000;
	mov.u32 	%r102, 0;
	@%p20 bra 	BB1_23;

	setp.eq.s32	%p21, %r63, 1;
	mov.f32 	%f82, 0f00000000;
	mov.u32 	%r100, 0;
	@%p21 bra 	BB1_22;

	setp.eq.s32	%p22, %r63, 2;
	mov.f32 	%f81, 0f00000000;
	mov.u32 	%r99, 0;
	@%p22 bra 	BB1_21;

	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	ld.local.u32 	%r69, [%rd25];
	cvt.rn.f32.u32	%f60, %r69;
	sub.f32 	%f61, %f60, %f13;
	fma.rn.f32 	%f81, %f61, %f61, 0f00000000;
	mov.u32 	%r99, 1;

BB1_21:
	add.u64 	%rd26, %SP, 0;
	cvta.to.local.u64 	%rd27, %rd26;
	mul.wide.u32 	%rd28, %r99, 4;
	add.s64 	%rd29, %rd27, %rd28;
	ld.local.u32 	%r70, [%rd29];
	cvt.rn.f32.u32	%f62, %r70;
	sub.f32 	%f63, %f62, %f13;
	fma.rn.f32 	%f82, %f63, %f63, %f81;
	add.s32 	%r100, %r99, 1;

BB1_22:
	add.u64 	%rd30, %SP, 0;
	cvta.to.local.u64 	%rd31, %rd30;
	mul.wide.u32 	%rd32, %r100, 4;
	add.s64 	%rd33, %rd31, %rd32;
	ld.local.u32 	%r71, [%rd33];
	cvt.rn.f32.u32	%f64, %r71;
	sub.f32 	%f65, %f64, %f13;
	fma.rn.f32 	%f85, %f65, %f65, %f82;
	add.s32 	%r102, %r100, 1;

BB1_23:
	setp.lt.u32	%p23, %r7, 4;
	@%p23 bra 	BB1_25;

BB1_24:
	add.u64 	%rd34, %SP, 0;
	cvta.to.local.u64 	%rd35, %rd34;
	mul.wide.u32 	%rd36, %r102, 4;
	add.s64 	%rd37, %rd35, %rd36;
	ld.local.u32 	%r72, [%rd37];
	cvt.rn.f32.u32	%f66, %r72;
	sub.f32 	%f67, %f66, %f13;
	fma.rn.f32 	%f68, %f67, %f67, %f85;
	add.s32 	%r73, %r102, 1;
	mul.wide.u32 	%rd38, %r73, 4;
	add.s64 	%rd39, %rd35, %rd38;
	ld.local.u32 	%r74, [%rd39];
	cvt.rn.f32.u32	%f69, %r74;
	sub.f32 	%f70, %f69, %f13;
	fma.rn.f32 	%f71, %f70, %f70, %f68;
	add.s32 	%r75, %r102, 2;
	mul.wide.u32 	%rd40, %r75, 4;
	add.s64 	%rd41, %rd35, %rd40;
	ld.local.u32 	%r76, [%rd41];
	cvt.rn.f32.u32	%f72, %r76;
	sub.f32 	%f73, %f72, %f13;
	fma.rn.f32 	%f74, %f73, %f73, %f71;
	add.s32 	%r77, %r102, 3;
	mul.wide.u32 	%rd42, %r77, 4;
	add.s64 	%rd43, %rd35, %rd42;
	ld.local.u32 	%r78, [%rd43];
	cvt.rn.f32.u32	%f75, %r78;
	sub.f32 	%f76, %f75, %f13;
	fma.rn.f32 	%f85, %f76, %f76, %f74;
	add.s32 	%r102, %r102, 4;
	setp.lt.u32	%p24, %r102, %r7;
	@%p24 bra 	BB1_24;

BB1_25:
	add.s32 	%r79, %r7, -1;
	cvt.rn.f32.u32	%f77, %r79;
	div.rn.f32 	%f78, %f85, %f77;
	div.rn.f32 	%f23, %f78, %f13;
	setp.ne.s32	%p25, %r7, 1;
	@%p25 bra 	BB1_27;

	// inline asm
	activemask.b32 %r80;
	// inline asm
	add.u64 	%rd44, %SP, 0;
	cvta.to.local.u64 	%rd45, %rd44;
	ld.local.v2.u32 	{%r82, %r83}, [%rd45];
	setp.eq.s32	%p26, %r82, %r83;
	vote.sync.all.pred 	%p27, %p26, %r80;
	mov.u32 	%r103, 2;
	@%p27 bra 	BB1_29;

BB1_27:
	// inline asm
	activemask.b32 %r87;
	// inline asm
	setp.lt.f32	%p28, %f23, 0f3C23D70A;
	vote.sync.all.pred 	%p29, %p28, %r87;
	mov.u32 	%r103, %r96;
	@%p29 bra 	BB1_29;

	// inline asm
	activemask.b32 %r89;
	// inline asm
	setp.le.f32	%p30, %f23, 0f3F800000;
	vote.sync.all.pred 	%p31, %p30, %r89;
	setp.ge.u32	%p32, %r7, %r60;
	and.pred  	%p33, %p31, %p32;
	selp.b32	%r103, %r96, %r9, %p33;

BB1_29:
	cvt.rn.f32.u32	%f86, %r103;
	setp.lt.u32	%p34, %r96, %r103;
	@%p34 bra 	BB1_13;
	bra.uni 	BB1_30;

BB1_11:
	mov.u32 	%r103, %r104;

BB1_30:
	div.u32 	%r92, %r104, %r103;
	cvt.rn.f32.u32	%f88, %r92;

BB1_31:
	mul.lo.s32 	%r93, %r5, %r24;
	cvt.u64.u32	%rd46, %r93;
	cvta.to.global.u64 	%rd47, %rd1;
	add.s64 	%rd48, %rd47, %rd46;
	mul.wide.u32 	%rd49, %r4, 16;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.f32 	[%rd50], %f88;
	st.global.f32 	[%rd50+4], %f86;
	mov.u32 	%r94, 0;
	st.global.u32 	[%rd50+12], %r94;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd50+8], %rs1;
	setp.gt.f32	%p35, %f86, 0f00000000;
	@%p35 bra 	BB1_33;

	mov.u64 	%rd51, $str4;
	cvta.global.u64 	%rd52, %rd51;
	mov.u64 	%rd53, $str2;
	cvta.global.u64 	%rd54, %rd53;
	mov.u32 	%r95, 203;
	mov.u64 	%rd55, 0;
	mov.u64 	%rd56, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd52;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd54;
	.param .b32 param2;
	st.param.b32	[param2+0], %r95;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd55;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd56;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_33:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .f32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<36>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<106>;
	.reg .f64 	%fd<67>;
	.reg .b64 	%rd<57>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r24, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd21, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd20, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderMainDouble_param_3];
	ld.param.f32 	%f8, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 59;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r25;
	setp.lt.u32	%p3, %r5, %r26;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_32;
	bra.uni 	BB2_3;

BB2_3:
	setp.ge.f32	%p5, %f8, 0f3F800000;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd8, $str3;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 196;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_5:
	setp.lt.f32	%p6, %f8, 0f3F800000;
	mov.f32 	%f17, 0f00000000;
	mov.f32 	%f18, %f17;
	@%p6 bra 	BB2_30;

	abs.f32 	%f11, %f8;
	mov.b32 	 %r47, %f8;
	and.b32  	%r48, %r47, -2147483648;
	or.b32  	%r49, %r48, 1056964608;
	mov.b32 	 %f12, %r49;
	add.f32 	%f13, %f12, %f8;
	cvt.rzi.f32.f32	%f14, %f13;
	setp.gt.f32	%p7, %f11, 0f4B000000;
	selp.f32	%f16, %f8, %f14, %p7;
	setp.geu.f32	%p8, %f11, 0f3F000000;
	@%p8 bra 	BB2_8;

	cvt.rzi.f32.f32	%f16, %f8;

BB2_8:
	cvt.rzi.u32.f32	%r50, %f16;
	mov.u32 	%r51, 64;
	min.u32 	%r6, %r51, %r50;
	setp.lt.u32	%p9, %r6, 65;
	@%p9 bra 	BB2_10;

	mov.u64 	%rd14, $str11;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str2;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r52, 113;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB2_10:
	setp.eq.s32	%p10, %r6, 0;
	mov.u32 	%r104, 0;
	mov.u32 	%r103, %r104;
	@%p10 bra 	BB2_29;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.u32 	%r57, [amplifier];
	cvt.rn.f64.s32	%fd5, %r57;
	cvt.rn.f64.u32	%fd23, %r25;
	sub.f64 	%fd24, %fd21, %fd1;
	div.rn.f64 	%fd6, %fd24, %fd23;
	cvt.rn.f64.u32	%fd25, %r26;
	sub.f64 	%fd26, %fd2, %fd20;
	div.rn.f64 	%fd7, %fd26, %fd25;
	mov.u32 	%r96, 0;
	and.b32  	%r59, %r27, 1;
	mov.u32 	%r104, %r96;
	mov.u32 	%r103, %r6;

BB2_12:
	mov.u32 	%r9, %r103;
	mov.u32 	%r7, %r96;
	cvt.rn.f64.u32	%fd27, %r9;
	cvt.rn.f64.u32	%fd28, %r7;
	div.rn.f64 	%fd29, %fd28, %fd27;
	add.f64 	%fd30, %fd3, %fd29;
	add.f64 	%fd31, %fd4, %fd29;
	neg.f64 	%fd32, %fd31;
	fma.rn.f64 	%fd33, %fd6, %fd30, %fd1;
	fma.rn.f64 	%fd34, %fd7, %fd32, %fd2;
	abs.f64 	%fd35, %fd33;
	abs.f64 	%fd36, %fd34;
	add.f64 	%fd37, %fd35, %fd36;
	mul.f64 	%fd38, %fd37, %fd5;
	cvt.rzi.s32.f64	%r58, %fd38;
	cvt.rn.f32.s32	%f15, %r58;
	cvt.rzi.u32.f32	%r10, %f15;
	add.s32 	%r104, %r10, %r104;
	setp.gt.u32	%p11, %r7, 9;
	@%p11 bra 	BB2_14;

	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r7, 4;
	add.s64 	%rd23, %rd21, %rd22;
	st.local.u32 	[%rd23], %r10;

BB2_14:
	setp.lt.u32	%p12, %r7, 10;
	setp.eq.b32	%p13, %r59, 1;
	setp.ne.s32	%p14, %r7, 0;
	and.pred  	%p15, %p12, %p14;
	and.pred  	%p16, %p15, %p13;
	shr.u32 	%r60, %r9, 1;
	setp.eq.s32	%p17, %r7, %r60;
	or.pred  	%p18, %p16, %p17;
	add.s32 	%r96, %r7, 1;
	mov.u32 	%r103, %r9;
	@!%p18 bra 	BB2_28;
	bra.uni 	BB2_15;

BB2_15:
	div.u32 	%r61, %r104, %r96;
	cvt.rn.f64.u32	%fd8, %r61;
	setp.eq.s32	%p19, %r7, 0;
	mov.f64 	%fd66, 0d0000000000000000;
	@%p19 bra 	BB2_24;

	and.b32  	%r63, %r7, 3;
	setp.eq.s32	%p20, %r63, 0;
	mov.f64 	%fd66, 0d0000000000000000;
	mov.u32 	%r102, 0;
	@%p20 bra 	BB2_22;

	setp.eq.s32	%p21, %r63, 1;
	mov.f64 	%fd63, 0d0000000000000000;
	mov.u32 	%r100, 0;
	@%p21 bra 	BB2_21;

	setp.eq.s32	%p22, %r63, 2;
	mov.f64 	%fd62, 0d0000000000000000;
	mov.u32 	%r99, 0;
	@%p22 bra 	BB2_20;

	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	ld.local.u32 	%r69, [%rd25];
	cvt.rn.f64.u32	%fd43, %r69;
	sub.f64 	%fd44, %fd43, %fd8;
	fma.rn.f64 	%fd62, %fd44, %fd44, 0d0000000000000000;
	mov.u32 	%r99, 1;

BB2_20:
	add.u64 	%rd26, %SP, 0;
	cvta.to.local.u64 	%rd27, %rd26;
	mul.wide.u32 	%rd28, %r99, 4;
	add.s64 	%rd29, %rd27, %rd28;
	ld.local.u32 	%r70, [%rd29];
	cvt.rn.f64.u32	%fd45, %r70;
	sub.f64 	%fd46, %fd45, %fd8;
	fma.rn.f64 	%fd63, %fd46, %fd46, %fd62;
	add.s32 	%r100, %r99, 1;

BB2_21:
	add.u64 	%rd30, %SP, 0;
	cvta.to.local.u64 	%rd31, %rd30;
	mul.wide.u32 	%rd32, %r100, 4;
	add.s64 	%rd33, %rd31, %rd32;
	ld.local.u32 	%r71, [%rd33];
	cvt.rn.f64.u32	%fd47, %r71;
	sub.f64 	%fd48, %fd47, %fd8;
	fma.rn.f64 	%fd66, %fd48, %fd48, %fd63;
	add.s32 	%r102, %r100, 1;

BB2_22:
	setp.lt.u32	%p23, %r7, 4;
	@%p23 bra 	BB2_24;

BB2_23:
	add.u64 	%rd34, %SP, 0;
	cvta.to.local.u64 	%rd35, %rd34;
	mul.wide.u32 	%rd36, %r102, 4;
	add.s64 	%rd37, %rd35, %rd36;
	ld.local.u32 	%r72, [%rd37];
	cvt.rn.f64.u32	%fd49, %r72;
	sub.f64 	%fd50, %fd49, %fd8;
	fma.rn.f64 	%fd51, %fd50, %fd50, %fd66;
	add.s32 	%r73, %r102, 1;
	mul.wide.u32 	%rd38, %r73, 4;
	add.s64 	%rd39, %rd35, %rd38;
	ld.local.u32 	%r74, [%rd39];
	cvt.rn.f64.u32	%fd52, %r74;
	sub.f64 	%fd53, %fd52, %fd8;
	fma.rn.f64 	%fd54, %fd53, %fd53, %fd51;
	add.s32 	%r75, %r102, 2;
	mul.wide.u32 	%rd40, %r75, 4;
	add.s64 	%rd41, %rd35, %rd40;
	ld.local.u32 	%r76, [%rd41];
	cvt.rn.f64.u32	%fd55, %r76;
	sub.f64 	%fd56, %fd55, %fd8;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd54;
	add.s32 	%r77, %r102, 3;
	mul.wide.u32 	%rd42, %r77, 4;
	add.s64 	%rd43, %rd35, %rd42;
	ld.local.u32 	%r78, [%rd43];
	cvt.rn.f64.u32	%fd58, %r78;
	sub.f64 	%fd59, %fd58, %fd8;
	fma.rn.f64 	%fd66, %fd59, %fd59, %fd57;
	add.s32 	%r102, %r102, 4;
	setp.lt.u32	%p24, %r102, %r7;
	@%p24 bra 	BB2_23;

BB2_24:
	add.s32 	%r79, %r7, -1;
	cvt.rn.f64.u32	%fd60, %r79;
	div.rn.f64 	%fd61, %fd66, %fd60;
	div.rn.f64 	%fd18, %fd61, %fd8;
	setp.ne.s32	%p25, %r7, 1;
	@%p25 bra 	BB2_26;

	// inline asm
	activemask.b32 %r80;
	// inline asm
	add.u64 	%rd44, %SP, 0;
	cvta.to.local.u64 	%rd45, %rd44;
	ld.local.v2.u32 	{%r82, %r83}, [%rd45];
	setp.eq.s32	%p26, %r82, %r83;
	vote.sync.all.pred 	%p27, %p26, %r80;
	mov.u32 	%r103, 2;
	@%p27 bra 	BB2_28;

BB2_26:
	// inline asm
	activemask.b32 %r87;
	// inline asm
	setp.lt.f64	%p28, %fd18, 0d3F847AE140000000;
	vote.sync.all.pred 	%p29, %p28, %r87;
	mov.u32 	%r103, %r96;
	@%p29 bra 	BB2_28;

	// inline asm
	activemask.b32 %r89;
	// inline asm
	setp.le.f64	%p30, %fd18, 0d3FF0000000000000;
	vote.sync.all.pred 	%p31, %p30, %r89;
	setp.ge.u32	%p32, %r7, %r60;
	and.pred  	%p33, %p31, %p32;
	selp.b32	%r103, %r96, %r9, %p33;

BB2_28:
	setp.lt.u32	%p34, %r96, %r103;
	@%p34 bra 	BB2_12;

BB2_29:
	cvt.rn.f32.u32	%f17, %r103;
	div.u32 	%r92, %r104, %r103;
	cvt.rn.f32.u32	%f18, %r92;

BB2_30:
	mul.lo.s32 	%r93, %r5, %r24;
	cvt.u64.u32	%rd46, %r93;
	cvta.to.global.u64 	%rd47, %rd1;
	add.s64 	%rd48, %rd47, %rd46;
	mul.wide.u32 	%rd49, %r4, 16;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.f32 	[%rd50], %f18;
	st.global.f32 	[%rd50+4], %f17;
	mov.u32 	%r94, 0;
	st.global.u32 	[%rd50+12], %r94;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd50+8], %rs1;
	setp.gt.f32	%p35, %f17, 0f00000000;
	@%p35 bra 	BB2_32;

	mov.u64 	%rd51, $str4;
	cvta.global.u64 	%rd52, %rd51;
	mov.u64 	%rd53, $str2;
	cvta.global.u64 	%rd54, %rd53;
	mov.u32 	%r95, 203;
	mov.u64 	%rd55, 0;
	mov.u64 	%rd56, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd52;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd54;
	.param .b32 param2;
	st.param.b32	[param2+0], %r95;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd55;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd56;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB2_32:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .f32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[56];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<93>;
	.reg .b16 	%rs<16>;
	.reg .f32 	%f<308>;
	.reg .b32 	%r<211>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<109>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd4, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r48, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r50, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r49, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f84, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f83, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderAdvancedFloat_param_3];
	ld.param.f32 	%f281, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r51, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f90, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f89, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f88, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f87, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd5, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r52, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r54, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r53, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r55, 59;
	mov.u64 	%rd10, 0;
	mov.u64 	%rd11, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r55;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd10;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd11;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_2:
	mov.u32 	%r56, %tid.x;
	mov.u32 	%r57, %tid.y;
	mad.lo.s32 	%r58, %r1, %r57, %r56;
	shl.b32 	%r59, %r1, 2;
	and.b32  	%r60, %r58, 15;
	rem.u32 	%r61, %r58, %r59;
	sub.s32 	%r62, %r61, %r60;
	shr.u32 	%r63, %r62, 2;
	and.b32  	%r64, %r58, 3;
	add.s32 	%r65, %r63, %r64;
	div.u32 	%r66, %r58, %r59;
	shl.b32 	%r67, %r66, 2;
	bfe.u32 	%r68, %r58, 2, 2;
	add.s32 	%r69, %r67, %r68;
	mov.u32 	%r70, %ctaid.x;
	mad.lo.s32 	%r4, %r70, %r1, %r65;
	mov.u32 	%r71, %ctaid.y;
	mov.u32 	%r72, %ntid.y;
	mad.lo.s32 	%r5, %r71, %r72, %r69;
	setp.lt.u32	%p2, %r4, %r49;
	setp.gt.u32	%p3, %r50, %r5;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB3_80;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r73, %r51, 52;
	mov.u16 	%rs14, 0;
	setp.ne.s32	%p5, %r73, 52;
	@%p5 bra 	BB3_4;

	setp.gt.f32	%p6, %f281, 0f00000000;
	@%p6 bra 	BB3_7;

	mov.u64 	%rd12, $str7;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, $str2;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r74, 237;
	mov.u64 	%rd16, 0;
	mov.u64 	%rd17, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd15;
	.param .b32 param2;
	st.param.b32	[param2+0], %r74;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_7:
	and.b32  	%r75, %r4, -8;
	cvt.rn.f32.u32	%f91, %r75;
	and.b32  	%r76, %r5, -4;
	cvt.rn.f32.u32	%f92, %r76;
	cvt.rn.f32.u32	%f93, %r53;
	sub.f32 	%f94, %f93, %f91;
	cvt.rn.f32.u32	%f95, %r54;
	sub.f32 	%f96, %f95, %f92;
	mul.f32 	%f97, %f96, %f96;
	fma.rn.f32 	%f98, %f94, %f94, %f97;
	sqrt.rn.f32 	%f99, %f98;
	ld.global.f32 	%f100, [pixelRealWidthInCm];
	mul.f32 	%f101, %f99, %f100;
	ld.global.f32 	%f102, [screenDistance];
	div.rn.f32 	%f3, %f101, %f102;
	abs.f32 	%f4, %f3;
	setp.leu.f32	%p7, %f4, 0f3F800000;
	mov.f32 	%f280, %f4;
	@%p7 bra 	BB3_9;

	rcp.rn.f32 	%f280, %f4;

BB3_9:
	mul.rn.f32 	%f103, %f280, %f280;
	mov.f32 	%f104, 0fC0B59883;
	mov.f32 	%f105, 0fBF52C7EA;
	fma.rn.f32 	%f106, %f103, %f105, %f104;
	mov.f32 	%f107, 0fC0D21907;
	fma.rn.f32 	%f108, %f106, %f103, %f107;
	mul.f32 	%f109, %f103, %f108;
	mul.f32 	%f110, %f280, %f109;
	add.f32 	%f111, %f103, 0f41355DC0;
	mov.f32 	%f112, 0f41E6BD60;
	fma.rn.f32 	%f113, %f111, %f103, %f112;
	mov.f32 	%f114, 0f419D92C8;
	fma.rn.f32 	%f115, %f113, %f103, %f114;
	rcp.rn.f32 	%f116, %f115;
	fma.rn.f32 	%f117, %f110, %f116, %f280;
	mov.f32 	%f118, 0f3FC90FDB;
	sub.f32 	%f119, %f118, %f117;
	setp.gt.f32	%p8, %f4, 0f3F800000;
	selp.f32	%f120, %f119, %f117, %p8;
	mov.b32 	 %r77, %f120;
	mov.b32 	 %r78, %f3;
	and.b32  	%r79, %r78, -2147483648;
	or.b32  	%r80, %r77, %r79;
	mov.b32 	 %f121, %r80;
	setp.gtu.f32	%p9, %f4, 0f7F800000;
	selp.f32	%f122, %f120, %f121, %p9;
	mul.f32 	%f123, %f122, 0f43340000;
	div.rn.f32 	%f7, %f123, 0f40490FDB;
	setp.ge.f32	%p10, %f7, 0f00000000;
	@%p10 bra 	BB3_11;

	mov.u64 	%rd18, $str8;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, $str2;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r81, 247;
	mov.u64 	%rd22, 0;
	mov.u64 	%rd23, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd19;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd21;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd22;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd23;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_11:
	setp.lt.f32	%p11, %f281, 0f3F800000;
	mul.f32 	%f124, %f281, 0f40B00000;
	selp.f32	%f125, %f124, 0f40B00000, %p11;
	add.f32 	%f126, %f125, 0fC2700000;
	rcp.rn.f32 	%f127, %f126;
	mov.f32 	%f128, 0fC2700000;
	div.rn.f32 	%f129, %f128, %f126;
	fma.rn.f32 	%f130, %f7, %f127, %f129;
	mul.f32 	%f281, %f130, %f281;
	setp.gtu.f32	%p12, %f7, %f125;
	@%p12 bra 	BB3_12;
	bra.uni 	BB3_13;

BB3_12:
	mov.u16 	%rs13, %rs14;
	bra.uni 	BB3_14;

BB3_4:
	mov.u16 	%rs13, %rs14;
	bra.uni 	BB3_14;

BB3_13:
	cvt.f64.f32	%fd1, %f281;
	mov.f64 	%fd2, 0d3FF0000000000000;
	max.f64 	%fd3, %fd2, %fd1;
	cvt.rn.f32.f64	%f281, %fd3;
	mov.u16 	%rs13, 1;

BB3_14:
	and.b32  	%r82, %r51, 8;
	setp.eq.s32	%p13, %r82, 0;
	mov.f32 	%f304, 0f00000000;
	@%p13 bra 	BB3_15;

	sub.s32 	%r83, %r50, %r5;
	cvt.rn.f32.u32	%f133, %r83;
	cvt.rn.f32.u32	%f134, %r49;
	cvt.rn.f32.u32	%f135, %r4;
	div.rn.f32 	%f136, %f135, %f134;
	cvt.rn.f32.u32	%f137, %r50;
	div.rn.f32 	%f138, %f133, %f137;
	sub.f32 	%f139, %f84, %f1;
	sub.f32 	%f140, %f2, %f83;
	fma.rn.f32 	%f141, %f139, %f136, %f1;
	fma.rn.f32 	%f142, %f140, %f138, %f83;
	sub.f32 	%f143, %f141, %f87;
	sub.f32 	%f144, %f142, %f88;
	sub.f32 	%f145, %f89, %f87;
	div.rn.f32 	%f146, %f143, %f145;
	sub.f32 	%f147, %f90, %f88;
	div.rn.f32 	%f148, %f144, %f147;
	mul.f32 	%f13, %f134, %f146;
	mul.f32 	%f149, %f137, %f148;
	sub.f32 	%f14, %f137, %f149;
	abs.f32 	%f150, %f13;
	mov.b32 	 %r84, %f13;
	and.b32  	%r85, %r84, -2147483648;
	or.b32  	%r86, %r85, 1056964608;
	mov.b32 	 %f151, %r86;
	add.f32 	%f152, %f13, %f151;
	cvt.rzi.f32.f32	%f153, %f152;
	setp.gt.f32	%p14, %f150, 0f4B000000;
	selp.f32	%f282, %f13, %f153, %p14;
	setp.geu.f32	%p15, %f150, 0f3F000000;
	@%p15 bra 	BB3_18;

	cvt.rzi.f32.f32	%f282, %f13;

BB3_18:
	cvt.rzi.s32.f32	%r8, %f282;
	mov.b32 	 %r87, %f14;
	and.b32  	%r88, %r87, -2147483648;
	or.b32  	%r89, %r88, 1056964608;
	mov.b32 	 %f154, %r89;
	add.f32 	%f155, %f14, %f154;
	cvt.rzi.f32.f32	%f156, %f155;
	abs.f32 	%f157, %f14;
	setp.gt.f32	%p16, %f157, 0f4B000000;
	selp.f32	%f283, %f14, %f156, %p16;
	setp.geu.f32	%p17, %f157, 0f3F000000;
	@%p17 bra 	BB3_20;

	cvt.rzi.f32.f32	%f283, %f14;

BB3_20:
	add.s32 	%r90, %r49, -2;
	setp.lt.u32	%p18, %r8, %r90;
	setp.gt.s32	%p19, %r8, 1;
	and.pred  	%p20, %p19, %p18;
	cvt.rzi.s32.f32	%r91, %f283;
	setp.gt.s32	%p21, %r91, 1;
	and.pred  	%p22, %p20, %p21;
	add.s32 	%r92, %r50, -2;
	setp.lt.u32	%p23, %r91, %r92;
	and.pred  	%p24, %p23, %p22;
	mov.f32 	%f303, %f304;
	@!%p24 bra 	BB3_22;
	bra.uni 	BB3_21;

BB3_21:
	cvt.rmi.f32.f32	%f160, %f13;
	cvt.rzi.u32.f32	%r93, %f160;
	cvt.rmi.f32.f32	%f161, %f14;
	cvt.rzi.u32.f32	%r94, %f161;
	cvt.rn.f32.u32	%f162, %r93;
	sub.f32 	%f163, %f13, %f162;
	cvt.rn.f32.u32	%f164, %r94;
	sub.f32 	%f165, %f14, %f164;
	mul.lo.s32 	%r95, %r94, %r52;
	cvt.u64.u32	%rd24, %r95;
	cvta.to.global.u64 	%rd25, %rd5;
	add.s64 	%rd26, %rd25, %rd24;
	mul.wide.u32 	%rd27, %r93, 16;
	add.s64 	%rd28, %rd26, %rd27;
	add.s32 	%r96, %r93, 1;
	mul.wide.u32 	%rd29, %r96, 16;
	add.s64 	%rd30, %rd26, %rd29;
	add.s32 	%r97, %r94, 1;
	mul.lo.s32 	%r98, %r97, %r52;
	cvt.u64.u32	%rd31, %r98;
	add.s64 	%rd32, %rd25, %rd31;
	add.s64 	%rd33, %rd32, %rd27;
	add.s64 	%rd34, %rd32, %rd29;
	mov.f32 	%f166, 0f3F800000;
	sub.f32 	%f167, %f166, %f163;
	ld.global.f32 	%f168, [%rd28];
	ld.global.f32 	%f169, [%rd30];
	mul.f32 	%f170, %f163, %f169;
	fma.rn.f32 	%f171, %f168, %f167, %f170;
	sub.f32 	%f172, %f166, %f165;
	ld.global.f32 	%f173, [%rd33];
	ld.global.f32 	%f174, [%rd34];
	mul.f32 	%f175, %f163, %f174;
	fma.rn.f32 	%f176, %f167, %f173, %f175;
	mul.f32 	%f177, %f165, %f176;
	fma.rn.f32 	%f304, %f172, %f171, %f177;
	ld.global.f32 	%f178, [%rd28+4];
	ld.global.f32 	%f179, [%rd30+4];
	mul.f32 	%f180, %f163, %f179;
	fma.rn.f32 	%f181, %f167, %f178, %f180;
	ld.global.f32 	%f182, [%rd33+4];
	ld.global.f32 	%f183, [%rd34+4];
	mul.f32 	%f184, %f163, %f183;
	fma.rn.f32 	%f185, %f167, %f182, %f184;
	mul.f32 	%f186, %f165, %f185;
	fma.rn.f32 	%f303, %f172, %f181, %f186;
	cvt.f64.f32	%fd4, %f303;
	setp.geu.f64	%p25, %fd4, 0d3FB999999999999A;
	selp.u16	%rs14, 1, 0, %p25;
	bra.uni 	BB3_22;

BB3_15:
	mov.f32 	%f303, %f304;

BB3_22:
	add.u64 	%rd35, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd35;
	setp.eq.s16	%p26, %rs14, 0;
	@%p26 bra 	BB3_51;

	shr.u32 	%r99, %r51, 5;
	and.b32  	%r100, %r99, 1;
	setp.eq.b32	%p27, %r100, 1;
	not.pred 	%p28, %p27;
	setp.eq.s16	%p29, %rs13, 0;
	mov.f32 	%f293, 0f00000000;
	mov.u16 	%rs15, 1;
	or.pred  	%p30, %p29, %p28;
	@%p30 bra 	BB3_76;

	setp.lt.f32	%p31, %f281, 0f3F800000;
	mov.f32 	%f293, 0f00000000;
	mov.f32 	%f295, %f293;
	@%p31 bra 	BB3_50;

	abs.f32 	%f190, %f281;
	mov.b32 	 %r101, %f281;
	and.b32  	%r102, %r101, -2147483648;
	or.b32  	%r103, %r102, 1056964608;
	mov.b32 	 %f191, %r103;
	add.f32 	%f192, %f281, %f191;
	cvt.rzi.f32.f32	%f193, %f192;
	setp.gt.f32	%p32, %f190, 0f4B000000;
	selp.f32	%f286, %f281, %f193, %p32;
	setp.geu.f32	%p33, %f190, 0f3F000000;
	@%p33 bra 	BB3_27;

	cvt.rzi.f32.f32	%f286, %f281;

BB3_27:
	cvt.rzi.u32.f32	%r104, %f286;
	mov.u32 	%r105, 64;
	min.u32 	%r198, %r105, %r104;
	cvt.rn.f32.u32	%f194, %r49;
	sub.f32 	%f195, %f84, %f1;
	div.rn.f32 	%f28, %f195, %f194;
	cvt.rn.f32.u32	%f196, %r50;
	sub.f32 	%f197, %f2, %f83;
	div.rn.f32 	%f29, %f197, %f196;
	setp.lt.u32	%p34, %r198, 65;
	@%p34 bra 	BB3_29;

	mov.u64 	%rd36, $str11;
	cvta.global.u64 	%rd37, %rd36;
	mov.u64 	%rd38, $str2;
	cvta.global.u64 	%rd39, %rd38;
	mov.u32 	%r106, 113;
	mov.u64 	%rd40, 0;
	mov.u64 	%rd41, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd39;
	.param .b32 param2;
	st.param.b32	[param2+0], %r106;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd40;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd41;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB3_29:
	setp.eq.s32	%p35, %r198, 0;
	cvt.rn.f32.u32	%f293, %r198;
	mov.u32 	%r199, 0;
	@%p35 bra 	BB3_30;

	cvt.rn.f32.u32	%f31, %r4;
	cvt.rn.f32.u32	%f32, %r5;
	ld.const.u32 	%r111, [amplifier];
	cvt.rn.f32.s32	%f33, %r111;
	mov.u32 	%r191, 0;
	mov.u32 	%r199, %r191;

BB3_32:
	mov.u32 	%r12, %r198;
	mov.u32 	%r10, %r191;
	cvt.rn.f32.u32	%f198, %r10;
	div.rn.f32 	%f199, %f198, %f293;
	add.f32 	%f200, %f31, %f199;
	add.f32 	%f201, %f32, %f199;
	neg.f32 	%f202, %f201;
	fma.rn.f32 	%f203, %f28, %f200, %f1;
	fma.rn.f32 	%f204, %f29, %f202, %f2;
	abs.f32 	%f205, %f203;
	abs.f32 	%f206, %f204;
	add.f32 	%f207, %f205, %f206;
	mul.f32 	%f208, %f207, %f33;
	cvt.rzi.s32.f32	%r112, %f208;
	cvt.rn.f32.s32	%f209, %r112;
	cvt.rzi.u32.f32	%r13, %f209;
	add.s32 	%r199, %r13, %r199;
	setp.gt.u32	%p36, %r10, 9;
	@%p36 bra 	BB3_34;

	mul.wide.u32 	%rd44, %r10, 4;
	add.s64 	%rd45, %rd1, %rd44;
	st.local.u32 	[%rd45], %r13;

BB3_34:
	setp.lt.u32	%p37, %r10, 10;
	and.b32  	%r113, %r51, 1;
	setp.eq.b32	%p38, %r113, 1;
	setp.ne.s32	%p39, %r10, 0;
	and.pred  	%p40, %p37, %p39;
	and.pred  	%p41, %p40, %p38;
	shr.u32 	%r114, %r12, 1;
	setp.eq.s32	%p42, %r10, %r114;
	or.pred  	%p43, %p41, %p42;
	add.s32 	%r191, %r10, 1;
	mov.u32 	%r198, %r12;
	@!%p43 bra 	BB3_48;
	bra.uni 	BB3_35;

BB3_35:
	div.u32 	%r115, %r199, %r191;
	cvt.rn.f32.u32	%f35, %r115;
	setp.eq.s32	%p44, %r10, 0;
	mov.f32 	%f292, 0f00000000;
	@%p44 bra 	BB3_44;

	and.b32  	%r117, %r10, 3;
	setp.eq.s32	%p45, %r117, 0;
	mov.f32 	%f292, 0f00000000;
	mov.u32 	%r197, 0;
	@%p45 bra 	BB3_42;

	setp.eq.s32	%p46, %r117, 1;
	mov.f32 	%f289, 0f00000000;
	mov.u32 	%r195, 0;
	@%p46 bra 	BB3_41;

	setp.eq.s32	%p47, %r117, 2;
	mov.f32 	%f288, 0f00000000;
	mov.u32 	%r194, 0;
	@%p47 bra 	BB3_40;

	ld.local.u32 	%r123, [%rd1];
	cvt.rn.f32.u32	%f214, %r123;
	sub.f32 	%f215, %f214, %f35;
	fma.rn.f32 	%f288, %f215, %f215, 0f00000000;
	mov.u32 	%r194, 1;

BB3_40:
	mul.wide.u32 	%rd50, %r194, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.local.u32 	%r124, [%rd51];
	cvt.rn.f32.u32	%f216, %r124;
	sub.f32 	%f217, %f216, %f35;
	fma.rn.f32 	%f289, %f217, %f217, %f288;
	add.s32 	%r195, %r194, 1;

BB3_41:
	mul.wide.u32 	%rd54, %r195, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.local.u32 	%r125, [%rd55];
	cvt.rn.f32.u32	%f218, %r125;
	sub.f32 	%f219, %f218, %f35;
	fma.rn.f32 	%f292, %f219, %f219, %f289;
	add.s32 	%r197, %r195, 1;

BB3_42:
	setp.lt.u32	%p48, %r10, 4;
	@%p48 bra 	BB3_44;

BB3_43:
	mul.wide.u32 	%rd57, %r197, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.local.u32 	%r126, [%rd58];
	cvt.rn.f32.u32	%f220, %r126;
	sub.f32 	%f221, %f220, %f35;
	fma.rn.f32 	%f222, %f221, %f221, %f292;
	add.s32 	%r127, %r197, 1;
	mul.wide.u32 	%rd59, %r127, 4;
	add.s64 	%rd60, %rd1, %rd59;
	ld.local.u32 	%r128, [%rd60];
	cvt.rn.f32.u32	%f223, %r128;
	sub.f32 	%f224, %f223, %f35;
	fma.rn.f32 	%f225, %f224, %f224, %f222;
	add.s32 	%r129, %r197, 2;
	mul.wide.u32 	%rd61, %r129, 4;
	add.s64 	%rd62, %rd1, %rd61;
	ld.local.u32 	%r130, [%rd62];
	cvt.rn.f32.u32	%f226, %r130;
	sub.f32 	%f227, %f226, %f35;
	fma.rn.f32 	%f228, %f227, %f227, %f225;
	add.s32 	%r131, %r197, 3;
	mul.wide.u32 	%rd63, %r131, 4;
	add.s64 	%rd64, %rd1, %rd63;
	ld.local.u32 	%r132, [%rd64];
	cvt.rn.f32.u32	%f229, %r132;
	sub.f32 	%f230, %f229, %f35;
	fma.rn.f32 	%f292, %f230, %f230, %f228;
	add.s32 	%r197, %r197, 4;
	setp.lt.u32	%p49, %r197, %r10;
	@%p49 bra 	BB3_43;

BB3_44:
	add.s32 	%r133, %r10, -1;
	cvt.rn.f32.u32	%f231, %r133;
	div.rn.f32 	%f232, %f292, %f231;
	div.rn.f32 	%f45, %f232, %f35;
	setp.ne.s32	%p50, %r10, 1;
	@%p50 bra 	BB3_46;

	// inline asm
	activemask.b32 %r134;
	// inline asm
	ld.local.v2.u32 	{%r136, %r137}, [%rd1];
	setp.eq.s32	%p51, %r136, %r137;
	vote.sync.all.pred 	%p52, %p51, %r134;
	mov.u32 	%r198, 2;
	@%p52 bra 	BB3_48;

BB3_46:
	// inline asm
	activemask.b32 %r141;
	// inline asm
	setp.lt.f32	%p53, %f45, 0f3C23D70A;
	vote.sync.all.pred 	%p54, %p53, %r141;
	mov.u32 	%r198, %r191;
	@%p54 bra 	BB3_48;

	// inline asm
	activemask.b32 %r143;
	// inline asm
	setp.le.f32	%p55, %f45, 0f3F800000;
	vote.sync.all.pred 	%p56, %p55, %r143;
	setp.ge.u32	%p57, %r10, %r114;
	and.pred  	%p58, %p56, %p57;
	selp.b32	%r198, %r191, %r12, %p58;

BB3_48:
	cvt.rn.f32.u32	%f293, %r198;
	setp.lt.u32	%p59, %r191, %r198;
	@%p59 bra 	BB3_32;
	bra.uni 	BB3_49;

BB3_51:
	setp.lt.f32	%p60, %f281, 0f3F800000;
	selp.f32	%f53, 0f3F800000, %f281, %p60;
	abs.f32 	%f236, %f53;
	mov.b32 	 %r147, %f53;
	and.b32  	%r148, %r147, -2147483648;
	or.b32  	%r149, %r148, 1056964608;
	mov.b32 	 %f237, %r149;
	add.f32 	%f238, %f53, %f237;
	cvt.rzi.f32.f32	%f239, %f238;
	setp.gt.f32	%p61, %f236, 0f4B000000;
	selp.f32	%f296, %f53, %f239, %p61;
	setp.geu.f32	%p62, %f236, 0f3F000000;
	@%p62 bra 	BB3_53;

	cvt.rzi.f32.f32	%f296, %f53;

BB3_53:
	cvt.rzi.u32.f32	%r150, %f296;
	mov.u32 	%r151, 64;
	min.u32 	%r208, %r151, %r150;
	cvt.rn.f32.u32	%f240, %r49;
	sub.f32 	%f241, %f84, %f1;
	div.rn.f32 	%f57, %f241, %f240;
	cvt.rn.f32.u32	%f242, %r50;
	sub.f32 	%f243, %f2, %f83;
	div.rn.f32 	%f58, %f243, %f242;
	setp.lt.u32	%p63, %r208, 65;
	@%p63 bra 	BB3_55;

	mov.u64 	%rd67, $str11;
	cvta.global.u64 	%rd68, %rd67;
	mov.u64 	%rd69, $str2;
	cvta.global.u64 	%rd70, %rd69;
	mov.u32 	%r152, 113;
	mov.u64 	%rd71, 0;
	mov.u64 	%rd72, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd68;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd70;
	.param .b32 param2;
	st.param.b32	[param2+0], %r152;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd71;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd72;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB3_55:
	setp.eq.s32	%p64, %r208, 0;
	cvt.rn.f32.u32	%f303, %r208;
	mov.u32 	%r209, 0;
	@%p64 bra 	BB3_56;

	cvt.rn.f32.u32	%f60, %r4;
	cvt.rn.f32.u32	%f61, %r5;
	ld.const.u32 	%r157, [amplifier];
	cvt.rn.f32.s32	%f62, %r157;
	and.b32  	%r28, %r51, 1;
	mov.u32 	%r201, 0;
	mov.u32 	%r209, %r201;

BB3_58:
	mov.u32 	%r31, %r208;
	mov.u32 	%r29, %r201;
	cvt.rn.f32.u32	%f244, %r29;
	div.rn.f32 	%f245, %f244, %f303;
	add.f32 	%f246, %f60, %f245;
	add.f32 	%f247, %f61, %f245;
	neg.f32 	%f248, %f247;
	fma.rn.f32 	%f249, %f57, %f246, %f1;
	fma.rn.f32 	%f250, %f58, %f248, %f2;
	abs.f32 	%f251, %f249;
	abs.f32 	%f252, %f250;
	add.f32 	%f253, %f251, %f252;
	mul.f32 	%f254, %f253, %f62;
	cvt.rzi.s32.f32	%r158, %f254;
	cvt.rn.f32.s32	%f255, %r158;
	cvt.rzi.u32.f32	%r32, %f255;
	add.s32 	%r209, %r32, %r209;
	setp.gt.u32	%p65, %r29, 9;
	@%p65 bra 	BB3_60;

	mul.wide.u32 	%rd75, %r29, 4;
	add.s64 	%rd76, %rd1, %rd75;
	st.local.u32 	[%rd76], %r32;

BB3_60:
	setp.lt.u32	%p66, %r29, 10;
	setp.ne.s32	%p67, %r29, 0;
	and.pred  	%p68, %p66, %p67;
	setp.ne.s32	%p69, %r28, 0;
	and.pred  	%p70, %p68, %p69;
	shr.u32 	%r34, %r31, 1;
	setp.eq.s32	%p71, %r29, %r34;
	or.pred  	%p72, %p70, %p71;
	add.s32 	%r201, %r29, 1;
	mov.u32 	%r208, %r31;
	@!%p72 bra 	BB3_74;
	bra.uni 	BB3_61;

BB3_61:
	div.u32 	%r159, %r209, %r201;
	cvt.rn.f32.u32	%f64, %r159;
	setp.eq.s32	%p73, %r29, 0;
	mov.f32 	%f302, 0f00000000;
	@%p73 bra 	BB3_70;

	and.b32  	%r36, %r29, 3;
	setp.eq.s32	%p74, %r36, 0;
	mov.f32 	%f302, 0f00000000;
	mov.u32 	%r207, 0;
	@%p74 bra 	BB3_68;

	setp.eq.s32	%p75, %r36, 1;
	mov.f32 	%f299, 0f00000000;
	mov.u32 	%r205, 0;
	@%p75 bra 	BB3_67;

	setp.eq.s32	%p76, %r36, 2;
	mov.f32 	%f298, 0f00000000;
	mov.u32 	%r204, 0;
	@%p76 bra 	BB3_66;

	ld.local.u32 	%r164, [%rd1];
	cvt.rn.f32.u32	%f260, %r164;
	sub.f32 	%f261, %f260, %f64;
	fma.rn.f32 	%f298, %f261, %f261, 0f00000000;
	mov.u32 	%r204, 1;

BB3_66:
	mul.wide.u32 	%rd79, %r204, 4;
	add.s64 	%rd80, %rd1, %rd79;
	ld.local.u32 	%r165, [%rd80];
	cvt.rn.f32.u32	%f262, %r165;
	sub.f32 	%f263, %f262, %f64;
	fma.rn.f32 	%f299, %f263, %f263, %f298;
	add.s32 	%r205, %r204, 1;

BB3_67:
	mul.wide.u32 	%rd83, %r205, 4;
	add.s64 	%rd84, %rd1, %rd83;
	ld.local.u32 	%r166, [%rd84];
	cvt.rn.f32.u32	%f264, %r166;
	sub.f32 	%f265, %f264, %f64;
	fma.rn.f32 	%f302, %f265, %f265, %f299;
	add.s32 	%r207, %r205, 1;

BB3_68:
	setp.lt.u32	%p77, %r29, 4;
	@%p77 bra 	BB3_70;

BB3_69:
	mul.wide.u32 	%rd86, %r207, 4;
	add.s64 	%rd87, %rd1, %rd86;
	ld.local.u32 	%r167, [%rd87];
	cvt.rn.f32.u32	%f266, %r167;
	sub.f32 	%f267, %f266, %f64;
	fma.rn.f32 	%f268, %f267, %f267, %f302;
	add.s32 	%r168, %r207, 1;
	mul.wide.u32 	%rd88, %r168, 4;
	add.s64 	%rd89, %rd1, %rd88;
	ld.local.u32 	%r169, [%rd89];
	cvt.rn.f32.u32	%f269, %r169;
	sub.f32 	%f270, %f269, %f64;
	fma.rn.f32 	%f271, %f270, %f270, %f268;
	add.s32 	%r170, %r207, 2;
	mul.wide.u32 	%rd90, %r170, 4;
	add.s64 	%rd91, %rd1, %rd90;
	ld.local.u32 	%r171, [%rd91];
	cvt.rn.f32.u32	%f272, %r171;
	sub.f32 	%f273, %f272, %f64;
	fma.rn.f32 	%f274, %f273, %f273, %f271;
	add.s32 	%r172, %r207, 3;
	mul.wide.u32 	%rd92, %r172, 4;
	add.s64 	%rd93, %rd1, %rd92;
	ld.local.u32 	%r173, [%rd93];
	cvt.rn.f32.u32	%f275, %r173;
	sub.f32 	%f276, %f275, %f64;
	fma.rn.f32 	%f302, %f276, %f276, %f274;
	add.s32 	%r207, %r207, 4;
	setp.lt.u32	%p78, %r207, %r29;
	@%p78 bra 	BB3_69;

BB3_70:
	add.s32 	%r174, %r29, -1;
	cvt.rn.f32.u32	%f277, %r174;
	div.rn.f32 	%f278, %f302, %f277;
	div.rn.f32 	%f74, %f278, %f64;
	setp.ne.s32	%p79, %r29, 1;
	@%p79 bra 	BB3_72;

	// inline asm
	activemask.b32 %r175;
	// inline asm
	ld.local.v2.u32 	{%r177, %r178}, [%rd1];
	setp.eq.s32	%p80, %r177, %r178;
	vote.sync.all.pred 	%p81, %p80, %r175;
	mov.u32 	%r208, 2;
	@%p81 bra 	BB3_74;

BB3_72:
	// inline asm
	activemask.b32 %r182;
	// inline asm
	setp.lt.f32	%p82, %f74, 0f3C23D70A;
	vote.sync.all.pred 	%p83, %p82, %r182;
	mov.u32 	%r208, %r201;
	@%p83 bra 	BB3_74;

	// inline asm
	activemask.b32 %r184;
	// inline asm
	setp.le.f32	%p84, %f74, 0f3F800000;
	vote.sync.all.pred 	%p85, %p84, %r184;
	setp.ge.u32	%p86, %r29, %r34;
	and.pred  	%p87, %p85, %p86;
	selp.b32	%r208, %r201, %r31, %p87;

BB3_74:
	cvt.rn.f32.u32	%f303, %r208;
	setp.lt.u32	%p88, %r201, %r208;
	@%p88 bra 	BB3_58;
	bra.uni 	BB3_75;

BB3_56:
	mov.u32 	%r208, %r209;

BB3_75:
	div.u32 	%r186, %r209, %r208;
	cvt.rn.f32.u32	%f304, %r186;
	mov.f32 	%f293, 0f00000000;
	mov.u16 	%rs15, 0;
	mov.f32 	%f281, %f303;
	bra.uni 	BB3_76;

BB3_30:
	mov.u32 	%r198, %r199;

BB3_49:
	div.u32 	%r146, %r199, %r198;
	cvt.rn.f32.u32	%f295, %r146;

BB3_50:
	mul.f32 	%f233, %f303, 0f3F400000;
	add.f32 	%f303, %f233, %f293;
	mul.f32 	%f234, %f293, %f295;
	fma.rn.f32 	%f235, %f304, %f233, %f234;
	div.rn.f32 	%f304, %f235, %f303;
	mov.f32 	%f281, %f293;

BB3_76:
	setp.eq.s32	%p89, %r54, %r5;
	setp.eq.s32	%p90, %r53, %r4;
	and.pred  	%p91, %p90, %p89;
	@!%p91 bra 	BB3_78;
	bra.uni 	BB3_77;

BB3_77:
	cvt.f64.f32	%fd5, %f281;
	add.u64 	%rd94, %SP, 40;
	cvta.to.local.u64 	%rd95, %rd94;
	st.local.f64 	[%rd95], %fd5;
	cvt.u32.u16	%r187, %rs14;
	st.local.u32 	[%rd95+8], %r187;
	mov.u64 	%rd96, $str9;
	cvta.global.u64 	%rd97, %rd96;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd97;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd94;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r188, [retval0+0];
	
	//{
	}// Callseq End 13

BB3_78:
	cvta.to.global.u64 	%rd98, %rd4;
	mul.lo.s32 	%r189, %r5, %r48;
	cvt.u64.u32	%rd99, %r189;
	add.s64 	%rd100, %rd98, %rd99;
	mul.wide.u32 	%rd101, %r4, 16;
	add.s64 	%rd102, %rd100, %rd101;
	st.global.f32 	[%rd102], %f304;
	st.global.f32 	[%rd102+4], %f303;
	st.global.f32 	[%rd102+12], %f293;
	st.global.u8 	[%rd102+8], %rs15;
	setp.gt.f32	%p92, %f303, 0f00000000;
	@%p92 bra 	BB3_80;

	mov.u64 	%rd103, $str10;
	cvta.global.u64 	%rd104, %rd103;
	mov.u64 	%rd105, $str2;
	cvta.global.u64 	%rd106, %rd105;
	mov.u32 	%r190, 364;
	mov.u64 	%rd107, 0;
	mov.u64 	%rd108, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd104;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd106;
	.param .b32 param2;
	st.param.b32	[param2+0], %r190;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd107;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd108;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB3_80:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .f32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[56];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<93>;
	.reg .b16 	%rs<16>;
	.reg .f32 	%f<156>;
	.reg .b32 	%r<214>;
	.reg .f64 	%fd<154>;
	.reg .b64 	%rd<111>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r45, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r47, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r46, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd39, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd38, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderAdvancedDouble_param_3];
	ld.param.f32 	%f143, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r48, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd44, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd43, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r49, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r51, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r50, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r52, 59;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_2:
	mov.u32 	%r53, %tid.x;
	mov.u32 	%r54, %tid.y;
	mad.lo.s32 	%r55, %r1, %r54, %r53;
	shl.b32 	%r56, %r1, 2;
	and.b32  	%r57, %r55, 15;
	rem.u32 	%r58, %r55, %r56;
	sub.s32 	%r59, %r58, %r57;
	shr.u32 	%r60, %r59, 2;
	and.b32  	%r61, %r55, 3;
	add.s32 	%r62, %r60, %r61;
	div.u32 	%r63, %r55, %r56;
	shl.b32 	%r64, %r63, 2;
	bfe.u32 	%r65, %r55, 2, 2;
	add.s32 	%r66, %r64, %r65;
	mov.u32 	%r67, %ctaid.x;
	mad.lo.s32 	%r4, %r67, %r1, %r62;
	mov.u32 	%r68, %ctaid.y;
	mov.u32 	%r69, %ntid.y;
	mad.lo.s32 	%r5, %r68, %r69, %r66;
	setp.lt.u32	%p2, %r4, %r46;
	setp.gt.u32	%p3, %r47, %r5;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_78;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r70, %r48, 52;
	mov.u16 	%rs14, 0;
	setp.ne.s32	%p5, %r70, 52;
	@%p5 bra 	BB4_4;

	setp.gt.f32	%p6, %f143, 0f00000000;
	@%p6 bra 	BB4_7;

	mov.u64 	%rd10, $str7;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str2;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r71, 237;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r71;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB4_7:
	and.b32  	%r72, %r4, -8;
	cvt.rn.f32.u32	%f41, %r72;
	and.b32  	%r73, %r5, -4;
	cvt.rn.f32.u32	%f42, %r73;
	cvt.rn.f32.u32	%f43, %r50;
	sub.f32 	%f44, %f43, %f41;
	cvt.rn.f32.u32	%f45, %r51;
	sub.f32 	%f46, %f45, %f42;
	mul.f32 	%f47, %f46, %f46;
	fma.rn.f32 	%f48, %f44, %f44, %f47;
	sqrt.rn.f32 	%f49, %f48;
	ld.global.f32 	%f50, [pixelRealWidthInCm];
	mul.f32 	%f51, %f49, %f50;
	ld.global.f32 	%f52, [screenDistance];
	div.rn.f32 	%f1, %f51, %f52;
	abs.f32 	%f2, %f1;
	setp.leu.f32	%p7, %f2, 0f3F800000;
	mov.f32 	%f142, %f2;
	@%p7 bra 	BB4_9;

	rcp.rn.f32 	%f142, %f2;

BB4_9:
	mul.rn.f32 	%f53, %f142, %f142;
	mov.f32 	%f54, 0fC0B59883;
	mov.f32 	%f55, 0fBF52C7EA;
	fma.rn.f32 	%f56, %f53, %f55, %f54;
	mov.f32 	%f57, 0fC0D21907;
	fma.rn.f32 	%f58, %f56, %f53, %f57;
	mul.f32 	%f59, %f53, %f58;
	mul.f32 	%f60, %f142, %f59;
	add.f32 	%f61, %f53, 0f41355DC0;
	mov.f32 	%f62, 0f41E6BD60;
	fma.rn.f32 	%f63, %f61, %f53, %f62;
	mov.f32 	%f64, 0f419D92C8;
	fma.rn.f32 	%f65, %f63, %f53, %f64;
	rcp.rn.f32 	%f66, %f65;
	fma.rn.f32 	%f67, %f60, %f66, %f142;
	mov.f32 	%f68, 0f3FC90FDB;
	sub.f32 	%f69, %f68, %f67;
	setp.gt.f32	%p8, %f2, 0f3F800000;
	selp.f32	%f70, %f69, %f67, %p8;
	mov.b32 	 %r74, %f70;
	mov.b32 	 %r75, %f1;
	and.b32  	%r76, %r75, -2147483648;
	or.b32  	%r77, %r74, %r76;
	mov.b32 	 %f71, %r77;
	setp.gtu.f32	%p9, %f2, 0f7F800000;
	selp.f32	%f72, %f70, %f71, %p9;
	mul.f32 	%f73, %f72, 0f43340000;
	div.rn.f32 	%f5, %f73, 0f40490FDB;
	setp.ge.f32	%p10, %f5, 0f00000000;
	@%p10 bra 	BB4_11;

	mov.u64 	%rd16, $str8;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, $str2;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r78, 247;
	mov.u64 	%rd20, 0;
	mov.u64 	%rd21, 2;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r78;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd20;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd21;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 17

BB4_11:
	setp.lt.f32	%p11, %f143, 0f3F800000;
	mul.f32 	%f74, %f143, 0f40B00000;
	selp.f32	%f75, %f74, 0f40B00000, %p11;
	add.f32 	%f76, %f75, 0fC2700000;
	rcp.rn.f32 	%f77, %f76;
	mov.f32 	%f78, 0fC2700000;
	div.rn.f32 	%f79, %f78, %f76;
	fma.rn.f32 	%f80, %f5, %f77, %f79;
	mul.f32 	%f143, %f80, %f143;
	setp.gtu.f32	%p12, %f5, %f75;
	@%p12 bra 	BB4_12;
	bra.uni 	BB4_13;

BB4_12:
	mov.u16 	%rs13, %rs14;
	bra.uni 	BB4_14;

BB4_4:
	mov.u16 	%rs13, %rs14;
	bra.uni 	BB4_14;

BB4_13:
	cvt.f64.f32	%fd45, %f143;
	mov.f64 	%fd46, 0d3FF0000000000000;
	max.f64 	%fd47, %fd46, %fd45;
	cvt.rn.f32.f64	%f143, %fd47;
	mov.u16 	%rs13, 1;

BB4_14:
	and.b32  	%r79, %r48, 8;
	setp.eq.s32	%p13, %r79, 0;
	mov.f32 	%f152, 0f00000000;
	@%p13 bra 	BB4_15;

	sub.s32 	%r80, %r47, %r5;
	cvt.rn.f64.u32	%fd48, %r80;
	cvt.rn.f64.u32	%fd49, %r46;
	cvt.rn.f64.u32	%fd50, %r4;
	div.rn.f64 	%fd51, %fd50, %fd49;
	cvt.rn.f64.u32	%fd52, %r47;
	div.rn.f64 	%fd53, %fd48, %fd52;
	sub.f64 	%fd54, %fd39, %fd1;
	sub.f64 	%fd55, %fd2, %fd38;
	fma.rn.f64 	%fd56, %fd54, %fd51, %fd1;
	fma.rn.f64 	%fd57, %fd55, %fd53, %fd38;
	sub.f64 	%fd58, %fd56, %fd41;
	sub.f64 	%fd59, %fd57, %fd42;
	sub.f64 	%fd60, %fd43, %fd41;
	div.rn.f64 	%fd61, %fd58, %fd60;
	sub.f64 	%fd62, %fd44, %fd42;
	div.rn.f64 	%fd63, %fd59, %fd62;
	cvt.rn.f32.f64	%f83, %fd61;
	cvt.rn.f32.f64	%f84, %fd63;
	cvt.rn.f32.u32	%f85, %r46;
	mul.f32 	%f9, %f85, %f83;
	cvt.rn.f32.u32	%f86, %r47;
	mul.f32 	%f87, %f86, %f84;
	sub.f32 	%f10, %f86, %f87;
	abs.f32 	%f88, %f9;
	mov.b32 	 %r81, %f9;
	and.b32  	%r82, %r81, -2147483648;
	or.b32  	%r83, %r82, 1056964608;
	mov.b32 	 %f89, %r83;
	add.f32 	%f90, %f9, %f89;
	cvt.rzi.f32.f32	%f91, %f90;
	setp.gt.f32	%p14, %f88, 0f4B000000;
	selp.f32	%f144, %f9, %f91, %p14;
	setp.geu.f32	%p15, %f88, 0f3F000000;
	@%p15 bra 	BB4_18;

	cvt.rzi.f32.f32	%f144, %f9;

BB4_18:
	cvt.rzi.s32.f32	%r8, %f144;
	mov.b32 	 %r84, %f10;
	and.b32  	%r85, %r84, -2147483648;
	or.b32  	%r86, %r85, 1056964608;
	mov.b32 	 %f92, %r86;
	add.f32 	%f93, %f10, %f92;
	cvt.rzi.f32.f32	%f94, %f93;
	abs.f32 	%f95, %f10;
	setp.gt.f32	%p16, %f95, 0f4B000000;
	selp.f32	%f145, %f10, %f94, %p16;
	setp.geu.f32	%p17, %f95, 0f3F000000;
	@%p17 bra 	BB4_20;

	cvt.rzi.f32.f32	%f145, %f10;

BB4_20:
	add.s32 	%r87, %r46, -2;
	setp.lt.u32	%p18, %r8, %r87;
	setp.gt.s32	%p19, %r8, 1;
	and.pred  	%p20, %p19, %p18;
	cvt.rzi.s32.f32	%r88, %f145;
	setp.gt.s32	%p21, %r88, 1;
	and.pred  	%p22, %p20, %p21;
	add.s32 	%r89, %r47, -2;
	setp.lt.u32	%p23, %r88, %r89;
	and.pred  	%p24, %p23, %p22;
	mov.f32 	%f147, %f152;
	@!%p24 bra 	BB4_22;
	bra.uni 	BB4_21;

BB4_21:
	cvt.rmi.f32.f32	%f98, %f9;
	cvt.rzi.u32.f32	%r90, %f98;
	cvt.rmi.f32.f32	%f99, %f10;
	cvt.rzi.u32.f32	%r91, %f99;
	cvt.rn.f32.u32	%f100, %r90;
	sub.f32 	%f101, %f9, %f100;
	cvt.rn.f32.u32	%f102, %r91;
	sub.f32 	%f103, %f10, %f102;
	mul.lo.s32 	%r92, %r91, %r49;
	cvt.u64.u32	%rd22, %r92;
	cvta.to.global.u64 	%rd23, %rd3;
	add.s64 	%rd24, %rd23, %rd22;
	mul.wide.u32 	%rd25, %r90, 16;
	add.s64 	%rd26, %rd24, %rd25;
	add.s32 	%r93, %r90, 1;
	mul.wide.u32 	%rd27, %r93, 16;
	add.s64 	%rd28, %rd24, %rd27;
	add.s32 	%r94, %r91, 1;
	mul.lo.s32 	%r95, %r94, %r49;
	cvt.u64.u32	%rd29, %r95;
	add.s64 	%rd30, %rd23, %rd29;
	add.s64 	%rd31, %rd30, %rd25;
	add.s64 	%rd32, %rd30, %rd27;
	mov.f32 	%f104, 0f3F800000;
	sub.f32 	%f105, %f104, %f101;
	ld.global.f32 	%f106, [%rd26];
	ld.global.f32 	%f107, [%rd28];
	mul.f32 	%f108, %f101, %f107;
	fma.rn.f32 	%f109, %f106, %f105, %f108;
	sub.f32 	%f110, %f104, %f103;
	ld.global.f32 	%f111, [%rd31];
	ld.global.f32 	%f112, [%rd32];
	mul.f32 	%f113, %f101, %f112;
	fma.rn.f32 	%f114, %f105, %f111, %f113;
	mul.f32 	%f115, %f103, %f114;
	fma.rn.f32 	%f152, %f110, %f109, %f115;
	ld.global.f32 	%f116, [%rd26+4];
	ld.global.f32 	%f117, [%rd28+4];
	mul.f32 	%f118, %f101, %f117;
	fma.rn.f32 	%f119, %f105, %f116, %f118;
	ld.global.f32 	%f120, [%rd31+4];
	ld.global.f32 	%f121, [%rd32+4];
	mul.f32 	%f122, %f101, %f121;
	fma.rn.f32 	%f123, %f105, %f120, %f122;
	mul.f32 	%f124, %f103, %f123;
	fma.rn.f32 	%f147, %f110, %f119, %f124;
	cvt.f64.f32	%fd64, %f147;
	setp.geu.f64	%p25, %fd64, 0d3FB999999999999A;
	selp.u16	%rs14, 1, 0, %p25;
	bra.uni 	BB4_22;

BB4_15:
	mov.f32 	%f147, %f152;

BB4_22:
	setp.eq.s16	%p26, %rs14, 0;
	@%p26 bra 	BB4_50;

	shr.u32 	%r96, %r48, 5;
	and.b32  	%r97, %r96, 1;
	setp.eq.b32	%p27, %r97, 1;
	not.pred 	%p28, %p27;
	setp.eq.s16	%p29, %rs13, 0;
	mov.f32 	%f154, 0f00000000;
	mov.u16 	%rs15, 1;
	or.pred  	%p30, %p29, %p28;
	@%p30 bra 	BB4_74;

	setp.lt.f32	%p31, %f143, 0f3F800000;
	mov.f32 	%f154, 0f00000000;
	mov.f32 	%f150, %f154;
	@%p31 bra 	BB4_49;

	abs.f32 	%f128, %f143;
	mov.b32 	 %r98, %f143;
	and.b32  	%r99, %r98, -2147483648;
	or.b32  	%r100, %r99, 1056964608;
	mov.b32 	 %f129, %r100;
	add.f32 	%f130, %f143, %f129;
	cvt.rzi.f32.f32	%f131, %f130;
	setp.gt.f32	%p32, %f128, 0f4B000000;
	selp.f32	%f148, %f143, %f131, %p32;
	setp.geu.f32	%p33, %f128, 0f3F000000;
	@%p33 bra 	BB4_27;

	cvt.rzi.f32.f32	%f148, %f143;

BB4_27:
	cvt.rzi.u32.f32	%r101, %f148;
	mov.u32 	%r102, 64;
	min.u32 	%r9, %r102, %r101;
	cvt.rn.f64.u32	%fd65, %r46;
	sub.f64 	%fd66, %fd39, %fd1;
	div.rn.f64 	%fd5, %fd66, %fd65;
	cvt.rn.f64.u32	%fd67, %r47;
	sub.f64 	%fd68, %fd2, %fd38;
	div.rn.f64 	%fd6, %fd68, %fd67;
	setp.lt.u32	%p34, %r9, 65;
	@%p34 bra 	BB4_29;

	mov.u64 	%rd33, $str11;
	cvta.global.u64 	%rd34, %rd33;
	mov.u64 	%rd35, $str2;
	cvta.global.u64 	%rd36, %rd35;
	mov.u32 	%r103, 113;
	mov.u64 	%rd37, 0;
	mov.u64 	%rd38, 2;
	// Callseq Start 18
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd34;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd36;
	.param .b32 param2;
	st.param.b32	[param2+0], %r103;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd37;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd38;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 18

BB4_29:
	setp.eq.s32	%p35, %r9, 0;
	mov.u32 	%r202, 0;
	mov.u32 	%r201, %r202;
	@%p35 bra 	BB4_48;

	cvt.rn.f64.u32	%fd7, %r4;
	cvt.rn.f64.u32	%fd8, %r5;
	ld.const.u32 	%r108, [amplifier];
	cvt.rn.f64.s32	%fd9, %r108;
	mov.u32 	%r194, 0;
	mov.u32 	%r202, %r194;
	mov.u32 	%r201, %r9;

BB4_31:
	mov.u32 	%r12, %r201;
	mov.u32 	%r10, %r194;
	cvt.rn.f64.u32	%fd69, %r12;
	cvt.rn.f64.u32	%fd70, %r10;
	div.rn.f64 	%fd71, %fd70, %fd69;
	add.f64 	%fd72, %fd7, %fd71;
	add.f64 	%fd73, %fd8, %fd71;
	neg.f64 	%fd74, %fd73;
	fma.rn.f64 	%fd75, %fd5, %fd72, %fd1;
	fma.rn.f64 	%fd76, %fd6, %fd74, %fd2;
	abs.f64 	%fd77, %fd75;
	abs.f64 	%fd78, %fd76;
	add.f64 	%fd79, %fd77, %fd78;
	mul.f64 	%fd80, %fd79, %fd9;
	cvt.rzi.s32.f64	%r109, %fd80;
	cvt.rn.f32.s32	%f132, %r109;
	cvt.rzi.u32.f32	%r13, %f132;
	add.s32 	%r202, %r13, %r202;
	setp.gt.u32	%p36, %r10, 9;
	@%p36 bra 	BB4_33;

	add.u64 	%rd39, %SP, 0;
	cvta.to.local.u64 	%rd40, %rd39;
	mul.wide.u32 	%rd41, %r10, 4;
	add.s64 	%rd42, %rd40, %rd41;
	st.local.u32 	[%rd42], %r13;

BB4_33:
	setp.lt.u32	%p37, %r10, 10;
	and.b32  	%r110, %r48, 1;
	setp.eq.b32	%p38, %r110, 1;
	setp.ne.s32	%p39, %r10, 0;
	and.pred  	%p40, %p37, %p39;
	and.pred  	%p41, %p40, %p38;
	shr.u32 	%r111, %r12, 1;
	setp.eq.s32	%p42, %r10, %r111;
	or.pred  	%p43, %p41, %p42;
	add.s32 	%r194, %r10, 1;
	mov.u32 	%r201, %r12;
	@!%p43 bra 	BB4_47;
	bra.uni 	BB4_34;

BB4_34:
	div.u32 	%r112, %r202, %r194;
	cvt.rn.f64.u32	%fd10, %r112;
	setp.eq.s32	%p44, %r10, 0;
	mov.f64 	%fd148, 0d0000000000000000;
	@%p44 bra 	BB4_43;

	and.b32  	%r114, %r10, 3;
	setp.eq.s32	%p45, %r114, 0;
	mov.f64 	%fd148, 0d0000000000000000;
	mov.u32 	%r200, 0;
	@%p45 bra 	BB4_41;

	setp.eq.s32	%p46, %r114, 1;
	mov.f64 	%fd145, 0d0000000000000000;
	mov.u32 	%r198, 0;
	@%p46 bra 	BB4_40;

	setp.eq.s32	%p47, %r114, 2;
	mov.f64 	%fd144, 0d0000000000000000;
	mov.u32 	%r197, 0;
	@%p47 bra 	BB4_39;

	add.u64 	%rd43, %SP, 0;
	cvta.to.local.u64 	%rd44, %rd43;
	ld.local.u32 	%r120, [%rd44];
	cvt.rn.f64.u32	%fd85, %r120;
	sub.f64 	%fd86, %fd85, %fd10;
	fma.rn.f64 	%fd144, %fd86, %fd86, 0d0000000000000000;
	mov.u32 	%r197, 1;

BB4_39:
	add.u64 	%rd45, %SP, 0;
	cvta.to.local.u64 	%rd46, %rd45;
	mul.wide.u32 	%rd47, %r197, 4;
	add.s64 	%rd48, %rd46, %rd47;
	ld.local.u32 	%r121, [%rd48];
	cvt.rn.f64.u32	%fd87, %r121;
	sub.f64 	%fd88, %fd87, %fd10;
	fma.rn.f64 	%fd145, %fd88, %fd88, %fd144;
	add.s32 	%r198, %r197, 1;

BB4_40:
	add.u64 	%rd49, %SP, 0;
	cvta.to.local.u64 	%rd50, %rd49;
	mul.wide.u32 	%rd51, %r198, 4;
	add.s64 	%rd52, %rd50, %rd51;
	ld.local.u32 	%r122, [%rd52];
	cvt.rn.f64.u32	%fd89, %r122;
	sub.f64 	%fd90, %fd89, %fd10;
	fma.rn.f64 	%fd148, %fd90, %fd90, %fd145;
	add.s32 	%r200, %r198, 1;

BB4_41:
	setp.lt.u32	%p48, %r10, 4;
	@%p48 bra 	BB4_43;

BB4_42:
	add.u64 	%rd53, %SP, 0;
	cvta.to.local.u64 	%rd54, %rd53;
	mul.wide.u32 	%rd55, %r200, 4;
	add.s64 	%rd56, %rd54, %rd55;
	ld.local.u32 	%r123, [%rd56];
	cvt.rn.f64.u32	%fd91, %r123;
	sub.f64 	%fd92, %fd91, %fd10;
	fma.rn.f64 	%fd93, %fd92, %fd92, %fd148;
	add.s32 	%r124, %r200, 1;
	mul.wide.u32 	%rd57, %r124, 4;
	add.s64 	%rd58, %rd54, %rd57;
	ld.local.u32 	%r125, [%rd58];
	cvt.rn.f64.u32	%fd94, %r125;
	sub.f64 	%fd95, %fd94, %fd10;
	fma.rn.f64 	%fd96, %fd95, %fd95, %fd93;
	add.s32 	%r126, %r200, 2;
	mul.wide.u32 	%rd59, %r126, 4;
	add.s64 	%rd60, %rd54, %rd59;
	ld.local.u32 	%r127, [%rd60];
	cvt.rn.f64.u32	%fd97, %r127;
	sub.f64 	%fd98, %fd97, %fd10;
	fma.rn.f64 	%fd99, %fd98, %fd98, %fd96;
	add.s32 	%r128, %r200, 3;
	mul.wide.u32 	%rd61, %r128, 4;
	add.s64 	%rd62, %rd54, %rd61;
	ld.local.u32 	%r129, [%rd62];
	cvt.rn.f64.u32	%fd100, %r129;
	sub.f64 	%fd101, %fd100, %fd10;
	fma.rn.f64 	%fd148, %fd101, %fd101, %fd99;
	add.s32 	%r200, %r200, 4;
	setp.lt.u32	%p49, %r200, %r10;
	@%p49 bra 	BB4_42;

BB4_43:
	add.s32 	%r130, %r10, -1;
	cvt.rn.f64.u32	%fd102, %r130;
	div.rn.f64 	%fd103, %fd148, %fd102;
	div.rn.f64 	%fd20, %fd103, %fd10;
	setp.ne.s32	%p50, %r10, 1;
	@%p50 bra 	BB4_45;

	// inline asm
	activemask.b32 %r131;
	// inline asm
	add.u64 	%rd63, %SP, 0;
	cvta.to.local.u64 	%rd64, %rd63;
	ld.local.v2.u32 	{%r133, %r134}, [%rd64];
	setp.eq.s32	%p51, %r133, %r134;
	vote.sync.all.pred 	%p52, %p51, %r131;
	mov.u32 	%r201, 2;
	@%p52 bra 	BB4_47;

BB4_45:
	// inline asm
	activemask.b32 %r138;
	// inline asm
	setp.lt.f64	%p53, %fd20, 0d3F847AE140000000;
	vote.sync.all.pred 	%p54, %p53, %r138;
	mov.u32 	%r201, %r194;
	@%p54 bra 	BB4_47;

	// inline asm
	activemask.b32 %r140;
	// inline asm
	setp.le.f64	%p55, %fd20, 0d3FF0000000000000;
	vote.sync.all.pred 	%p56, %p55, %r140;
	setp.ge.u32	%p57, %r10, %r111;
	and.pred  	%p58, %p56, %p57;
	selp.b32	%r201, %r194, %r12, %p58;

BB4_47:
	setp.lt.u32	%p59, %r194, %r201;
	@%p59 bra 	BB4_31;

BB4_48:
	cvt.rn.f32.u32	%f154, %r201;
	div.u32 	%r143, %r202, %r201;
	cvt.rn.f32.u32	%f150, %r143;

BB4_49:
	mul.f32 	%f133, %f147, 0f3F400000;
	add.f32 	%f147, %f133, %f154;
	mul.f32 	%f134, %f154, %f150;
	fma.rn.f32 	%f135, %f152, %f133, %f134;
	div.rn.f32 	%f152, %f135, %f147;
	mov.f32 	%f143, %f154;
	bra.uni 	BB4_74;

BB4_50:
	setp.lt.f32	%p60, %f143, 0f3F800000;
	selp.f32	%f30, 0f3F800000, %f143, %p60;
	abs.f32 	%f136, %f30;
	mov.b32 	 %r144, %f30;
	and.b32  	%r145, %r144, -2147483648;
	or.b32  	%r146, %r145, 1056964608;
	mov.b32 	 %f137, %r146;
	add.f32 	%f138, %f30, %f137;
	cvt.rzi.f32.f32	%f139, %f138;
	setp.gt.f32	%p61, %f136, 0f4B000000;
	selp.f32	%f151, %f30, %f139, %p61;
	setp.geu.f32	%p62, %f136, 0f3F000000;
	@%p62 bra 	BB4_52;

	cvt.rzi.f32.f32	%f151, %f30;

BB4_52:
	cvt.rzi.u32.f32	%r147, %f151;
	mov.u32 	%r148, 64;
	min.u32 	%r27, %r148, %r147;
	cvt.rn.f64.u32	%fd104, %r46;
	sub.f64 	%fd105, %fd39, %fd1;
	div.rn.f64 	%fd21, %fd105, %fd104;
	cvt.rn.f64.u32	%fd106, %r47;
	sub.f64 	%fd107, %fd2, %fd38;
	div.rn.f64 	%fd22, %fd107, %fd106;
	setp.lt.u32	%p63, %r27, 65;
	@%p63 bra 	BB4_54;

	mov.u64 	%rd65, $str11;
	cvta.global.u64 	%rd66, %rd65;
	mov.u64 	%rd67, $str2;
	cvta.global.u64 	%rd68, %rd67;
	mov.u32 	%r149, 113;
	mov.u64 	%rd69, 0;
	mov.u64 	%rd70, 2;
	// Callseq Start 19
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd66;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd68;
	.param .b32 param2;
	st.param.b32	[param2+0], %r149;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd69;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd70;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 19

BB4_54:
	setp.eq.s32	%p64, %r27, 0;
	mov.u32 	%r212, 0;
	mov.u32 	%r211, %r212;
	@%p64 bra 	BB4_73;

	cvt.rn.f64.u32	%fd23, %r4;
	cvt.rn.f64.u32	%fd24, %r5;
	ld.const.u32 	%r154, [amplifier];
	cvt.rn.f64.s32	%fd25, %r154;
	mov.u32 	%r204, 0;
	mov.u32 	%r212, %r204;
	mov.u32 	%r211, %r27;

BB4_56:
	mov.u32 	%r30, %r211;
	mov.u32 	%r28, %r204;
	cvt.rn.f64.u32	%fd108, %r30;
	cvt.rn.f64.u32	%fd109, %r28;
	div.rn.f64 	%fd110, %fd109, %fd108;
	add.f64 	%fd111, %fd23, %fd110;
	add.f64 	%fd112, %fd24, %fd110;
	neg.f64 	%fd113, %fd112;
	fma.rn.f64 	%fd114, %fd21, %fd111, %fd1;
	fma.rn.f64 	%fd115, %fd22, %fd113, %fd2;
	abs.f64 	%fd116, %fd114;
	abs.f64 	%fd117, %fd115;
	add.f64 	%fd118, %fd116, %fd117;
	mul.f64 	%fd119, %fd118, %fd25;
	cvt.rzi.s32.f64	%r155, %fd119;
	cvt.rn.f32.s32	%f140, %r155;
	cvt.rzi.u32.f32	%r31, %f140;
	add.s32 	%r212, %r31, %r212;
	setp.gt.u32	%p65, %r28, 9;
	@%p65 bra 	BB4_58;

	add.u64 	%rd71, %SP, 0;
	cvta.to.local.u64 	%rd72, %rd71;
	mul.wide.u32 	%rd73, %r28, 4;
	add.s64 	%rd74, %rd72, %rd73;
	st.local.u32 	[%rd74], %r31;

BB4_58:
	setp.lt.u32	%p66, %r28, 10;
	and.b32  	%r156, %r48, 1;
	setp.eq.b32	%p67, %r156, 1;
	setp.ne.s32	%p68, %r28, 0;
	and.pred  	%p69, %p66, %p68;
	and.pred  	%p70, %p69, %p67;
	shr.u32 	%r157, %r30, 1;
	setp.eq.s32	%p71, %r28, %r157;
	or.pred  	%p72, %p70, %p71;
	add.s32 	%r204, %r28, 1;
	mov.u32 	%r211, %r30;
	@!%p72 bra 	BB4_72;
	bra.uni 	BB4_59;

BB4_59:
	div.u32 	%r158, %r212, %r204;
	cvt.rn.f64.u32	%fd26, %r158;
	setp.eq.s32	%p73, %r28, 0;
	mov.f64 	%fd153, 0d0000000000000000;
	@%p73 bra 	BB4_68;

	and.b32  	%r160, %r28, 3;
	setp.eq.s32	%p74, %r160, 0;
	mov.f64 	%fd153, 0d0000000000000000;
	mov.u32 	%r210, 0;
	@%p74 bra 	BB4_66;

	setp.eq.s32	%p75, %r160, 1;
	mov.f64 	%fd150, 0d0000000000000000;
	mov.u32 	%r208, 0;
	@%p75 bra 	BB4_65;

	setp.eq.s32	%p76, %r160, 2;
	mov.f64 	%fd149, 0d0000000000000000;
	mov.u32 	%r207, 0;
	@%p76 bra 	BB4_64;

	add.u64 	%rd75, %SP, 0;
	cvta.to.local.u64 	%rd76, %rd75;
	ld.local.u32 	%r166, [%rd76];
	cvt.rn.f64.u32	%fd124, %r166;
	sub.f64 	%fd125, %fd124, %fd26;
	fma.rn.f64 	%fd149, %fd125, %fd125, 0d0000000000000000;
	mov.u32 	%r207, 1;

BB4_64:
	add.u64 	%rd77, %SP, 0;
	cvta.to.local.u64 	%rd78, %rd77;
	mul.wide.u32 	%rd79, %r207, 4;
	add.s64 	%rd80, %rd78, %rd79;
	ld.local.u32 	%r167, [%rd80];
	cvt.rn.f64.u32	%fd126, %r167;
	sub.f64 	%fd127, %fd126, %fd26;
	fma.rn.f64 	%fd150, %fd127, %fd127, %fd149;
	add.s32 	%r208, %r207, 1;

BB4_65:
	add.u64 	%rd81, %SP, 0;
	cvta.to.local.u64 	%rd82, %rd81;
	mul.wide.u32 	%rd83, %r208, 4;
	add.s64 	%rd84, %rd82, %rd83;
	ld.local.u32 	%r168, [%rd84];
	cvt.rn.f64.u32	%fd128, %r168;
	sub.f64 	%fd129, %fd128, %fd26;
	fma.rn.f64 	%fd153, %fd129, %fd129, %fd150;
	add.s32 	%r210, %r208, 1;

BB4_66:
	add.u64 	%rd85, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd85;
	setp.lt.u32	%p77, %r28, 4;
	@%p77 bra 	BB4_68;

BB4_67:
	mul.wide.u32 	%rd86, %r210, 4;
	add.s64 	%rd87, %rd1, %rd86;
	ld.local.u32 	%r169, [%rd87];
	cvt.rn.f64.u32	%fd130, %r169;
	sub.f64 	%fd131, %fd130, %fd26;
	fma.rn.f64 	%fd132, %fd131, %fd131, %fd153;
	add.s32 	%r170, %r210, 1;
	mul.wide.u32 	%rd88, %r170, 4;
	add.s64 	%rd89, %rd1, %rd88;
	ld.local.u32 	%r171, [%rd89];
	cvt.rn.f64.u32	%fd133, %r171;
	sub.f64 	%fd134, %fd133, %fd26;
	fma.rn.f64 	%fd135, %fd134, %fd134, %fd132;
	add.s32 	%r172, %r210, 2;
	mul.wide.u32 	%rd90, %r172, 4;
	add.s64 	%rd91, %rd1, %rd90;
	ld.local.u32 	%r173, [%rd91];
	cvt.rn.f64.u32	%fd136, %r173;
	sub.f64 	%fd137, %fd136, %fd26;
	fma.rn.f64 	%fd138, %fd137, %fd137, %fd135;
	add.s32 	%r174, %r210, 3;
	mul.wide.u32 	%rd92, %r174, 4;
	add.s64 	%rd93, %rd1, %rd92;
	ld.local.u32 	%r175, [%rd93];
	cvt.rn.f64.u32	%fd139, %r175;
	sub.f64 	%fd140, %fd139, %fd26;
	fma.rn.f64 	%fd153, %fd140, %fd140, %fd138;
	add.s32 	%r210, %r210, 4;
	setp.lt.u32	%p78, %r210, %r28;
	@%p78 bra 	BB4_67;

BB4_68:
	add.s32 	%r176, %r28, -1;
	cvt.rn.f64.u32	%fd141, %r176;
	div.rn.f64 	%fd142, %fd153, %fd141;
	div.rn.f64 	%fd36, %fd142, %fd26;
	setp.ne.s32	%p79, %r28, 1;
	@%p79 bra 	BB4_70;

	// inline asm
	activemask.b32 %r177;
	// inline asm
	add.u64 	%rd94, %SP, 0;
	cvta.to.local.u64 	%rd95, %rd94;
	ld.local.v2.u32 	{%r179, %r180}, [%rd95];
	setp.eq.s32	%p80, %r179, %r180;
	vote.sync.all.pred 	%p81, %p80, %r177;
	mov.u32 	%r211, 2;
	@%p81 bra 	BB4_72;

BB4_70:
	// inline asm
	activemask.b32 %r184;
	// inline asm
	setp.lt.f64	%p82, %fd36, 0d3F847AE140000000;
	vote.sync.all.pred 	%p83, %p82, %r184;
	mov.u32 	%r211, %r204;
	@%p83 bra 	BB4_72;

	// inline asm
	activemask.b32 %r186;
	// inline asm
	setp.le.f64	%p84, %fd36, 0d3FF0000000000000;
	vote.sync.all.pred 	%p85, %p84, %r186;
	setp.ge.u32	%p86, %r28, %r157;
	and.pred  	%p87, %p85, %p86;
	selp.b32	%r211, %r204, %r30, %p87;

BB4_72:
	setp.lt.u32	%p88, %r204, %r211;
	@%p88 bra 	BB4_56;

BB4_73:
	cvt.rn.f32.u32	%f147, %r211;
	div.u32 	%r189, %r212, %r211;
	cvt.rn.f32.u32	%f152, %r189;
	mov.f32 	%f154, 0f00000000;
	mov.u16 	%rs15, 0;
	mov.f32 	%f143, %f147;

BB4_74:
	setp.eq.s32	%p89, %r51, %r5;
	setp.eq.s32	%p90, %r50, %r4;
	and.pred  	%p91, %p90, %p89;
	@!%p91 bra 	BB4_76;
	bra.uni 	BB4_75;

BB4_75:
	cvt.f64.f32	%fd143, %f143;
	add.u64 	%rd96, %SP, 40;
	cvta.to.local.u64 	%rd97, %rd96;
	st.local.f64 	[%rd97], %fd143;
	cvt.u32.u16	%r190, %rs14;
	st.local.u32 	[%rd97+8], %r190;
	mov.u64 	%rd98, $str9;
	cvta.global.u64 	%rd99, %rd98;
	// Callseq Start 20
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd99;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd96;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r191, [retval0+0];
	
	//{
	}// Callseq End 20

BB4_76:
	cvta.to.global.u64 	%rd100, %rd2;
	mul.lo.s32 	%r192, %r5, %r45;
	cvt.u64.u32	%rd101, %r192;
	add.s64 	%rd102, %rd100, %rd101;
	mul.wide.u32 	%rd103, %r4, 16;
	add.s64 	%rd104, %rd102, %rd103;
	st.global.f32 	[%rd104], %f152;
	st.global.f32 	[%rd104+4], %f147;
	st.global.f32 	[%rd104+12], %f154;
	st.global.u8 	[%rd104+8], %rs15;
	setp.gt.f32	%p92, %f147, 0f00000000;
	@%p92 bra 	BB4_78;

	mov.u64 	%rd105, $str10;
	cvta.global.u64 	%rd106, %rd105;
	mov.u64 	%rd107, $str2;
	cvta.global.u64 	%rd108, %rd107;
	mov.u32 	%r193, 364;
	mov.u64 	%rd109, 0;
	mov.u64 	%rd110, 2;
	// Callseq Start 21
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd106;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd108;
	.param .b32 param2;
	st.param.b32	[param2+0], %r193;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd109;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd110;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 21

BB4_78:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .f32 compose_param_9
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<20>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r11, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r13, [compose_param_5];
	ld.param.u32 	%r14, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r12, [compose_param_8];
	ld.param.f32 	%f6, [compose_param_9];
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r1, %r16, %r15, %r17;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %tid.y;
	mad.lo.s32 	%r2, %r18, %r19, %r20;
	setp.ge.u32	%p1, %r2, %r14;
	setp.ge.u32	%p2, %r1, %r13;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_11;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r21, %r2, %r11;
	cvt.u64.u32	%rd6, %r21;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.u32 	%rd8, %r1, 16;
	add.s64 	%rd9, %rd7, %rd8;
	add.s64 	%rd1, %rd9, 12;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	@%p4 bra 	BB5_5;

	ld.global.f32 	%f7, [%rd1+-8];
	cvt.rzi.u32.f32	%r22, %f7;
	cvt.rzi.u32.f32	%r3, %f6;
	min.u32 	%r23, %r22, %r3;
	cvt.rn.f32.u32	%f8, %r23;
	cvt.rn.f32.u32	%f1, %r3;
	div.rn.f32 	%f9, %f8, %f1;
	mul.f32 	%f10, %f9, 0f437F0000;
	cvt.rzi.s32.f32	%r24, %f10;
	and.b32  	%r25, %r24, 255;
	prmt.b32 	%r26, %r25, %r25, 30212;
	prmt.b32 	%r43, %r25, %r26, 28756;
	ld.global.u8 	%rs2, [%rd1+-4];
	setp.eq.s16	%p5, %rs2, 0;
	@%p5 bra 	BB5_4;

	ld.global.f32 	%f11, [%rd1];
	cvt.rzi.u32.f32	%r27, %f11;
	min.u32 	%r28, %r27, %r3;
	cvt.rn.f32.u32	%f12, %r28;
	div.rn.f32 	%f13, %f12, %f1;
	mul.f32 	%f14, %f13, 0f437F0000;
	cvt.rzi.s32.f32	%r29, %f14;
	and.b32  	%r30, %r29, 255;
	prmt.b32 	%r31, %r30, %r30, 30212;
	prmt.b32 	%r43, %r30, %r31, 28756;

BB5_4:
	or.b32  	%r44, %r43, -16777216;
	bra.uni 	BB5_10;

BB5_5:
	ld.global.f32 	%f2, [%rd1+-12];
	abs.f32 	%f15, %f2;
	mov.b32 	 %r32, %f2;
	and.b32  	%r33, %r32, -2147483648;
	or.b32  	%r34, %r33, 1056964608;
	mov.b32 	 %f16, %r34;
	add.f32 	%f17, %f2, %f16;
	cvt.rzi.f32.f32	%f18, %f17;
	setp.gt.f32	%p6, %f15, 0f4B000000;
	selp.f32	%f19, %f2, %f18, %p6;
	setp.geu.f32	%p7, %f15, 0f3F000000;
	@%p7 bra 	BB5_7;

	cvt.rzi.f32.f32	%f19, %f2;

BB5_7:
	cvt.rzi.u32.f32	%r35, %f19;
	shl.b32 	%r36, %r35, 7;
	rem.u32 	%r37, %r36, %r12;
	sub.s32 	%r38, %r12, %r37;
	add.s32 	%r8, %r38, -1;
	setp.lt.u32	%p8, %r8, %r12;
	@%p8 bra 	BB5_9;

	mov.u64 	%rd10, $str12;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str13;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r39, 20;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 22
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r39;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 22

BB5_9:
	shl.b32 	%r40, %r8, 2;
	mov.u32 	%r41, 0;
	suld.b.2d.b32.trap {%r44}, [%rd4, {%r40, %r41}];

BB5_10:
	shl.b32 	%r42, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r42, %r2}], {%r44};

BB5_11:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r9, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r10, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r11, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f4, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f5, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f6, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f7, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r16, %r14, %r13, %r15;
	mul.lo.s32 	%r1, %r16, %r12;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %ntid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r20, %r17, %r18, %r19;
	mul.lo.s32 	%r2, %r20, %r12;
	sub.s32 	%r21, %r11, %r12;
	setp.ge.u32	%p1, %r2, %r21;
	sub.s32 	%r22, %r10, %r12;
	setp.ge.u32	%p2, %r1, %r22;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_10;

	sub.f32 	%f8, %f6, %f4;
	cvt.rn.f32.u32	%f9, %r10;
	div.rn.f32 	%f10, %f8, %f9;
	cvt.rn.f32.u32	%f11, %r1;
	fma.rn.f32 	%f1, %f11, %f10, %f4;
	setp.eq.s32	%p4, %r12, 0;
	@%p4 bra 	BB6_10;

	ld.const.u32 	%r27, [amplifier];
	cvt.rn.f32.s32	%f12, %r27;
	cvt.rn.f32.u32	%f13, %r2;
	sub.f32 	%f14, %f7, %f5;
	cvt.rn.f32.u32	%f15, %r11;
	div.rn.f32 	%f16, %f14, %f15;
	mul.f32 	%f17, %f13, %f16;
	sub.f32 	%f18, %f7, %f17;
	abs.f32 	%f19, %f18;
	abs.f32 	%f20, %f1;
	add.f32 	%f21, %f20, %f19;
	mul.f32 	%f22, %f21, %f12;
	cvt.rzi.s32.f32	%r28, %f22;
	cvt.rn.f32.s32	%f23, %r28;
	cvt.rzi.u32.f32	%r29, %f23;
	mul.lo.s32 	%r30, %r2, %r9;
	cvt.u64.u32	%rd3, %r30;
	cvta.to.global.u64 	%rd4, %rd2;
	add.s64 	%rd5, %rd4, %rd3;
	cvt.rn.f32.u32	%f24, %r12;
	rcp.rn.f32 	%f2, %f24;
	cvt.rn.f32.u32	%f3, %r29;
	mul.wide.u32 	%rd6, %r1, 16;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r26, %r12, 3;
	mov.u32 	%r36, 1;
	mov.u32 	%r39, 0;
	setp.eq.s32	%p5, %r26, 0;
	@%p5 bra 	BB6_8;

	setp.eq.s32	%p6, %r26, 1;
	mov.u32 	%r37, %r39;
	@%p6 bra 	BB6_7;

	setp.eq.s32	%p7, %r26, 2;
	@%p7 bra 	BB6_6;

	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r32, 0;
	st.global.u32 	[%rd1+12], %r32;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd1+8], %rs1;
	mov.u32 	%r36, 2;

BB6_6:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r33, 0;
	st.global.u32 	[%rd1+12], %r33;
	mov.u16 	%rs2, 0;
	st.global.u8 	[%rd1+8], %rs2;
	mov.u32 	%r37, %r36;

BB6_7:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	st.global.u32 	[%rd1+12], %r39;
	mov.u16 	%rs3, 0;
	st.global.u8 	[%rd1+8], %rs3;
	add.s32 	%r39, %r37, 1;

BB6_8:
	setp.lt.u32	%p8, %r12, 4;
	@%p8 bra 	BB6_10;

BB6_9:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r35, 0;
	st.global.u32 	[%rd1+12], %r35;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd1+8], %rs4;
	add.s32 	%r39, %r39, 4;
	setp.lt.u32	%p9, %r39, %r12;
	@%p9 bra 	BB6_9;

BB6_10:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 23
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 23

BB7_2:
	ret;
}


