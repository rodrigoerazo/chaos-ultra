//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 4 .u32 amplifier;
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 ZOOMING_IN_FLAG_MASK = 32;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[17] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 116, 101, 115, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str8[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str9[120] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .f32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<89>;
	.reg .b32 	%r<103>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r24, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f31, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderMainFloat_param_3];
	ld.param.f32 	%f33, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 59;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r25;
	setp.lt.u32	%p3, %r5, %r26;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_31;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.f32	%p5, %f33, 0f3F800000;
	mov.f32 	%f86, 0f00000000;
	mov.f32 	%f88, %f86;
	@%p5 bra 	BB1_29;

	abs.f32 	%f36, %f33;
	mov.b32 	 %r46, %f33;
	and.b32  	%r47, %r46, -2147483648;
	or.b32  	%r48, %r47, 1056964608;
	mov.b32 	 %f37, %r48;
	add.f32 	%f38, %f37, %f33;
	cvt.rzi.f32.f32	%f39, %f38;
	setp.gt.f32	%p6, %f36, 0f4B000000;
	selp.f32	%f79, %f33, %f39, %p6;
	setp.geu.f32	%p7, %f36, 0f3F000000;
	@%p7 bra 	BB1_6;

	cvt.rzi.f32.f32	%f79, %f33;

BB1_6:
	cvt.rzi.u32.f32	%r100, %f79;
	setp.lt.u32	%p8, %r100, 65;
	@%p8 bra 	BB1_8;

	mov.u64 	%rd8, $str7;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r49, 113;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_8:
	setp.eq.s32	%p9, %r100, 0;
	cvt.rn.f32.u32	%f86, %r100;
	mov.u32 	%r101, 0;
	@%p9 bra 	BB1_9;

	cvt.rn.f32.u32	%f7, %r4;
	cvt.rn.f32.u32	%f8, %r5;
	ld.const.u32 	%r54, [amplifier];
	cvt.rn.f32.s32	%f9, %r54;
	cvt.rn.f32.u32	%f40, %r25;
	sub.f32 	%f41, %f31, %f1;
	div.rn.f32 	%f10, %f41, %f40;
	cvt.rn.f32.u32	%f42, %r26;
	sub.f32 	%f43, %f2, %f30;
	div.rn.f32 	%f11, %f43, %f42;
	mov.u32 	%r93, 0;
	and.b32  	%r56, %r27, 1;
	mov.u32 	%r101, %r93;

BB1_11:
	mov.u32 	%r9, %r100;
	mov.u32 	%r7, %r93;
	cvt.rn.f32.u32	%f44, %r7;
	div.rn.f32 	%f45, %f44, %f86;
	add.f32 	%f46, %f7, %f45;
	add.f32 	%f47, %f8, %f45;
	neg.f32 	%f48, %f47;
	fma.rn.f32 	%f49, %f10, %f46, %f1;
	fma.rn.f32 	%f50, %f11, %f48, %f2;
	abs.f32 	%f51, %f49;
	abs.f32 	%f52, %f50;
	add.f32 	%f53, %f51, %f52;
	mul.f32 	%f54, %f53, %f9;
	cvt.rzi.s32.f32	%r55, %f54;
	cvt.rn.f32.s32	%f55, %r55;
	cvt.rzi.u32.f32	%r10, %f55;
	add.s32 	%r101, %r10, %r101;
	setp.gt.u32	%p10, %r7, 9;
	@%p10 bra 	BB1_13;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r7, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r10;

BB1_13:
	setp.lt.u32	%p11, %r7, 10;
	setp.eq.b32	%p12, %r56, 1;
	setp.ne.s32	%p13, %r7, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r57, %r9, 1;
	setp.eq.s32	%p16, %r7, %r57;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r93, %r7, 1;
	mov.u32 	%r100, %r9;
	@!%p17 bra 	BB1_27;
	bra.uni 	BB1_14;

BB1_14:
	div.u32 	%r58, %r101, %r93;
	cvt.rn.f32.u32	%f13, %r58;
	setp.eq.s32	%p18, %r7, 0;
	mov.f32 	%f85, 0f00000000;
	@%p18 bra 	BB1_23;

	and.b32  	%r60, %r7, 3;
	setp.eq.s32	%p19, %r60, 0;
	mov.f32 	%f85, 0f00000000;
	mov.u32 	%r99, 0;
	@%p19 bra 	BB1_21;

	setp.eq.s32	%p20, %r60, 1;
	mov.f32 	%f82, 0f00000000;
	mov.u32 	%r97, 0;
	@%p20 bra 	BB1_20;

	setp.eq.s32	%p21, %r60, 2;
	mov.f32 	%f81, 0f00000000;
	mov.u32 	%r96, 0;
	@%p21 bra 	BB1_19;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	ld.local.u32 	%r66, [%rd19];
	cvt.rn.f32.u32	%f60, %r66;
	sub.f32 	%f61, %f60, %f13;
	fma.rn.f32 	%f81, %f61, %f61, 0f00000000;
	mov.u32 	%r96, 1;

BB1_19:
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r96, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.local.u32 	%r67, [%rd23];
	cvt.rn.f32.u32	%f62, %r67;
	sub.f32 	%f63, %f62, %f13;
	fma.rn.f32 	%f82, %f63, %f63, %f81;
	add.s32 	%r97, %r96, 1;

BB1_20:
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	mul.wide.u32 	%rd26, %r97, 4;
	add.s64 	%rd27, %rd25, %rd26;
	ld.local.u32 	%r68, [%rd27];
	cvt.rn.f32.u32	%f64, %r68;
	sub.f32 	%f65, %f64, %f13;
	fma.rn.f32 	%f85, %f65, %f65, %f82;
	add.s32 	%r99, %r97, 1;

BB1_21:
	setp.lt.u32	%p22, %r7, 4;
	@%p22 bra 	BB1_23;

BB1_22:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r99, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.local.u32 	%r69, [%rd31];
	cvt.rn.f32.u32	%f66, %r69;
	sub.f32 	%f67, %f66, %f13;
	fma.rn.f32 	%f68, %f67, %f67, %f85;
	add.s32 	%r70, %r99, 1;
	mul.wide.u32 	%rd32, %r70, 4;
	add.s64 	%rd33, %rd29, %rd32;
	ld.local.u32 	%r71, [%rd33];
	cvt.rn.f32.u32	%f69, %r71;
	sub.f32 	%f70, %f69, %f13;
	fma.rn.f32 	%f71, %f70, %f70, %f68;
	add.s32 	%r72, %r99, 2;
	mul.wide.u32 	%rd34, %r72, 4;
	add.s64 	%rd35, %rd29, %rd34;
	ld.local.u32 	%r73, [%rd35];
	cvt.rn.f32.u32	%f72, %r73;
	sub.f32 	%f73, %f72, %f13;
	fma.rn.f32 	%f74, %f73, %f73, %f71;
	add.s32 	%r74, %r99, 3;
	mul.wide.u32 	%rd36, %r74, 4;
	add.s64 	%rd37, %rd29, %rd36;
	ld.local.u32 	%r75, [%rd37];
	cvt.rn.f32.u32	%f75, %r75;
	sub.f32 	%f76, %f75, %f13;
	fma.rn.f32 	%f85, %f76, %f76, %f74;
	add.s32 	%r99, %r99, 4;
	setp.lt.u32	%p23, %r99, %r7;
	@%p23 bra 	BB1_22;

BB1_23:
	add.s32 	%r76, %r7, -1;
	cvt.rn.f32.u32	%f77, %r76;
	div.rn.f32 	%f78, %f85, %f77;
	div.rn.f32 	%f23, %f78, %f13;
	setp.ne.s32	%p24, %r7, 1;
	@%p24 bra 	BB1_25;

	// inline asm
	activemask.b32 %r77;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r79, %r80}, [%rd39];
	setp.eq.s32	%p25, %r79, %r80;
	vote.sync.all.pred 	%p26, %p25, %r77;
	mov.u32 	%r100, 2;
	@%p26 bra 	BB1_27;

BB1_25:
	// inline asm
	activemask.b32 %r84;
	// inline asm
	setp.lt.f32	%p27, %f23, 0f3C23D70A;
	vote.sync.all.pred 	%p28, %p27, %r84;
	mov.u32 	%r100, %r93;
	@%p28 bra 	BB1_27;

	// inline asm
	activemask.b32 %r86;
	// inline asm
	setp.le.f32	%p29, %f23, 0f3F800000;
	vote.sync.all.pred 	%p30, %p29, %r86;
	setp.ge.u32	%p31, %r7, %r57;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r100, %r93, %r9, %p32;

BB1_27:
	cvt.rn.f32.u32	%f86, %r100;
	setp.lt.u32	%p33, %r93, %r100;
	@%p33 bra 	BB1_11;
	bra.uni 	BB1_28;

BB1_9:
	mov.u32 	%r100, %r101;

BB1_28:
	div.u32 	%r89, %r101, %r100;
	cvt.rn.f32.u32	%f88, %r89;

BB1_29:
	mul.lo.s32 	%r90, %r5, %r24;
	cvt.u64.u32	%rd40, %r90;
	cvta.to.global.u64 	%rd41, %rd1;
	add.s64 	%rd42, %rd41, %rd40;
	mul.wide.u32 	%rd43, %r4, 16;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f88;
	st.global.f32 	[%rd44+4], %f86;
	mov.u32 	%r91, 0;
	st.global.u32 	[%rd44+12], %r91;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd44+8], %rs1;
	setp.gt.f32	%p34, %f86, 0f00000000;
	@%p34 bra 	BB1_31;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r92, 202;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r92;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_31:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .f32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<103>;
	.reg .f64 	%fd<67>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r24, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd21, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd20, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderMainDouble_param_3];
	ld.param.f32 	%f8, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 59;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r25;
	setp.lt.u32	%p3, %r5, %r26;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_30;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.f32	%p5, %f8, 0f3F800000;
	mov.f32 	%f17, 0f00000000;
	mov.f32 	%f18, %f17;
	@%p5 bra 	BB2_28;

	abs.f32 	%f11, %f8;
	mov.b32 	 %r46, %f8;
	and.b32  	%r47, %r46, -2147483648;
	or.b32  	%r48, %r47, 1056964608;
	mov.b32 	 %f12, %r48;
	add.f32 	%f13, %f12, %f8;
	cvt.rzi.f32.f32	%f14, %f13;
	setp.gt.f32	%p6, %f11, 0f4B000000;
	selp.f32	%f16, %f8, %f14, %p6;
	setp.geu.f32	%p7, %f11, 0f3F000000;
	@%p7 bra 	BB2_6;

	cvt.rzi.f32.f32	%f16, %f8;

BB2_6:
	cvt.rzi.u32.f32	%r6, %f16;
	setp.lt.u32	%p8, %r6, 65;
	@%p8 bra 	BB2_8;

	mov.u64 	%rd8, $str7;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r49, 113;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_8:
	setp.eq.s32	%p9, %r6, 0;
	mov.u32 	%r101, 0;
	mov.u32 	%r100, %r101;
	@%p9 bra 	BB2_27;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.u32 	%r54, [amplifier];
	cvt.rn.f64.s32	%fd5, %r54;
	cvt.rn.f64.u32	%fd23, %r25;
	sub.f64 	%fd24, %fd21, %fd1;
	div.rn.f64 	%fd6, %fd24, %fd23;
	cvt.rn.f64.u32	%fd25, %r26;
	sub.f64 	%fd26, %fd2, %fd20;
	div.rn.f64 	%fd7, %fd26, %fd25;
	mov.u32 	%r93, 0;
	and.b32  	%r56, %r27, 1;
	mov.u32 	%r101, %r93;
	mov.u32 	%r100, %r6;

BB2_10:
	mov.u32 	%r9, %r100;
	mov.u32 	%r7, %r93;
	cvt.rn.f64.u32	%fd27, %r9;
	cvt.rn.f64.u32	%fd28, %r7;
	div.rn.f64 	%fd29, %fd28, %fd27;
	add.f64 	%fd30, %fd3, %fd29;
	add.f64 	%fd31, %fd4, %fd29;
	neg.f64 	%fd32, %fd31;
	fma.rn.f64 	%fd33, %fd6, %fd30, %fd1;
	fma.rn.f64 	%fd34, %fd7, %fd32, %fd2;
	abs.f64 	%fd35, %fd33;
	abs.f64 	%fd36, %fd34;
	add.f64 	%fd37, %fd35, %fd36;
	mul.f64 	%fd38, %fd37, %fd5;
	cvt.rzi.s32.f64	%r55, %fd38;
	cvt.rn.f32.s32	%f15, %r55;
	cvt.rzi.u32.f32	%r10, %f15;
	add.s32 	%r101, %r10, %r101;
	setp.gt.u32	%p10, %r7, 9;
	@%p10 bra 	BB2_12;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r7, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r10;

BB2_12:
	setp.lt.u32	%p11, %r7, 10;
	setp.eq.b32	%p12, %r56, 1;
	setp.ne.s32	%p13, %r7, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r57, %r9, 1;
	setp.eq.s32	%p16, %r7, %r57;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r93, %r7, 1;
	mov.u32 	%r100, %r9;
	@!%p17 bra 	BB2_26;
	bra.uni 	BB2_13;

BB2_13:
	div.u32 	%r58, %r101, %r93;
	cvt.rn.f64.u32	%fd8, %r58;
	setp.eq.s32	%p18, %r7, 0;
	mov.f64 	%fd66, 0d0000000000000000;
	@%p18 bra 	BB2_22;

	and.b32  	%r60, %r7, 3;
	setp.eq.s32	%p19, %r60, 0;
	mov.f64 	%fd66, 0d0000000000000000;
	mov.u32 	%r99, 0;
	@%p19 bra 	BB2_20;

	setp.eq.s32	%p20, %r60, 1;
	mov.f64 	%fd63, 0d0000000000000000;
	mov.u32 	%r97, 0;
	@%p20 bra 	BB2_19;

	setp.eq.s32	%p21, %r60, 2;
	mov.f64 	%fd62, 0d0000000000000000;
	mov.u32 	%r96, 0;
	@%p21 bra 	BB2_18;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	ld.local.u32 	%r66, [%rd19];
	cvt.rn.f64.u32	%fd43, %r66;
	sub.f64 	%fd44, %fd43, %fd8;
	fma.rn.f64 	%fd62, %fd44, %fd44, 0d0000000000000000;
	mov.u32 	%r96, 1;

BB2_18:
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r96, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.local.u32 	%r67, [%rd23];
	cvt.rn.f64.u32	%fd45, %r67;
	sub.f64 	%fd46, %fd45, %fd8;
	fma.rn.f64 	%fd63, %fd46, %fd46, %fd62;
	add.s32 	%r97, %r96, 1;

BB2_19:
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	mul.wide.u32 	%rd26, %r97, 4;
	add.s64 	%rd27, %rd25, %rd26;
	ld.local.u32 	%r68, [%rd27];
	cvt.rn.f64.u32	%fd47, %r68;
	sub.f64 	%fd48, %fd47, %fd8;
	fma.rn.f64 	%fd66, %fd48, %fd48, %fd63;
	add.s32 	%r99, %r97, 1;

BB2_20:
	setp.lt.u32	%p22, %r7, 4;
	@%p22 bra 	BB2_22;

BB2_21:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r99, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.local.u32 	%r69, [%rd31];
	cvt.rn.f64.u32	%fd49, %r69;
	sub.f64 	%fd50, %fd49, %fd8;
	fma.rn.f64 	%fd51, %fd50, %fd50, %fd66;
	add.s32 	%r70, %r99, 1;
	mul.wide.u32 	%rd32, %r70, 4;
	add.s64 	%rd33, %rd29, %rd32;
	ld.local.u32 	%r71, [%rd33];
	cvt.rn.f64.u32	%fd52, %r71;
	sub.f64 	%fd53, %fd52, %fd8;
	fma.rn.f64 	%fd54, %fd53, %fd53, %fd51;
	add.s32 	%r72, %r99, 2;
	mul.wide.u32 	%rd34, %r72, 4;
	add.s64 	%rd35, %rd29, %rd34;
	ld.local.u32 	%r73, [%rd35];
	cvt.rn.f64.u32	%fd55, %r73;
	sub.f64 	%fd56, %fd55, %fd8;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd54;
	add.s32 	%r74, %r99, 3;
	mul.wide.u32 	%rd36, %r74, 4;
	add.s64 	%rd37, %rd29, %rd36;
	ld.local.u32 	%r75, [%rd37];
	cvt.rn.f64.u32	%fd58, %r75;
	sub.f64 	%fd59, %fd58, %fd8;
	fma.rn.f64 	%fd66, %fd59, %fd59, %fd57;
	add.s32 	%r99, %r99, 4;
	setp.lt.u32	%p23, %r99, %r7;
	@%p23 bra 	BB2_21;

BB2_22:
	add.s32 	%r76, %r7, -1;
	cvt.rn.f64.u32	%fd60, %r76;
	div.rn.f64 	%fd61, %fd66, %fd60;
	div.rn.f64 	%fd18, %fd61, %fd8;
	setp.ne.s32	%p24, %r7, 1;
	@%p24 bra 	BB2_24;

	// inline asm
	activemask.b32 %r77;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r79, %r80}, [%rd39];
	setp.eq.s32	%p25, %r79, %r80;
	vote.sync.all.pred 	%p26, %p25, %r77;
	mov.u32 	%r100, 2;
	@%p26 bra 	BB2_26;

BB2_24:
	// inline asm
	activemask.b32 %r84;
	// inline asm
	setp.lt.f64	%p27, %fd18, 0d3F847AE140000000;
	vote.sync.all.pred 	%p28, %p27, %r84;
	mov.u32 	%r100, %r93;
	@%p28 bra 	BB2_26;

	// inline asm
	activemask.b32 %r86;
	// inline asm
	setp.le.f64	%p29, %fd18, 0d3FF0000000000000;
	vote.sync.all.pred 	%p30, %p29, %r86;
	setp.ge.u32	%p31, %r7, %r57;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r100, %r93, %r9, %p32;

BB2_26:
	setp.lt.u32	%p33, %r93, %r100;
	@%p33 bra 	BB2_10;

BB2_27:
	cvt.rn.f32.u32	%f17, %r100;
	div.u32 	%r89, %r101, %r100;
	cvt.rn.f32.u32	%f18, %r89;

BB2_28:
	mul.lo.s32 	%r90, %r5, %r24;
	cvt.u64.u32	%rd40, %r90;
	cvta.to.global.u64 	%rd41, %rd1;
	add.s64 	%rd42, %rd41, %rd40;
	mul.wide.u32 	%rd43, %r4, 16;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f18;
	st.global.f32 	[%rd44+4], %f17;
	mov.u32 	%r91, 0;
	st.global.u32 	[%rd44+12], %r91;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd44+8], %rs1;
	setp.gt.f32	%p34, %f17, 0f00000000;
	@%p34 bra 	BB2_30;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r92, 202;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r92;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_30:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .f32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<93>;
	.reg .b16 	%rs<10>;
	.reg .f32 	%f<295>;
	.reg .b32 	%r<206>;
	.reg .b64 	%rd<95>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r42, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r44, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r43, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f81, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f80, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderAdvancedFloat_param_3];
	ld.param.f32 	%f9, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r45, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f87, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f86, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f85, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f84, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd4, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r46, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r48, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r47, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r49, %ntid.x;
	setp.eq.s32	%p2, %r49, 32;
	@%p2 bra 	BB3_2;

	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, $str2;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r50, 59;
	mov.u64 	%rd9, 0;
	mov.u64 	%rd10, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r50;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r51, %tid.y;
	mov.u32 	%r53, %tid.x;
	mad.lo.s32 	%r54, %r49, %r51, %r53;
	and.b32  	%r55, %r54, 15;
	shl.b32 	%r56, %r49, 2;
	rem.u32 	%r57, %r54, %r56;
	sub.s32 	%r58, %r57, %r55;
	shr.u32 	%r59, %r58, 2;
	and.b32  	%r60, %r54, 3;
	add.s32 	%r61, %r59, %r60;
	div.u32 	%r62, %r54, %r56;
	shl.b32 	%r63, %r62, 2;
	bfe.u32 	%r64, %r54, 2, 2;
	add.s32 	%r65, %r63, %r64;
	mov.u32 	%r66, %ctaid.x;
	mad.lo.s32 	%r3, %r66, %r49, %r61;
	mov.u32 	%r67, %ctaid.y;
	mov.u32 	%r68, %ntid.y;
	mad.lo.s32 	%r4, %r67, %r68, %r65;
	setp.lt.u32	%p3, %r3, %r43;
	setp.gt.u32	%p4, %r44, %r4;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB3_72;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r69, %r45, 20;
	setp.eq.s32	%p6, %r69, 20;
	setp.ge.f32	%p7, %f9, 0f3F800000;
	and.pred  	%p8, %p6, %p7;
	mov.u16 	%rs8, 0;
	@!%p8 bra 	BB3_9;
	bra.uni 	BB3_4;

BB3_4:
	and.b32  	%r70, %r3, -8;
	cvt.rn.f32.u32	%f88, %r70;
	and.b32  	%r71, %r4, -4;
	cvt.rn.f32.u32	%f89, %r71;
	cvt.rn.f32.u32	%f90, %r47;
	sub.f32 	%f91, %f90, %f88;
	cvt.rn.f32.u32	%f92, %r48;
	sub.f32 	%f93, %f92, %f89;
	mul.f32 	%f94, %f93, %f93;
	fma.rn.f32 	%f95, %f91, %f91, %f94;
	sqrt.rn.f32 	%f96, %f95;
	mul.f32 	%f97, %f96, 0f3CD94079;
	ld.global.f32 	%f98, [screenDistance];
	div.rn.f32 	%f3, %f97, %f98;
	abs.f32 	%f4, %f3;
	setp.leu.f32	%p9, %f4, 0f3F800000;
	mov.f32 	%f269, %f4;
	@%p9 bra 	BB3_6;

	rcp.rn.f32 	%f269, %f4;

BB3_6:
	mul.rn.f32 	%f99, %f269, %f269;
	mov.f32 	%f100, 0fC0B59883;
	mov.f32 	%f101, 0fBF52C7EA;
	fma.rn.f32 	%f102, %f99, %f101, %f100;
	mov.f32 	%f103, 0fC0D21907;
	fma.rn.f32 	%f104, %f102, %f99, %f103;
	mul.f32 	%f105, %f99, %f104;
	mul.f32 	%f106, %f269, %f105;
	add.f32 	%f107, %f99, 0f41355DC0;
	mov.f32 	%f108, 0f41E6BD60;
	fma.rn.f32 	%f109, %f107, %f99, %f108;
	mov.f32 	%f110, 0f419D92C8;
	fma.rn.f32 	%f111, %f109, %f99, %f110;
	rcp.rn.f32 	%f112, %f111;
	fma.rn.f32 	%f113, %f106, %f112, %f269;
	mov.f32 	%f114, 0f3FC90FDB;
	sub.f32 	%f115, %f114, %f113;
	setp.gt.f32	%p10, %f4, 0f3F800000;
	selp.f32	%f116, %f115, %f113, %p10;
	mov.b32 	 %r72, %f116;
	mov.b32 	 %r73, %f3;
	and.b32  	%r74, %r73, -2147483648;
	or.b32  	%r75, %r72, %r74;
	mov.b32 	 %f117, %r75;
	setp.gtu.f32	%p11, %f4, 0f7F800000;
	selp.f32	%f118, %f116, %f117, %p11;
	mul.f32 	%f119, %f118, 0f43340000;
	div.rn.f32 	%f7, %f119, 0f40490FDB;
	setp.ge.f32	%p12, %f7, 0f00000000;
	@%p12 bra 	BB3_8;

	mov.u64 	%rd11, $str6;
	cvta.global.u64 	%rd12, %rd11;
	mov.u64 	%rd13, $str2;
	cvta.global.u64 	%rd14, %rd13;
	mov.u32 	%r76, 245;
	mov.u64 	%rd15, 0;
	mov.u64 	%rd16, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd14;
	.param .b32 param2;
	st.param.b32	[param2+0], %r76;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd15;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd16;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_8:
	fma.rn.f32 	%f120, %f7, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p13, %f7, 0f40B00000;
	setp.le.f32	%p14, %f7, 0f40B00000;
	selp.u16	%rs8, 1, 0, %p14;
	selp.f32	%f121, %f120, 0f3F800000, %p13;
	mul.f32 	%f9, %f121, %f9;

BB3_9:
	and.b32  	%r77, %r45, 8;
	setp.eq.s32	%p16, %r77, 0;
	mov.pred 	%p92, -1;
	mov.f32 	%f293, 0f00000000;
	@%p16 bra 	BB3_10;

	sub.s32 	%r78, %r44, %r4;
	cvt.rn.f32.u32	%f124, %r78;
	cvt.rn.f32.u32	%f125, %r43;
	cvt.rn.f32.u32	%f126, %r3;
	div.rn.f32 	%f127, %f126, %f125;
	cvt.rn.f32.u32	%f128, %r44;
	div.rn.f32 	%f129, %f124, %f128;
	sub.f32 	%f130, %f81, %f1;
	sub.f32 	%f131, %f2, %f80;
	fma.rn.f32 	%f132, %f130, %f127, %f1;
	fma.rn.f32 	%f133, %f131, %f129, %f80;
	sub.f32 	%f134, %f132, %f84;
	sub.f32 	%f135, %f133, %f85;
	sub.f32 	%f136, %f86, %f84;
	div.rn.f32 	%f137, %f134, %f136;
	sub.f32 	%f138, %f87, %f85;
	div.rn.f32 	%f139, %f135, %f138;
	mul.f32 	%f12, %f125, %f137;
	mul.f32 	%f140, %f128, %f139;
	sub.f32 	%f13, %f128, %f140;
	abs.f32 	%f141, %f12;
	mov.b32 	 %r79, %f12;
	and.b32  	%r80, %r79, -2147483648;
	or.b32  	%r81, %r80, 1056964608;
	mov.b32 	 %f142, %r81;
	add.f32 	%f143, %f12, %f142;
	cvt.rzi.f32.f32	%f144, %f143;
	setp.gt.f32	%p17, %f141, 0f4B000000;
	selp.f32	%f271, %f12, %f144, %p17;
	setp.geu.f32	%p18, %f141, 0f3F000000;
	@%p18 bra 	BB3_13;

	cvt.rzi.f32.f32	%f271, %f12;

BB3_13:
	cvt.rzi.s32.f32	%r5, %f271;
	mov.b32 	 %r82, %f13;
	and.b32  	%r83, %r82, -2147483648;
	or.b32  	%r84, %r83, 1056964608;
	mov.b32 	 %f145, %r84;
	add.f32 	%f146, %f13, %f145;
	cvt.rzi.f32.f32	%f147, %f146;
	abs.f32 	%f148, %f13;
	setp.gt.f32	%p19, %f148, 0f4B000000;
	selp.f32	%f272, %f13, %f147, %p19;
	setp.geu.f32	%p20, %f148, 0f3F000000;
	@%p20 bra 	BB3_15;

	cvt.rzi.f32.f32	%f272, %f13;

BB3_15:
	add.s32 	%r85, %r43, -2;
	setp.lt.u32	%p22, %r5, %r85;
	setp.gt.s32	%p23, %r5, 1;
	and.pred  	%p24, %p23, %p22;
	cvt.rzi.s32.f32	%r86, %f272;
	setp.gt.s32	%p25, %r86, 1;
	and.pred  	%p26, %p24, %p25;
	add.s32 	%r87, %r44, -2;
	setp.lt.u32	%p27, %r86, %r87;
	and.pred  	%p28, %p27, %p26;
	mov.f32 	%f292, %f293;
	@!%p28 bra 	BB3_17;
	bra.uni 	BB3_16;

BB3_16:
	cvt.rmi.f32.f32	%f151, %f12;
	cvt.rzi.u32.f32	%r88, %f151;
	cvt.rmi.f32.f32	%f152, %f13;
	cvt.rzi.u32.f32	%r89, %f152;
	cvt.rn.f32.u32	%f153, %r88;
	sub.f32 	%f154, %f12, %f153;
	cvt.rn.f32.u32	%f155, %r89;
	sub.f32 	%f156, %f13, %f155;
	mul.lo.s32 	%r90, %r89, %r46;
	cvt.u64.u32	%rd17, %r90;
	cvta.to.global.u64 	%rd18, %rd4;
	add.s64 	%rd19, %rd18, %rd17;
	mul.wide.u32 	%rd20, %r88, 16;
	add.s64 	%rd21, %rd19, %rd20;
	add.s32 	%r91, %r88, 1;
	mul.wide.u32 	%rd22, %r91, 16;
	add.s64 	%rd23, %rd19, %rd22;
	add.s32 	%r92, %r89, 1;
	mul.lo.s32 	%r93, %r92, %r46;
	cvt.u64.u32	%rd24, %r93;
	add.s64 	%rd25, %rd18, %rd24;
	add.s64 	%rd26, %rd25, %rd20;
	add.s64 	%rd27, %rd25, %rd22;
	mov.f32 	%f157, 0f3F800000;
	sub.f32 	%f158, %f157, %f154;
	ld.global.f32 	%f159, [%rd21];
	ld.global.f32 	%f160, [%rd23];
	mul.f32 	%f161, %f154, %f160;
	fma.rn.f32 	%f162, %f159, %f158, %f161;
	sub.f32 	%f163, %f157, %f156;
	ld.global.f32 	%f164, [%rd26];
	ld.global.f32 	%f165, [%rd27];
	mul.f32 	%f166, %f154, %f165;
	fma.rn.f32 	%f167, %f158, %f164, %f166;
	mul.f32 	%f168, %f156, %f167;
	fma.rn.f32 	%f293, %f163, %f162, %f168;
	ld.global.f32 	%f169, [%rd21+4];
	ld.global.f32 	%f170, [%rd23+4];
	mul.f32 	%f171, %f154, %f170;
	fma.rn.f32 	%f172, %f158, %f169, %f171;
	ld.global.f32 	%f173, [%rd26+4];
	ld.global.f32 	%f174, [%rd27+4];
	mul.f32 	%f175, %f154, %f174;
	fma.rn.f32 	%f176, %f158, %f173, %f175;
	mul.f32 	%f177, %f156, %f176;
	fma.rn.f32 	%f292, %f163, %f172, %f177;
	mov.pred 	%p92, 0;
	bra.uni 	BB3_17;

BB3_10:
	mov.f32 	%f292, %f293;

BB3_17:
	@%p92 bra 	BB3_46;
	bra.uni 	BB3_18;

BB3_46:
	setp.lt.f32	%p63, %f9, 0f3F800000;
	selp.f32	%f52, 0f3F800000, %f9, %p63;
	abs.f32 	%f226, %f52;
	mov.b32 	 %r140, %f52;
	and.b32  	%r141, %r140, -2147483648;
	or.b32  	%r142, %r141, 1056964608;
	mov.b32 	 %f227, %r142;
	add.f32 	%f228, %f52, %f227;
	cvt.rzi.f32.f32	%f229, %f228;
	setp.gt.f32	%p64, %f226, 0f4B000000;
	selp.f32	%f285, %f52, %f229, %p64;
	setp.geu.f32	%p65, %f226, 0f3F000000;
	@%p65 bra 	BB3_48;

	cvt.rzi.f32.f32	%f285, %f52;

BB3_48:
	cvt.rn.f32.u32	%f230, %r43;
	sub.f32 	%f231, %f81, %f1;
	div.rn.f32 	%f56, %f231, %f230;
	cvt.rn.f32.u32	%f232, %r44;
	sub.f32 	%f233, %f2, %f80;
	div.rn.f32 	%f57, %f233, %f232;
	cvt.rzi.u32.f32	%r203, %f285;
	setp.lt.u32	%p66, %r203, 65;
	@%p66 bra 	BB3_50;

	mov.u64 	%rd59, $str7;
	cvta.global.u64 	%rd60, %rd59;
	mov.u64 	%rd61, $str2;
	cvta.global.u64 	%rd62, %rd61;
	mov.u32 	%r143, 113;
	mov.u64 	%rd63, 0;
	mov.u64 	%rd64, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd60;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd62;
	.param .b32 param2;
	st.param.b32	[param2+0], %r143;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd63;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd64;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_50:
	setp.eq.s32	%p67, %r203, 0;
	cvt.rn.f32.u32	%f292, %r203;
	mov.u32 	%r204, 0;
	@%p67 bra 	BB3_51;

	cvt.rn.f32.u32	%f59, %r3;
	cvt.rn.f32.u32	%f60, %r4;
	ld.const.u32 	%r148, [amplifier];
	cvt.rn.f32.s32	%f61, %r148;
	mov.u32 	%r196, 0;
	mov.u32 	%r204, %r196;

BB3_53:
	mov.u32 	%r27, %r203;
	mov.u32 	%r25, %r196;
	cvt.rn.f32.u32	%f234, %r25;
	div.rn.f32 	%f235, %f234, %f292;
	add.f32 	%f236, %f59, %f235;
	add.f32 	%f237, %f60, %f235;
	neg.f32 	%f238, %f237;
	fma.rn.f32 	%f239, %f56, %f236, %f1;
	fma.rn.f32 	%f240, %f57, %f238, %f2;
	abs.f32 	%f241, %f239;
	abs.f32 	%f242, %f240;
	add.f32 	%f243, %f241, %f242;
	mul.f32 	%f244, %f243, %f61;
	cvt.rzi.s32.f32	%r149, %f244;
	cvt.rn.f32.s32	%f245, %r149;
	cvt.rzi.u32.f32	%r28, %f245;
	add.s32 	%r204, %r28, %r204;
	setp.gt.u32	%p68, %r25, 9;
	@%p68 bra 	BB3_55;

	add.u64 	%rd65, %SP, 0;
	cvta.to.local.u64 	%rd66, %rd65;
	mul.wide.u32 	%rd67, %r25, 4;
	add.s64 	%rd68, %rd66, %rd67;
	st.local.u32 	[%rd68], %r28;

BB3_55:
	setp.lt.u32	%p69, %r25, 10;
	and.b32  	%r150, %r45, 1;
	setp.eq.b32	%p70, %r150, 1;
	setp.ne.s32	%p71, %r25, 0;
	and.pred  	%p72, %p69, %p71;
	and.pred  	%p73, %p72, %p70;
	shr.u32 	%r151, %r27, 1;
	setp.eq.s32	%p74, %r25, %r151;
	or.pred  	%p75, %p73, %p74;
	add.s32 	%r196, %r25, 1;
	mov.u32 	%r203, %r27;
	@!%p75 bra 	BB3_69;
	bra.uni 	BB3_56;

BB3_56:
	div.u32 	%r152, %r204, %r196;
	cvt.rn.f32.u32	%f63, %r152;
	setp.eq.s32	%p76, %r25, 0;
	mov.f32 	%f291, 0f00000000;
	@%p76 bra 	BB3_65;

	and.b32  	%r154, %r25, 3;
	setp.eq.s32	%p77, %r154, 0;
	mov.f32 	%f291, 0f00000000;
	mov.u32 	%r202, 0;
	@%p77 bra 	BB3_63;

	setp.eq.s32	%p78, %r154, 1;
	mov.f32 	%f288, 0f00000000;
	mov.u32 	%r200, 0;
	@%p78 bra 	BB3_62;

	setp.eq.s32	%p79, %r154, 2;
	mov.f32 	%f287, 0f00000000;
	mov.u32 	%r199, 0;
	@%p79 bra 	BB3_61;

	add.u64 	%rd69, %SP, 0;
	cvta.to.local.u64 	%rd70, %rd69;
	ld.local.u32 	%r160, [%rd70];
	cvt.rn.f32.u32	%f250, %r160;
	sub.f32 	%f251, %f250, %f63;
	fma.rn.f32 	%f287, %f251, %f251, 0f00000000;
	mov.u32 	%r199, 1;

BB3_61:
	add.u64 	%rd71, %SP, 0;
	cvta.to.local.u64 	%rd72, %rd71;
	mul.wide.u32 	%rd73, %r199, 4;
	add.s64 	%rd74, %rd72, %rd73;
	ld.local.u32 	%r161, [%rd74];
	cvt.rn.f32.u32	%f252, %r161;
	sub.f32 	%f253, %f252, %f63;
	fma.rn.f32 	%f288, %f253, %f253, %f287;
	add.s32 	%r200, %r199, 1;

BB3_62:
	add.u64 	%rd75, %SP, 0;
	cvta.to.local.u64 	%rd76, %rd75;
	mul.wide.u32 	%rd77, %r200, 4;
	add.s64 	%rd78, %rd76, %rd77;
	ld.local.u32 	%r162, [%rd78];
	cvt.rn.f32.u32	%f254, %r162;
	sub.f32 	%f255, %f254, %f63;
	fma.rn.f32 	%f291, %f255, %f255, %f288;
	add.s32 	%r202, %r200, 1;

BB3_63:
	add.u64 	%rd79, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd79;
	setp.lt.u32	%p80, %r25, 4;
	@%p80 bra 	BB3_65;

BB3_64:
	mul.wide.u32 	%rd80, %r202, 4;
	add.s64 	%rd81, %rd2, %rd80;
	ld.local.u32 	%r163, [%rd81];
	cvt.rn.f32.u32	%f256, %r163;
	sub.f32 	%f257, %f256, %f63;
	fma.rn.f32 	%f258, %f257, %f257, %f291;
	add.s32 	%r164, %r202, 1;
	mul.wide.u32 	%rd82, %r164, 4;
	add.s64 	%rd83, %rd2, %rd82;
	ld.local.u32 	%r165, [%rd83];
	cvt.rn.f32.u32	%f259, %r165;
	sub.f32 	%f260, %f259, %f63;
	fma.rn.f32 	%f261, %f260, %f260, %f258;
	add.s32 	%r166, %r202, 2;
	mul.wide.u32 	%rd84, %r166, 4;
	add.s64 	%rd85, %rd2, %rd84;
	ld.local.u32 	%r167, [%rd85];
	cvt.rn.f32.u32	%f262, %r167;
	sub.f32 	%f263, %f262, %f63;
	fma.rn.f32 	%f264, %f263, %f263, %f261;
	add.s32 	%r168, %r202, 3;
	mul.wide.u32 	%rd86, %r168, 4;
	add.s64 	%rd87, %rd2, %rd86;
	ld.local.u32 	%r169, [%rd87];
	cvt.rn.f32.u32	%f265, %r169;
	sub.f32 	%f266, %f265, %f63;
	fma.rn.f32 	%f291, %f266, %f266, %f264;
	add.s32 	%r202, %r202, 4;
	setp.lt.u32	%p81, %r202, %r25;
	@%p81 bra 	BB3_64;

BB3_65:
	add.s32 	%r170, %r25, -1;
	cvt.rn.f32.u32	%f267, %r170;
	div.rn.f32 	%f268, %f291, %f267;
	div.rn.f32 	%f73, %f268, %f63;
	setp.ne.s32	%p82, %r25, 1;
	@%p82 bra 	BB3_67;

	// inline asm
	activemask.b32 %r171;
	// inline asm
	add.u64 	%rd88, %SP, 0;
	cvta.to.local.u64 	%rd89, %rd88;
	ld.local.v2.u32 	{%r173, %r174}, [%rd89];
	setp.eq.s32	%p83, %r173, %r174;
	vote.sync.all.pred 	%p84, %p83, %r171;
	mov.u32 	%r203, 2;
	@%p84 bra 	BB3_69;

BB3_67:
	// inline asm
	activemask.b32 %r178;
	// inline asm
	setp.lt.f32	%p85, %f73, 0f3C23D70A;
	vote.sync.all.pred 	%p86, %p85, %r178;
	mov.u32 	%r203, %r196;
	@%p86 bra 	BB3_69;

	// inline asm
	activemask.b32 %r180;
	// inline asm
	setp.le.f32	%p87, %f73, 0f3F800000;
	vote.sync.all.pred 	%p88, %p87, %r180;
	setp.ge.u32	%p89, %r25, %r151;
	and.pred  	%p90, %p88, %p89;
	selp.b32	%r203, %r196, %r27, %p90;

BB3_69:
	cvt.rn.f32.u32	%f292, %r203;
	setp.lt.u32	%p91, %r196, %r203;
	@%p91 bra 	BB3_53;
	bra.uni 	BB3_70;

BB3_18:
	shr.u32 	%r94, %r45, 5;
	and.b32  	%r95, %r94, 1;
	setp.eq.b32	%p30, %r95, 1;
	not.pred 	%p31, %p30;
	setp.eq.s16	%p32, %rs8, 0;
	mov.u16 	%rs9, 1;
	or.pred  	%p33, %p32, %p31;
	@%p33 bra 	BB3_71;

	setp.lt.f32	%p34, %f9, 0f3F800000;
	mov.f32 	%f282, 0f00000000;
	mov.f32 	%f284, %f282;
	@%p34 bra 	BB3_45;

	abs.f32 	%f180, %f9;
	mov.b32 	 %r96, %f9;
	and.b32  	%r97, %r96, -2147483648;
	or.b32  	%r98, %r97, 1056964608;
	mov.b32 	 %f181, %r98;
	add.f32 	%f182, %f9, %f181;
	cvt.rzi.f32.f32	%f183, %f182;
	setp.gt.f32	%p35, %f180, 0f4B000000;
	selp.f32	%f275, %f9, %f183, %p35;
	setp.geu.f32	%p36, %f180, 0f3F000000;
	@%p36 bra 	BB3_22;

	cvt.rzi.f32.f32	%f275, %f9;

BB3_22:
	cvt.rn.f32.u32	%f184, %r43;
	sub.f32 	%f185, %f81, %f1;
	div.rn.f32 	%f27, %f185, %f184;
	cvt.rn.f32.u32	%f186, %r44;
	sub.f32 	%f187, %f2, %f80;
	div.rn.f32 	%f28, %f187, %f186;
	cvt.rzi.u32.f32	%r193, %f275;
	setp.lt.u32	%p37, %r193, 65;
	@%p37 bra 	BB3_24;

	mov.u64 	%rd28, $str7;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, $str2;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r99, 113;
	mov.u64 	%rd32, 0;
	mov.u64 	%rd33, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd29;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd31;
	.param .b32 param2;
	st.param.b32	[param2+0], %r99;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd32;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd33;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_24:
	setp.eq.s32	%p38, %r193, 0;
	cvt.rn.f32.u32	%f282, %r193;
	mov.u32 	%r194, 0;
	@%p38 bra 	BB3_25;

	cvt.rn.f32.u32	%f30, %r3;
	cvt.rn.f32.u32	%f31, %r4;
	ld.const.u32 	%r104, [amplifier];
	cvt.rn.f32.s32	%f32, %r104;
	mov.u32 	%r186, 0;
	mov.u32 	%r194, %r186;

BB3_27:
	mov.u32 	%r9, %r193;
	mov.u32 	%r7, %r186;
	cvt.rn.f32.u32	%f188, %r7;
	div.rn.f32 	%f189, %f188, %f282;
	add.f32 	%f190, %f30, %f189;
	add.f32 	%f191, %f31, %f189;
	neg.f32 	%f192, %f191;
	fma.rn.f32 	%f193, %f27, %f190, %f1;
	fma.rn.f32 	%f194, %f28, %f192, %f2;
	abs.f32 	%f195, %f193;
	abs.f32 	%f196, %f194;
	add.f32 	%f197, %f195, %f196;
	mul.f32 	%f198, %f197, %f32;
	cvt.rzi.s32.f32	%r105, %f198;
	cvt.rn.f32.s32	%f199, %r105;
	cvt.rzi.u32.f32	%r10, %f199;
	add.s32 	%r194, %r10, %r194;
	setp.gt.u32	%p39, %r7, 9;
	@%p39 bra 	BB3_29;

	add.u64 	%rd34, %SP, 0;
	cvta.to.local.u64 	%rd35, %rd34;
	mul.wide.u32 	%rd36, %r7, 4;
	add.s64 	%rd37, %rd35, %rd36;
	st.local.u32 	[%rd37], %r10;

BB3_29:
	setp.lt.u32	%p40, %r7, 10;
	and.b32  	%r106, %r45, 1;
	setp.eq.b32	%p41, %r106, 1;
	setp.ne.s32	%p42, %r7, 0;
	and.pred  	%p43, %p40, %p42;
	and.pred  	%p44, %p43, %p41;
	shr.u32 	%r107, %r9, 1;
	setp.eq.s32	%p45, %r7, %r107;
	or.pred  	%p46, %p44, %p45;
	add.s32 	%r186, %r7, 1;
	mov.u32 	%r193, %r9;
	@!%p46 bra 	BB3_43;
	bra.uni 	BB3_30;

BB3_30:
	div.u32 	%r108, %r194, %r186;
	cvt.rn.f32.u32	%f34, %r108;
	setp.eq.s32	%p47, %r7, 0;
	mov.f32 	%f281, 0f00000000;
	@%p47 bra 	BB3_39;

	and.b32  	%r110, %r7, 3;
	setp.eq.s32	%p48, %r110, 0;
	mov.f32 	%f281, 0f00000000;
	mov.u32 	%r192, 0;
	@%p48 bra 	BB3_37;

	setp.eq.s32	%p49, %r110, 1;
	mov.f32 	%f278, 0f00000000;
	mov.u32 	%r190, 0;
	@%p49 bra 	BB3_36;

	setp.eq.s32	%p50, %r110, 2;
	mov.f32 	%f277, 0f00000000;
	mov.u32 	%r189, 0;
	@%p50 bra 	BB3_35;

	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.u32 	%r116, [%rd39];
	cvt.rn.f32.u32	%f204, %r116;
	sub.f32 	%f205, %f204, %f34;
	fma.rn.f32 	%f277, %f205, %f205, 0f00000000;
	mov.u32 	%r189, 1;

BB3_35:
	add.u64 	%rd40, %SP, 0;
	cvta.to.local.u64 	%rd41, %rd40;
	mul.wide.u32 	%rd42, %r189, 4;
	add.s64 	%rd43, %rd41, %rd42;
	ld.local.u32 	%r117, [%rd43];
	cvt.rn.f32.u32	%f206, %r117;
	sub.f32 	%f207, %f206, %f34;
	fma.rn.f32 	%f278, %f207, %f207, %f277;
	add.s32 	%r190, %r189, 1;

BB3_36:
	add.u64 	%rd44, %SP, 0;
	cvta.to.local.u64 	%rd45, %rd44;
	mul.wide.u32 	%rd46, %r190, 4;
	add.s64 	%rd47, %rd45, %rd46;
	ld.local.u32 	%r118, [%rd47];
	cvt.rn.f32.u32	%f208, %r118;
	sub.f32 	%f209, %f208, %f34;
	fma.rn.f32 	%f281, %f209, %f209, %f278;
	add.s32 	%r192, %r190, 1;

BB3_37:
	add.u64 	%rd48, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd48;
	setp.lt.u32	%p51, %r7, 4;
	@%p51 bra 	BB3_39;

BB3_38:
	mul.wide.u32 	%rd49, %r192, 4;
	add.s64 	%rd50, %rd1, %rd49;
	ld.local.u32 	%r119, [%rd50];
	cvt.rn.f32.u32	%f210, %r119;
	sub.f32 	%f211, %f210, %f34;
	fma.rn.f32 	%f212, %f211, %f211, %f281;
	add.s32 	%r120, %r192, 1;
	mul.wide.u32 	%rd51, %r120, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.local.u32 	%r121, [%rd52];
	cvt.rn.f32.u32	%f213, %r121;
	sub.f32 	%f214, %f213, %f34;
	fma.rn.f32 	%f215, %f214, %f214, %f212;
	add.s32 	%r122, %r192, 2;
	mul.wide.u32 	%rd53, %r122, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.local.u32 	%r123, [%rd54];
	cvt.rn.f32.u32	%f216, %r123;
	sub.f32 	%f217, %f216, %f34;
	fma.rn.f32 	%f218, %f217, %f217, %f215;
	add.s32 	%r124, %r192, 3;
	mul.wide.u32 	%rd55, %r124, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.local.u32 	%r125, [%rd56];
	cvt.rn.f32.u32	%f219, %r125;
	sub.f32 	%f220, %f219, %f34;
	fma.rn.f32 	%f281, %f220, %f220, %f218;
	add.s32 	%r192, %r192, 4;
	setp.lt.u32	%p52, %r192, %r7;
	@%p52 bra 	BB3_38;

BB3_39:
	add.s32 	%r126, %r7, -1;
	cvt.rn.f32.u32	%f221, %r126;
	div.rn.f32 	%f222, %f281, %f221;
	div.rn.f32 	%f44, %f222, %f34;
	setp.ne.s32	%p53, %r7, 1;
	@%p53 bra 	BB3_41;

	// inline asm
	activemask.b32 %r127;
	// inline asm
	add.u64 	%rd57, %SP, 0;
	cvta.to.local.u64 	%rd58, %rd57;
	ld.local.v2.u32 	{%r129, %r130}, [%rd58];
	setp.eq.s32	%p54, %r129, %r130;
	vote.sync.all.pred 	%p55, %p54, %r127;
	mov.u32 	%r193, 2;
	@%p55 bra 	BB3_43;

BB3_41:
	// inline asm
	activemask.b32 %r134;
	// inline asm
	setp.lt.f32	%p56, %f44, 0f3C23D70A;
	vote.sync.all.pred 	%p57, %p56, %r134;
	mov.u32 	%r193, %r186;
	@%p57 bra 	BB3_43;

	// inline asm
	activemask.b32 %r136;
	// inline asm
	setp.le.f32	%p58, %f44, 0f3F800000;
	vote.sync.all.pred 	%p59, %p58, %r136;
	setp.ge.u32	%p60, %r7, %r107;
	and.pred  	%p61, %p59, %p60;
	selp.b32	%r193, %r186, %r9, %p61;

BB3_43:
	cvt.rn.f32.u32	%f282, %r193;
	setp.lt.u32	%p62, %r186, %r193;
	@%p62 bra 	BB3_27;
	bra.uni 	BB3_44;

BB3_51:
	mov.u32 	%r203, %r204;

BB3_70:
	div.u32 	%r183, %r204, %r203;
	cvt.rn.f32.u32	%f293, %r183;
	mov.u16 	%rs9, 0;
	bra.uni 	BB3_71;

BB3_25:
	mov.u32 	%r193, %r194;

BB3_44:
	div.u32 	%r139, %r194, %r193;
	cvt.rn.f32.u32	%f284, %r139;

BB3_45:
	mul.f32 	%f223, %f292, 0f3F400000;
	add.f32 	%f292, %f223, %f282;
	mul.f32 	%f224, %f282, %f284;
	fma.rn.f32 	%f225, %f293, %f223, %f224;
	div.rn.f32 	%f293, %f225, %f292;

BB3_71:
	mul.lo.s32 	%r184, %r4, %r42;
	cvt.u64.u32	%rd90, %r184;
	cvta.to.global.u64 	%rd91, %rd3;
	add.s64 	%rd92, %rd91, %rd90;
	mul.wide.u32 	%rd93, %r3, 16;
	add.s64 	%rd94, %rd92, %rd93;
	st.global.f32 	[%rd94], %f293;
	st.global.f32 	[%rd94+4], %f292;
	mov.u32 	%r185, 0;
	st.global.u32 	[%rd94+12], %r185;
	st.global.u8 	[%rd94+8], %rs9;

BB3_72:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .f32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<93>;
	.reg .b16 	%rs<10>;
	.reg .f32 	%f<143>;
	.reg .b32 	%r<202>;
	.reg .f64 	%fd<149>;
	.reg .b64 	%rd<93>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd4, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r46, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r48, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r47, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd39, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd38, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderAdvancedDouble_param_3];
	ld.param.f32 	%f7, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r49, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd44, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd43, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd5, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r50, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r52, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r51, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p2, %r1, 32;
	@%p2 bra 	BB4_2;

	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r53, 59;
	mov.u64 	%rd10, 0;
	mov.u64 	%rd11, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r53;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd10;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd11;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB4_2:
	mov.u32 	%r54, %tid.x;
	mov.u32 	%r55, %tid.y;
	mad.lo.s32 	%r56, %r1, %r55, %r54;
	shl.b32 	%r57, %r1, 2;
	and.b32  	%r58, %r56, 15;
	rem.u32 	%r59, %r56, %r57;
	sub.s32 	%r60, %r59, %r58;
	shr.u32 	%r61, %r60, 2;
	and.b32  	%r62, %r56, 3;
	add.s32 	%r63, %r61, %r62;
	div.u32 	%r64, %r56, %r57;
	shl.b32 	%r65, %r64, 2;
	bfe.u32 	%r66, %r56, 2, 2;
	add.s32 	%r67, %r65, %r66;
	mov.u32 	%r68, %ctaid.x;
	mad.lo.s32 	%r4, %r68, %r1, %r63;
	mov.u32 	%r69, %ctaid.y;
	mov.u32 	%r70, %ntid.y;
	mad.lo.s32 	%r5, %r69, %r70, %r67;
	setp.lt.u32	%p3, %r4, %r47;
	setp.gt.u32	%p4, %r48, %r5;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB4_70;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r71, %r49, 20;
	setp.eq.s32	%p6, %r71, 20;
	setp.ge.f32	%p7, %f7, 0f3F800000;
	and.pred  	%p8, %p6, %p7;
	mov.u16 	%rs8, 0;
	@!%p8 bra 	BB4_9;
	bra.uni 	BB4_4;

BB4_4:
	and.b32  	%r72, %r4, -8;
	cvt.rn.f32.u32	%f38, %r72;
	and.b32  	%r73, %r5, -4;
	cvt.rn.f32.u32	%f39, %r73;
	cvt.rn.f32.u32	%f40, %r51;
	sub.f32 	%f41, %f40, %f38;
	cvt.rn.f32.u32	%f42, %r52;
	sub.f32 	%f43, %f42, %f39;
	mul.f32 	%f44, %f43, %f43;
	fma.rn.f32 	%f45, %f41, %f41, %f44;
	sqrt.rn.f32 	%f46, %f45;
	mul.f32 	%f47, %f46, 0f3CD94079;
	ld.global.f32 	%f48, [screenDistance];
	div.rn.f32 	%f1, %f47, %f48;
	abs.f32 	%f2, %f1;
	setp.leu.f32	%p9, %f2, 0f3F800000;
	mov.f32 	%f131, %f2;
	@%p9 bra 	BB4_6;

	rcp.rn.f32 	%f131, %f2;

BB4_6:
	mul.rn.f32 	%f49, %f131, %f131;
	mov.f32 	%f50, 0fC0B59883;
	mov.f32 	%f51, 0fBF52C7EA;
	fma.rn.f32 	%f52, %f49, %f51, %f50;
	mov.f32 	%f53, 0fC0D21907;
	fma.rn.f32 	%f54, %f52, %f49, %f53;
	mul.f32 	%f55, %f49, %f54;
	mul.f32 	%f56, %f131, %f55;
	add.f32 	%f57, %f49, 0f41355DC0;
	mov.f32 	%f58, 0f41E6BD60;
	fma.rn.f32 	%f59, %f57, %f49, %f58;
	mov.f32 	%f60, 0f419D92C8;
	fma.rn.f32 	%f61, %f59, %f49, %f60;
	rcp.rn.f32 	%f62, %f61;
	fma.rn.f32 	%f63, %f56, %f62, %f131;
	mov.f32 	%f64, 0f3FC90FDB;
	sub.f32 	%f65, %f64, %f63;
	setp.gt.f32	%p10, %f2, 0f3F800000;
	selp.f32	%f66, %f65, %f63, %p10;
	mov.b32 	 %r74, %f66;
	mov.b32 	 %r75, %f1;
	and.b32  	%r76, %r75, -2147483648;
	or.b32  	%r77, %r74, %r76;
	mov.b32 	 %f67, %r77;
	setp.gtu.f32	%p11, %f2, 0f7F800000;
	selp.f32	%f68, %f66, %f67, %p11;
	mul.f32 	%f69, %f68, 0f43340000;
	div.rn.f32 	%f5, %f69, 0f40490FDB;
	setp.ge.f32	%p12, %f5, 0f00000000;
	@%p12 bra 	BB4_8;

	mov.u64 	%rd12, $str6;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, $str2;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r78, 245;
	mov.u64 	%rd16, 0;
	mov.u64 	%rd17, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd15;
	.param .b32 param2;
	st.param.b32	[param2+0], %r78;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_8:
	fma.rn.f32 	%f70, %f5, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p13, %f5, 0f40B00000;
	setp.le.f32	%p14, %f5, 0f40B00000;
	selp.u16	%rs8, 1, 0, %p14;
	selp.f32	%f71, %f70, 0f3F800000, %p13;
	mul.f32 	%f7, %f71, %f7;

BB4_9:
	and.b32  	%r79, %r49, 8;
	setp.eq.s32	%p16, %r79, 0;
	mov.pred 	%p92, -1;
	mov.f32 	%f141, 0f00000000;
	@%p16 bra 	BB4_10;

	sub.s32 	%r80, %r48, %r5;
	cvt.rn.f64.u32	%fd45, %r80;
	cvt.rn.f64.u32	%fd46, %r47;
	cvt.rn.f64.u32	%fd47, %r4;
	div.rn.f64 	%fd48, %fd47, %fd46;
	cvt.rn.f64.u32	%fd49, %r48;
	div.rn.f64 	%fd50, %fd45, %fd49;
	sub.f64 	%fd51, %fd39, %fd1;
	sub.f64 	%fd52, %fd2, %fd38;
	fma.rn.f64 	%fd53, %fd51, %fd48, %fd1;
	fma.rn.f64 	%fd54, %fd52, %fd50, %fd38;
	sub.f64 	%fd55, %fd53, %fd41;
	sub.f64 	%fd56, %fd54, %fd42;
	sub.f64 	%fd57, %fd43, %fd41;
	div.rn.f64 	%fd58, %fd55, %fd57;
	sub.f64 	%fd59, %fd44, %fd42;
	div.rn.f64 	%fd60, %fd56, %fd59;
	cvt.rn.f32.f64	%f74, %fd58;
	cvt.rn.f32.f64	%f75, %fd60;
	cvt.rn.f32.u32	%f76, %r47;
	mul.f32 	%f8, %f76, %f74;
	cvt.rn.f32.u32	%f77, %r48;
	mul.f32 	%f78, %f77, %f75;
	sub.f32 	%f9, %f77, %f78;
	abs.f32 	%f79, %f8;
	mov.b32 	 %r81, %f8;
	and.b32  	%r82, %r81, -2147483648;
	or.b32  	%r83, %r82, 1056964608;
	mov.b32 	 %f80, %r83;
	add.f32 	%f81, %f8, %f80;
	cvt.rzi.f32.f32	%f82, %f81;
	setp.gt.f32	%p17, %f79, 0f4B000000;
	selp.f32	%f133, %f8, %f82, %p17;
	setp.geu.f32	%p18, %f79, 0f3F000000;
	@%p18 bra 	BB4_13;

	cvt.rzi.f32.f32	%f133, %f8;

BB4_13:
	cvt.rzi.s32.f32	%r6, %f133;
	mov.b32 	 %r84, %f9;
	and.b32  	%r85, %r84, -2147483648;
	or.b32  	%r86, %r85, 1056964608;
	mov.b32 	 %f83, %r86;
	add.f32 	%f84, %f9, %f83;
	cvt.rzi.f32.f32	%f85, %f84;
	abs.f32 	%f86, %f9;
	setp.gt.f32	%p19, %f86, 0f4B000000;
	selp.f32	%f134, %f9, %f85, %p19;
	setp.geu.f32	%p20, %f86, 0f3F000000;
	@%p20 bra 	BB4_15;

	cvt.rzi.f32.f32	%f134, %f9;

BB4_15:
	add.s32 	%r87, %r47, -2;
	setp.lt.u32	%p22, %r6, %r87;
	setp.gt.s32	%p23, %r6, 1;
	and.pred  	%p24, %p23, %p22;
	cvt.rzi.s32.f32	%r88, %f134;
	setp.gt.s32	%p25, %r88, 1;
	and.pred  	%p26, %p24, %p25;
	add.s32 	%r89, %r48, -2;
	setp.lt.u32	%p27, %r88, %r89;
	and.pred  	%p28, %p27, %p26;
	mov.f32 	%f136, %f141;
	@!%p28 bra 	BB4_17;
	bra.uni 	BB4_16;

BB4_16:
	cvt.rmi.f32.f32	%f89, %f8;
	cvt.rzi.u32.f32	%r90, %f89;
	cvt.rmi.f32.f32	%f90, %f9;
	cvt.rzi.u32.f32	%r91, %f90;
	cvt.rn.f32.u32	%f91, %r90;
	sub.f32 	%f92, %f8, %f91;
	cvt.rn.f32.u32	%f93, %r91;
	sub.f32 	%f94, %f9, %f93;
	mul.lo.s32 	%r92, %r91, %r50;
	cvt.u64.u32	%rd18, %r92;
	cvta.to.global.u64 	%rd19, %rd5;
	add.s64 	%rd20, %rd19, %rd18;
	mul.wide.u32 	%rd21, %r90, 16;
	add.s64 	%rd22, %rd20, %rd21;
	add.s32 	%r93, %r90, 1;
	mul.wide.u32 	%rd23, %r93, 16;
	add.s64 	%rd24, %rd20, %rd23;
	add.s32 	%r94, %r91, 1;
	mul.lo.s32 	%r95, %r94, %r50;
	cvt.u64.u32	%rd25, %r95;
	add.s64 	%rd26, %rd19, %rd25;
	add.s64 	%rd27, %rd26, %rd21;
	add.s64 	%rd28, %rd26, %rd23;
	mov.f32 	%f95, 0f3F800000;
	sub.f32 	%f96, %f95, %f92;
	ld.global.f32 	%f97, [%rd22];
	ld.global.f32 	%f98, [%rd24];
	mul.f32 	%f99, %f92, %f98;
	fma.rn.f32 	%f100, %f97, %f96, %f99;
	sub.f32 	%f101, %f95, %f94;
	ld.global.f32 	%f102, [%rd27];
	ld.global.f32 	%f103, [%rd28];
	mul.f32 	%f104, %f92, %f103;
	fma.rn.f32 	%f105, %f96, %f102, %f104;
	mul.f32 	%f106, %f94, %f105;
	fma.rn.f32 	%f141, %f101, %f100, %f106;
	ld.global.f32 	%f107, [%rd22+4];
	ld.global.f32 	%f108, [%rd24+4];
	mul.f32 	%f109, %f92, %f108;
	fma.rn.f32 	%f110, %f96, %f107, %f109;
	ld.global.f32 	%f111, [%rd27+4];
	ld.global.f32 	%f112, [%rd28+4];
	mul.f32 	%f113, %f92, %f112;
	fma.rn.f32 	%f114, %f96, %f111, %f113;
	mul.f32 	%f115, %f94, %f114;
	fma.rn.f32 	%f136, %f101, %f110, %f115;
	mov.pred 	%p92, 0;
	bra.uni 	BB4_17;

BB4_10:
	mov.f32 	%f136, %f141;

BB4_17:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	@%p92 bra 	BB4_45;
	bra.uni 	BB4_18;

BB4_45:
	setp.lt.f32	%p63, %f7, 0f3F800000;
	selp.f32	%f29, 0f3F800000, %f7, %p63;
	abs.f32 	%f126, %f29;
	mov.b32 	 %r142, %f29;
	and.b32  	%r143, %r142, -2147483648;
	or.b32  	%r144, %r143, 1056964608;
	mov.b32 	 %f127, %r144;
	add.f32 	%f128, %f29, %f127;
	cvt.rzi.f32.f32	%f129, %f128;
	setp.gt.f32	%p64, %f126, 0f4B000000;
	selp.f32	%f140, %f29, %f129, %p64;
	setp.geu.f32	%p65, %f126, 0f3F000000;
	@%p65 bra 	BB4_47;

	cvt.rzi.f32.f32	%f140, %f29;

BB4_47:
	cvt.rn.f64.u32	%fd100, %r47;
	sub.f64 	%fd101, %fd39, %fd1;
	div.rn.f64 	%fd21, %fd101, %fd100;
	cvt.rn.f64.u32	%fd102, %r48;
	sub.f64 	%fd103, %fd2, %fd38;
	div.rn.f64 	%fd22, %fd103, %fd102;
	cvt.rzi.u32.f32	%r25, %f140;
	setp.lt.u32	%p66, %r25, 65;
	@%p66 bra 	BB4_49;

	mov.u64 	%rd61, $str7;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str2;
	cvta.global.u64 	%rd64, %rd63;
	mov.u32 	%r145, 113;
	mov.u64 	%rd65, 0;
	mov.u64 	%rd66, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r145;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd65;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd66;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_49:
	setp.eq.s32	%p67, %r25, 0;
	mov.u32 	%r200, 0;
	mov.u32 	%r199, %r200;
	@%p67 bra 	BB4_68;

	cvt.rn.f64.u32	%fd23, %r4;
	cvt.rn.f64.u32	%fd24, %r5;
	ld.const.u32 	%r150, [amplifier];
	cvt.rn.f64.s32	%fd25, %r150;
	and.b32  	%r26, %r49, 1;
	mov.u32 	%r192, 0;
	mov.u32 	%r200, %r192;
	mov.u32 	%r199, %r25;

BB4_51:
	mov.u32 	%r29, %r199;
	mov.u32 	%r27, %r192;
	cvt.rn.f64.u32	%fd104, %r29;
	cvt.rn.f64.u32	%fd105, %r27;
	div.rn.f64 	%fd106, %fd105, %fd104;
	add.f64 	%fd107, %fd23, %fd106;
	add.f64 	%fd108, %fd24, %fd106;
	neg.f64 	%fd109, %fd108;
	fma.rn.f64 	%fd110, %fd21, %fd107, %fd1;
	fma.rn.f64 	%fd111, %fd22, %fd109, %fd2;
	abs.f64 	%fd112, %fd110;
	abs.f64 	%fd113, %fd111;
	add.f64 	%fd114, %fd112, %fd113;
	mul.f64 	%fd115, %fd114, %fd25;
	cvt.rzi.s32.f64	%r151, %fd115;
	cvt.rn.f32.s32	%f130, %r151;
	cvt.rzi.u32.f32	%r30, %f130;
	add.s32 	%r200, %r30, %r200;
	setp.gt.u32	%p68, %r27, 9;
	@%p68 bra 	BB4_53;

	mul.wide.u32 	%rd69, %r27, 4;
	add.s64 	%rd70, %rd1, %rd69;
	st.local.u32 	[%rd70], %r30;

BB4_53:
	setp.lt.u32	%p69, %r27, 10;
	setp.ne.s32	%p70, %r27, 0;
	and.pred  	%p71, %p69, %p70;
	setp.ne.s32	%p72, %r26, 0;
	and.pred  	%p73, %p71, %p72;
	shr.u32 	%r32, %r29, 1;
	setp.eq.s32	%p74, %r27, %r32;
	or.pred  	%p75, %p73, %p74;
	add.s32 	%r192, %r27, 1;
	mov.u32 	%r199, %r29;
	@!%p75 bra 	BB4_67;
	bra.uni 	BB4_54;

BB4_54:
	div.u32 	%r152, %r200, %r192;
	cvt.rn.f64.u32	%fd26, %r152;
	setp.eq.s32	%p76, %r27, 0;
	mov.f64 	%fd148, 0d0000000000000000;
	@%p76 bra 	BB4_63;

	and.b32  	%r34, %r27, 3;
	setp.eq.s32	%p77, %r34, 0;
	mov.f64 	%fd148, 0d0000000000000000;
	mov.u32 	%r198, 0;
	@%p77 bra 	BB4_61;

	setp.eq.s32	%p78, %r34, 1;
	mov.f64 	%fd145, 0d0000000000000000;
	mov.u32 	%r196, 0;
	@%p78 bra 	BB4_60;

	setp.eq.s32	%p79, %r34, 2;
	mov.f64 	%fd144, 0d0000000000000000;
	mov.u32 	%r195, 0;
	@%p79 bra 	BB4_59;

	ld.local.u32 	%r157, [%rd1];
	cvt.rn.f64.u32	%fd120, %r157;
	sub.f64 	%fd121, %fd120, %fd26;
	fma.rn.f64 	%fd144, %fd121, %fd121, 0d0000000000000000;
	mov.u32 	%r195, 1;

BB4_59:
	mul.wide.u32 	%rd73, %r195, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.local.u32 	%r158, [%rd74];
	cvt.rn.f64.u32	%fd122, %r158;
	sub.f64 	%fd123, %fd122, %fd26;
	fma.rn.f64 	%fd145, %fd123, %fd123, %fd144;
	add.s32 	%r196, %r195, 1;

BB4_60:
	mul.wide.u32 	%rd77, %r196, 4;
	add.s64 	%rd78, %rd1, %rd77;
	ld.local.u32 	%r159, [%rd78];
	cvt.rn.f64.u32	%fd124, %r159;
	sub.f64 	%fd125, %fd124, %fd26;
	fma.rn.f64 	%fd148, %fd125, %fd125, %fd145;
	add.s32 	%r198, %r196, 1;

BB4_61:
	setp.lt.u32	%p80, %r27, 4;
	@%p80 bra 	BB4_63;

BB4_62:
	mul.wide.u32 	%rd80, %r198, 4;
	add.s64 	%rd81, %rd1, %rd80;
	ld.local.u32 	%r160, [%rd81];
	cvt.rn.f64.u32	%fd126, %r160;
	sub.f64 	%fd127, %fd126, %fd26;
	fma.rn.f64 	%fd128, %fd127, %fd127, %fd148;
	add.s32 	%r161, %r198, 1;
	mul.wide.u32 	%rd82, %r161, 4;
	add.s64 	%rd83, %rd1, %rd82;
	ld.local.u32 	%r162, [%rd83];
	cvt.rn.f64.u32	%fd129, %r162;
	sub.f64 	%fd130, %fd129, %fd26;
	fma.rn.f64 	%fd131, %fd130, %fd130, %fd128;
	add.s32 	%r163, %r198, 2;
	mul.wide.u32 	%rd84, %r163, 4;
	add.s64 	%rd85, %rd1, %rd84;
	ld.local.u32 	%r164, [%rd85];
	cvt.rn.f64.u32	%fd132, %r164;
	sub.f64 	%fd133, %fd132, %fd26;
	fma.rn.f64 	%fd134, %fd133, %fd133, %fd131;
	add.s32 	%r165, %r198, 3;
	mul.wide.u32 	%rd86, %r165, 4;
	add.s64 	%rd87, %rd1, %rd86;
	ld.local.u32 	%r166, [%rd87];
	cvt.rn.f64.u32	%fd135, %r166;
	sub.f64 	%fd136, %fd135, %fd26;
	fma.rn.f64 	%fd148, %fd136, %fd136, %fd134;
	add.s32 	%r198, %r198, 4;
	setp.lt.u32	%p81, %r198, %r27;
	@%p81 bra 	BB4_62;

BB4_63:
	add.s32 	%r167, %r27, -1;
	cvt.rn.f64.u32	%fd137, %r167;
	div.rn.f64 	%fd138, %fd148, %fd137;
	div.rn.f64 	%fd36, %fd138, %fd26;
	setp.ne.s32	%p82, %r27, 1;
	@%p82 bra 	BB4_65;

	// inline asm
	activemask.b32 %r168;
	// inline asm
	ld.local.v2.u32 	{%r170, %r171}, [%rd1];
	setp.eq.s32	%p83, %r170, %r171;
	vote.sync.all.pred 	%p84, %p83, %r168;
	mov.u32 	%r199, 2;
	@%p84 bra 	BB4_67;

BB4_65:
	// inline asm
	activemask.b32 %r175;
	// inline asm
	setp.lt.f64	%p85, %fd36, 0d3F847AE140000000;
	vote.sync.all.pred 	%p86, %p85, %r175;
	mov.u32 	%r199, %r192;
	@%p86 bra 	BB4_67;

	// inline asm
	activemask.b32 %r177;
	// inline asm
	setp.le.f64	%p87, %fd36, 0d3FF0000000000000;
	vote.sync.all.pred 	%p88, %p87, %r177;
	setp.ge.u32	%p89, %r27, %r32;
	and.pred  	%p90, %p88, %p89;
	selp.b32	%r199, %r192, %r29, %p90;

BB4_67:
	setp.lt.u32	%p91, %r192, %r199;
	@%p91 bra 	BB4_51;

BB4_68:
	cvt.rn.f32.u32	%f136, %r199;
	div.u32 	%r179, %r200, %r199;
	cvt.rn.f32.u32	%f141, %r179;
	mov.u16 	%rs9, 0;
	bra.uni 	BB4_69;

BB4_18:
	shr.u32 	%r96, %r49, 5;
	and.b32  	%r97, %r96, 1;
	setp.eq.b32	%p30, %r97, 1;
	not.pred 	%p31, %p30;
	setp.eq.s16	%p32, %rs8, 0;
	mov.u16 	%rs9, 1;
	or.pred  	%p33, %p32, %p31;
	@%p33 bra 	BB4_69;

	setp.lt.f32	%p34, %f7, 0f3F800000;
	mov.f32 	%f138, 0f00000000;
	mov.f32 	%f139, %f138;
	@%p34 bra 	BB4_44;

	abs.f32 	%f118, %f7;
	mov.b32 	 %r98, %f7;
	and.b32  	%r99, %r98, -2147483648;
	or.b32  	%r100, %r99, 1056964608;
	mov.b32 	 %f119, %r100;
	add.f32 	%f120, %f7, %f119;
	cvt.rzi.f32.f32	%f121, %f120;
	setp.gt.f32	%p35, %f118, 0f4B000000;
	selp.f32	%f137, %f7, %f121, %p35;
	setp.geu.f32	%p36, %f118, 0f3F000000;
	@%p36 bra 	BB4_22;

	cvt.rzi.f32.f32	%f137, %f7;

BB4_22:
	cvt.rn.f64.u32	%fd61, %r47;
	sub.f64 	%fd62, %fd39, %fd1;
	div.rn.f64 	%fd5, %fd62, %fd61;
	cvt.rn.f64.u32	%fd63, %r48;
	sub.f64 	%fd64, %fd2, %fd38;
	div.rn.f64 	%fd6, %fd64, %fd63;
	cvt.rzi.u32.f32	%r7, %f137;
	setp.lt.u32	%p37, %r7, 65;
	@%p37 bra 	BB4_24;

	mov.u64 	%rd30, $str7;
	cvta.global.u64 	%rd31, %rd30;
	mov.u64 	%rd32, $str2;
	cvta.global.u64 	%rd33, %rd32;
	mov.u32 	%r101, 113;
	mov.u64 	%rd34, 0;
	mov.u64 	%rd35, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd31;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd33;
	.param .b32 param2;
	st.param.b32	[param2+0], %r101;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd34;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd35;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_24:
	setp.eq.s32	%p38, %r7, 0;
	mov.u32 	%r190, 0;
	mov.u32 	%r189, %r190;
	@%p38 bra 	BB4_43;

	cvt.rn.f64.u32	%fd7, %r4;
	cvt.rn.f64.u32	%fd8, %r5;
	ld.const.u32 	%r106, [amplifier];
	cvt.rn.f64.s32	%fd9, %r106;
	mov.u32 	%r182, 0;
	mov.u32 	%r190, %r182;
	mov.u32 	%r189, %r7;

BB4_26:
	mov.u32 	%r10, %r189;
	mov.u32 	%r8, %r182;
	cvt.rn.f64.u32	%fd65, %r10;
	cvt.rn.f64.u32	%fd66, %r8;
	div.rn.f64 	%fd67, %fd66, %fd65;
	add.f64 	%fd68, %fd7, %fd67;
	add.f64 	%fd69, %fd8, %fd67;
	neg.f64 	%fd70, %fd69;
	fma.rn.f64 	%fd71, %fd5, %fd68, %fd1;
	fma.rn.f64 	%fd72, %fd6, %fd70, %fd2;
	abs.f64 	%fd73, %fd71;
	abs.f64 	%fd74, %fd72;
	add.f64 	%fd75, %fd73, %fd74;
	mul.f64 	%fd76, %fd75, %fd9;
	cvt.rzi.s32.f64	%r107, %fd76;
	cvt.rn.f32.s32	%f122, %r107;
	cvt.rzi.u32.f32	%r11, %f122;
	add.s32 	%r190, %r11, %r190;
	setp.gt.u32	%p39, %r8, 9;
	@%p39 bra 	BB4_28;

	mul.wide.u32 	%rd38, %r8, 4;
	add.s64 	%rd39, %rd1, %rd38;
	st.local.u32 	[%rd39], %r11;

BB4_28:
	setp.lt.u32	%p40, %r8, 10;
	and.b32  	%r108, %r49, 1;
	setp.eq.b32	%p41, %r108, 1;
	setp.ne.s32	%p42, %r8, 0;
	and.pred  	%p43, %p40, %p42;
	and.pred  	%p44, %p43, %p41;
	shr.u32 	%r109, %r10, 1;
	setp.eq.s32	%p45, %r8, %r109;
	or.pred  	%p46, %p44, %p45;
	add.s32 	%r182, %r8, 1;
	mov.u32 	%r189, %r10;
	@!%p46 bra 	BB4_42;
	bra.uni 	BB4_29;

BB4_29:
	div.u32 	%r110, %r190, %r182;
	cvt.rn.f64.u32	%fd10, %r110;
	setp.eq.s32	%p47, %r8, 0;
	mov.f64 	%fd143, 0d0000000000000000;
	@%p47 bra 	BB4_38;

	and.b32  	%r112, %r8, 3;
	setp.eq.s32	%p48, %r112, 0;
	mov.f64 	%fd143, 0d0000000000000000;
	mov.u32 	%r188, 0;
	@%p48 bra 	BB4_36;

	setp.eq.s32	%p49, %r112, 1;
	mov.f64 	%fd140, 0d0000000000000000;
	mov.u32 	%r186, 0;
	@%p49 bra 	BB4_35;

	setp.eq.s32	%p50, %r112, 2;
	mov.f64 	%fd139, 0d0000000000000000;
	mov.u32 	%r185, 0;
	@%p50 bra 	BB4_34;

	ld.local.u32 	%r118, [%rd1];
	cvt.rn.f64.u32	%fd81, %r118;
	sub.f64 	%fd82, %fd81, %fd10;
	fma.rn.f64 	%fd139, %fd82, %fd82, 0d0000000000000000;
	mov.u32 	%r185, 1;

BB4_34:
	mul.wide.u32 	%rd44, %r185, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.local.u32 	%r119, [%rd45];
	cvt.rn.f64.u32	%fd83, %r119;
	sub.f64 	%fd84, %fd83, %fd10;
	fma.rn.f64 	%fd140, %fd84, %fd84, %fd139;
	add.s32 	%r186, %r185, 1;

BB4_35:
	mul.wide.u32 	%rd48, %r186, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r120, [%rd49];
	cvt.rn.f64.u32	%fd85, %r120;
	sub.f64 	%fd86, %fd85, %fd10;
	fma.rn.f64 	%fd143, %fd86, %fd86, %fd140;
	add.s32 	%r188, %r186, 1;

BB4_36:
	setp.lt.u32	%p51, %r8, 4;
	@%p51 bra 	BB4_38;

BB4_37:
	mul.wide.u32 	%rd51, %r188, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.local.u32 	%r121, [%rd52];
	cvt.rn.f64.u32	%fd87, %r121;
	sub.f64 	%fd88, %fd87, %fd10;
	fma.rn.f64 	%fd89, %fd88, %fd88, %fd143;
	add.s32 	%r122, %r188, 1;
	mul.wide.u32 	%rd53, %r122, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.local.u32 	%r123, [%rd54];
	cvt.rn.f64.u32	%fd90, %r123;
	sub.f64 	%fd91, %fd90, %fd10;
	fma.rn.f64 	%fd92, %fd91, %fd91, %fd89;
	add.s32 	%r124, %r188, 2;
	mul.wide.u32 	%rd55, %r124, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.local.u32 	%r125, [%rd56];
	cvt.rn.f64.u32	%fd93, %r125;
	sub.f64 	%fd94, %fd93, %fd10;
	fma.rn.f64 	%fd95, %fd94, %fd94, %fd92;
	add.s32 	%r126, %r188, 3;
	mul.wide.u32 	%rd57, %r126, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.local.u32 	%r127, [%rd58];
	cvt.rn.f64.u32	%fd96, %r127;
	sub.f64 	%fd97, %fd96, %fd10;
	fma.rn.f64 	%fd143, %fd97, %fd97, %fd95;
	add.s32 	%r188, %r188, 4;
	setp.lt.u32	%p52, %r188, %r8;
	@%p52 bra 	BB4_37;

BB4_38:
	add.s32 	%r128, %r8, -1;
	cvt.rn.f64.u32	%fd98, %r128;
	div.rn.f64 	%fd99, %fd143, %fd98;
	div.rn.f64 	%fd20, %fd99, %fd10;
	setp.ne.s32	%p53, %r8, 1;
	@%p53 bra 	BB4_40;

	// inline asm
	activemask.b32 %r129;
	// inline asm
	ld.local.v2.u32 	{%r131, %r132}, [%rd1];
	setp.eq.s32	%p54, %r131, %r132;
	vote.sync.all.pred 	%p55, %p54, %r129;
	mov.u32 	%r189, 2;
	@%p55 bra 	BB4_42;

BB4_40:
	// inline asm
	activemask.b32 %r136;
	// inline asm
	setp.lt.f64	%p56, %fd20, 0d3F847AE140000000;
	vote.sync.all.pred 	%p57, %p56, %r136;
	mov.u32 	%r189, %r182;
	@%p57 bra 	BB4_42;

	// inline asm
	activemask.b32 %r138;
	// inline asm
	setp.le.f64	%p58, %fd20, 0d3FF0000000000000;
	vote.sync.all.pred 	%p59, %p58, %r138;
	setp.ge.u32	%p60, %r8, %r109;
	and.pred  	%p61, %p59, %p60;
	selp.b32	%r189, %r182, %r10, %p61;

BB4_42:
	setp.lt.u32	%p62, %r182, %r189;
	@%p62 bra 	BB4_26;

BB4_43:
	cvt.rn.f32.u32	%f138, %r189;
	div.u32 	%r141, %r190, %r189;
	cvt.rn.f32.u32	%f139, %r141;

BB4_44:
	mul.f32 	%f123, %f136, 0f3F400000;
	add.f32 	%f136, %f123, %f138;
	mul.f32 	%f124, %f138, %f139;
	fma.rn.f32 	%f125, %f141, %f123, %f124;
	div.rn.f32 	%f141, %f125, %f136;

BB4_69:
	mul.lo.s32 	%r180, %r5, %r46;
	cvt.u64.u32	%rd88, %r180;
	cvta.to.global.u64 	%rd89, %rd4;
	add.s64 	%rd90, %rd89, %rd88;
	mul.wide.u32 	%rd91, %r4, 16;
	add.s64 	%rd92, %rd90, %rd91;
	st.global.f32 	[%rd92], %f141;
	st.global.f32 	[%rd92+4], %f136;
	mov.u32 	%r181, 0;
	st.global.u32 	[%rd92+12], %r181;
	st.global.u8 	[%rd92+8], %rs9;

BB4_70:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .f32 compose_param_9
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<16>;
	.reg .b32 	%r<38>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r7, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r9, [compose_param_5];
	ld.param.u32 	%r10, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.f32 	%f5, [compose_param_9];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r2, %r14, %r15, %r16;
	setp.ge.u32	%p1, %r2, %r10;
	setp.ge.u32	%p2, %r1, %r9;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_9;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r17, %r2, %r7;
	cvt.u64.u32	%rd6, %r17;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.u32 	%rd8, %r1, 16;
	add.s64 	%rd1, %rd7, %rd8;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	@%p4 bra 	BB5_3;

	ld.global.f32 	%f6, [%rd1+4];
	cvt.rzi.u32.f32	%r18, %f6;
	cvt.rzi.u32.f32	%r19, %f5;
	min.u32 	%r20, %r18, %r19;
	cvt.rn.f32.u32	%f7, %r20;
	cvt.rn.f32.u32	%f8, %r19;
	div.rn.f32 	%f9, %f7, %f8;
	mul.f32 	%f10, %f9, 0f437F0000;
	cvt.rzi.s32.f32	%r21, %f10;
	and.b32  	%r22, %r21, 255;
	prmt.b32 	%r23, %r22, %r22, 30212;
	prmt.b32 	%r24, %r22, %r23, 28756;
	or.b32  	%r25, %r24, -16777216;
	ld.global.u8 	%rs2, [%rd1+8];
	setp.eq.s16	%p5, %rs2, 0;
	selp.b32	%r37, %r25, -16777216, %p5;
	bra.uni 	BB5_8;

BB5_3:
	ld.global.f32 	%f1, [%rd1];
	abs.f32 	%f11, %f1;
	mov.b32 	 %r26, %f1;
	and.b32  	%r27, %r26, -2147483648;
	or.b32  	%r28, %r27, 1056964608;
	mov.b32 	 %f12, %r28;
	add.f32 	%f13, %f1, %f12;
	cvt.rzi.f32.f32	%f14, %f13;
	setp.gt.f32	%p6, %f11, 0f4B000000;
	selp.f32	%f15, %f1, %f14, %p6;
	setp.geu.f32	%p7, %f11, 0f3F000000;
	@%p7 bra 	BB5_5;

	cvt.rzi.f32.f32	%f15, %f1;

BB5_5:
	cvt.rzi.u32.f32	%r29, %f15;
	shl.b32 	%r30, %r29, 7;
	rem.u32 	%r31, %r30, %r8;
	sub.s32 	%r32, %r8, %r31;
	add.s32 	%r4, %r32, -1;
	setp.lt.u32	%p8, %r4, %r8;
	@%p8 bra 	BB5_7;

	mov.u64 	%rd9, $str8;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str9;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r33, 20;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r33;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB5_7:
	shl.b32 	%r34, %r4, 2;
	mov.u32 	%r35, 0;
	suld.b.2d.b32.trap {%r37}, [%rd4, {%r34, %r35}];

BB5_8:
	shl.b32 	%r36, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r36, %r2}], {%r37};

BB5_9:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r9, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r10, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r11, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f4, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f5, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f6, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f7, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r16, %r14, %r13, %r15;
	mul.lo.s32 	%r1, %r16, %r12;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %ntid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r20, %r17, %r18, %r19;
	mul.lo.s32 	%r2, %r20, %r12;
	sub.s32 	%r21, %r11, %r12;
	setp.ge.u32	%p1, %r2, %r21;
	sub.s32 	%r22, %r10, %r12;
	setp.ge.u32	%p2, %r1, %r22;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_10;

	sub.f32 	%f8, %f6, %f4;
	cvt.rn.f32.u32	%f9, %r10;
	div.rn.f32 	%f10, %f8, %f9;
	cvt.rn.f32.u32	%f11, %r1;
	fma.rn.f32 	%f1, %f11, %f10, %f4;
	setp.eq.s32	%p4, %r12, 0;
	@%p4 bra 	BB6_10;

	ld.const.u32 	%r27, [amplifier];
	cvt.rn.f32.s32	%f12, %r27;
	cvt.rn.f32.u32	%f13, %r2;
	sub.f32 	%f14, %f7, %f5;
	cvt.rn.f32.u32	%f15, %r11;
	div.rn.f32 	%f16, %f14, %f15;
	mul.f32 	%f17, %f13, %f16;
	sub.f32 	%f18, %f7, %f17;
	abs.f32 	%f19, %f18;
	abs.f32 	%f20, %f1;
	add.f32 	%f21, %f20, %f19;
	mul.f32 	%f22, %f21, %f12;
	cvt.rzi.s32.f32	%r28, %f22;
	cvt.rn.f32.s32	%f23, %r28;
	cvt.rzi.u32.f32	%r29, %f23;
	mul.lo.s32 	%r30, %r2, %r9;
	cvt.u64.u32	%rd3, %r30;
	cvta.to.global.u64 	%rd4, %rd2;
	add.s64 	%rd5, %rd4, %rd3;
	cvt.rn.f32.u32	%f24, %r12;
	rcp.rn.f32 	%f2, %f24;
	cvt.rn.f32.u32	%f3, %r29;
	mul.wide.u32 	%rd6, %r1, 16;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r26, %r12, 3;
	mov.u32 	%r36, 1;
	mov.u32 	%r39, 0;
	setp.eq.s32	%p5, %r26, 0;
	@%p5 bra 	BB6_8;

	setp.eq.s32	%p6, %r26, 1;
	mov.u32 	%r37, %r39;
	@%p6 bra 	BB6_7;

	setp.eq.s32	%p7, %r26, 2;
	@%p7 bra 	BB6_6;

	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r32, 0;
	st.global.u32 	[%rd1+12], %r32;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd1+8], %rs1;
	mov.u32 	%r36, 2;

BB6_6:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r33, 0;
	st.global.u32 	[%rd1+12], %r33;
	mov.u16 	%rs2, 0;
	st.global.u8 	[%rd1+8], %rs2;
	mov.u32 	%r37, %r36;

BB6_7:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	st.global.u32 	[%rd1+12], %r39;
	mov.u16 	%rs3, 0;
	st.global.u8 	[%rd1+8], %rs3;
	add.s32 	%r39, %r37, 1;

BB6_8:
	setp.lt.u32	%p8, %r12, 4;
	@%p8 bra 	BB6_10;

BB6_9:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r35, 0;
	st.global.u32 	[%rd1+12], %r35;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd1+8], %rs4;
	add.s32 	%r39, %r39, 4;
	setp.lt.u32	%p9, %r39, %r12;
	@%p9 bra 	BB6_9;

BB6_10:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 15

BB7_2:
	ret;
}


