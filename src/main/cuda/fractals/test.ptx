//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 4 .u32 amplifier;
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[17] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 116, 101, 115, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str7[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str9[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str10[120] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<32>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<74>;
	.reg .b32 	%r<100>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r23, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r24, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f25, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f24, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r97, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 71;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r24;
	setp.lt.u32	%p3, %r5, %r25;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_27;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r97, 65;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd8, $str8;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 119;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r97, 0;
	cvt.rn.f32.u32	%f73, %r97;
	mov.u32 	%r48, 0;
	@%p6 bra 	BB1_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	ld.const.u32 	%r51, [amplifier];
	cvt.rn.f32.s32	%f6, %r51;
	cvt.rn.f32.u32	%f27, %r24;
	sub.f32 	%f28, %f25, %f1;
	div.rn.f32 	%f7, %f28, %f27;
	cvt.rn.f32.u32	%f29, %r25;
	sub.f32 	%f30, %f2, %f24;
	div.rn.f32 	%f8, %f30, %f29;
	mov.u32 	%r90, 0;
	and.b32  	%r53, %r27, 1;
	mov.u32 	%r98, %r90;

BB1_8:
	mov.u32 	%r8, %r97;
	mov.u32 	%r6, %r90;
	cvt.rn.f32.u32	%f31, %r6;
	div.rn.f32 	%f32, %f31, %f73;
	add.f32 	%f33, %f4, %f32;
	add.f32 	%f34, %f5, %f32;
	neg.f32 	%f35, %f34;
	fma.rn.f32 	%f36, %f7, %f33, %f1;
	fma.rn.f32 	%f37, %f8, %f35, %f2;
	abs.f32 	%f38, %f36;
	abs.f32 	%f39, %f37;
	add.f32 	%f40, %f38, %f39;
	mul.f32 	%f41, %f40, %f6;
	cvt.rzi.s32.f32	%r52, %f41;
	cvt.rn.f32.s32	%f42, %r52;
	cvt.rzi.u32.f32	%r9, %f42;
	add.s32 	%r98, %r9, %r98;
	setp.gt.u32	%p7, %r6, 9;
	@%p7 bra 	BB1_10;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r6, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r9;

BB1_10:
	setp.lt.u32	%p8, %r6, 10;
	setp.eq.b32	%p9, %r53, 1;
	setp.ne.s32	%p10, %r6, 0;
	and.pred  	%p11, %p8, %p10;
	and.pred  	%p12, %p11, %p9;
	shr.u32 	%r54, %r8, 1;
	setp.eq.s32	%p13, %r6, %r54;
	or.pred  	%p14, %p12, %p13;
	add.s32 	%r90, %r6, 1;
	mov.u32 	%r97, %r8;
	@!%p14 bra 	BB1_24;
	bra.uni 	BB1_11;

BB1_11:
	div.u32 	%r55, %r98, %r90;
	cvt.rn.f32.u32	%f10, %r55;
	setp.eq.s32	%p15, %r6, 0;
	mov.f32 	%f72, 0f00000000;
	@%p15 bra 	BB1_20;

	and.b32  	%r57, %r6, 3;
	setp.eq.s32	%p16, %r57, 0;
	mov.f32 	%f72, 0f00000000;
	mov.u32 	%r96, 0;
	@%p16 bra 	BB1_18;

	setp.eq.s32	%p17, %r57, 1;
	mov.f32 	%f69, 0f00000000;
	mov.u32 	%r94, 0;
	@%p17 bra 	BB1_17;

	setp.eq.s32	%p18, %r57, 2;
	mov.f32 	%f68, 0f00000000;
	mov.u32 	%r93, 0;
	@%p18 bra 	BB1_16;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	ld.local.u32 	%r63, [%rd19];
	cvt.rn.f32.u32	%f47, %r63;
	sub.f32 	%f48, %f47, %f10;
	fma.rn.f32 	%f68, %f48, %f48, 0f00000000;
	mov.u32 	%r93, 1;

BB1_16:
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r93, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.local.u32 	%r64, [%rd23];
	cvt.rn.f32.u32	%f49, %r64;
	sub.f32 	%f50, %f49, %f10;
	fma.rn.f32 	%f69, %f50, %f50, %f68;
	add.s32 	%r94, %r93, 1;

BB1_17:
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	mul.wide.u32 	%rd26, %r94, 4;
	add.s64 	%rd27, %rd25, %rd26;
	ld.local.u32 	%r65, [%rd27];
	cvt.rn.f32.u32	%f51, %r65;
	sub.f32 	%f52, %f51, %f10;
	fma.rn.f32 	%f72, %f52, %f52, %f69;
	add.s32 	%r96, %r94, 1;

BB1_18:
	setp.lt.u32	%p19, %r6, 4;
	@%p19 bra 	BB1_20;

BB1_19:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r96, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.local.u32 	%r66, [%rd31];
	cvt.rn.f32.u32	%f53, %r66;
	sub.f32 	%f54, %f53, %f10;
	fma.rn.f32 	%f55, %f54, %f54, %f72;
	add.s32 	%r67, %r96, 1;
	mul.wide.u32 	%rd32, %r67, 4;
	add.s64 	%rd33, %rd29, %rd32;
	ld.local.u32 	%r68, [%rd33];
	cvt.rn.f32.u32	%f56, %r68;
	sub.f32 	%f57, %f56, %f10;
	fma.rn.f32 	%f58, %f57, %f57, %f55;
	add.s32 	%r69, %r96, 2;
	mul.wide.u32 	%rd34, %r69, 4;
	add.s64 	%rd35, %rd29, %rd34;
	ld.local.u32 	%r70, [%rd35];
	cvt.rn.f32.u32	%f59, %r70;
	sub.f32 	%f60, %f59, %f10;
	fma.rn.f32 	%f61, %f60, %f60, %f58;
	add.s32 	%r71, %r96, 3;
	mul.wide.u32 	%rd36, %r71, 4;
	add.s64 	%rd37, %rd29, %rd36;
	ld.local.u32 	%r72, [%rd37];
	cvt.rn.f32.u32	%f62, %r72;
	sub.f32 	%f63, %f62, %f10;
	fma.rn.f32 	%f72, %f63, %f63, %f61;
	add.s32 	%r96, %r96, 4;
	setp.lt.u32	%p20, %r96, %r6;
	@%p20 bra 	BB1_19;

BB1_20:
	add.s32 	%r73, %r6, -1;
	cvt.rn.f32.u32	%f64, %r73;
	div.rn.f32 	%f65, %f72, %f64;
	div.rn.f32 	%f20, %f65, %f10;
	setp.ne.s32	%p21, %r6, 1;
	@%p21 bra 	BB1_22;

	// inline asm
	activemask.b32 %r74;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r76, %r77}, [%rd39];
	setp.eq.s32	%p22, %r76, %r77;
	vote.sync.all.pred 	%p23, %p22, %r74;
	mov.u32 	%r97, 2;
	@%p23 bra 	BB1_24;

BB1_22:
	// inline asm
	activemask.b32 %r81;
	// inline asm
	setp.lt.f32	%p24, %f20, 0f3C23D70A;
	vote.sync.all.pred 	%p25, %p24, %r81;
	mov.u32 	%r97, %r90;
	@%p25 bra 	BB1_24;

	// inline asm
	activemask.b32 %r83;
	// inline asm
	setp.le.f32	%p26, %f20, 0f3F800000;
	vote.sync.all.pred 	%p27, %p26, %r83;
	setp.ge.u32	%p28, %r6, %r54;
	and.pred  	%p29, %p27, %p28;
	selp.b32	%r97, %r90, %r8, %p29;

BB1_24:
	cvt.rn.f32.u32	%f73, %r97;
	setp.lt.u32	%p30, %r90, %r97;
	@%p30 bra 	BB1_8;
	bra.uni 	BB1_25;

BB1_6:
	mov.u32 	%r98, %r48;
	mov.u32 	%r97, %r48;

BB1_25:
	mul.lo.s32 	%r86, %r5, %r23;
	cvt.u64.u32	%rd40, %r86;
	cvta.to.global.u64 	%rd41, %rd1;
	add.s64 	%rd42, %rd41, %rd40;
	div.u32 	%r87, %r98, %r97;
	cvt.rn.f32.u32	%f66, %r87;
	mul.wide.u32 	%rd43, %r4, 16;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f66;
	st.global.f32 	[%rd44+4], %f73;
	st.global.u32 	[%rd44+12], %r48;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd44+8], %rs1;
	setp.gt.f32	%p31, %f73, 0f00000000;
	@%p31 bra 	BB1_27;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r89, 206;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r89;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_27:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<32>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<100>;
	.reg .f64 	%fd<67>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r23, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r24, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd21, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd20, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 71;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r24;
	setp.lt.u32	%p3, %r5, %r25;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_26;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r26, 65;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd8, $str8;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 119;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r26, 0;
	mov.u32 	%r48, 0;
	mov.u32 	%r98, %r48;
	mov.u32 	%r97, %r48;
	@%p6 bra 	BB2_24;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.u32 	%r51, [amplifier];
	cvt.rn.f64.s32	%fd5, %r51;
	cvt.rn.f64.u32	%fd23, %r24;
	sub.f64 	%fd24, %fd21, %fd1;
	div.rn.f64 	%fd6, %fd24, %fd23;
	cvt.rn.f64.u32	%fd25, %r25;
	sub.f64 	%fd26, %fd2, %fd20;
	div.rn.f64 	%fd7, %fd26, %fd25;
	mov.u32 	%r90, 0;
	and.b32  	%r53, %r27, 1;
	mov.u32 	%r98, %r90;
	mov.u32 	%r97, %r26;

BB2_7:
	mov.u32 	%r8, %r97;
	mov.u32 	%r6, %r90;
	cvt.rn.f64.u32	%fd27, %r8;
	cvt.rn.f64.u32	%fd28, %r6;
	div.rn.f64 	%fd29, %fd28, %fd27;
	add.f64 	%fd30, %fd3, %fd29;
	add.f64 	%fd31, %fd4, %fd29;
	neg.f64 	%fd32, %fd31;
	fma.rn.f64 	%fd33, %fd6, %fd30, %fd1;
	fma.rn.f64 	%fd34, %fd7, %fd32, %fd2;
	abs.f64 	%fd35, %fd33;
	abs.f64 	%fd36, %fd34;
	add.f64 	%fd37, %fd35, %fd36;
	mul.f64 	%fd38, %fd37, %fd5;
	cvt.rzi.s32.f64	%r52, %fd38;
	cvt.rn.f32.s32	%f1, %r52;
	cvt.rzi.u32.f32	%r9, %f1;
	add.s32 	%r98, %r9, %r98;
	setp.gt.u32	%p7, %r6, 9;
	@%p7 bra 	BB2_9;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r6, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r9;

BB2_9:
	setp.lt.u32	%p8, %r6, 10;
	setp.eq.b32	%p9, %r53, 1;
	setp.ne.s32	%p10, %r6, 0;
	and.pred  	%p11, %p8, %p10;
	and.pred  	%p12, %p11, %p9;
	shr.u32 	%r54, %r8, 1;
	setp.eq.s32	%p13, %r6, %r54;
	or.pred  	%p14, %p12, %p13;
	add.s32 	%r90, %r6, 1;
	mov.u32 	%r97, %r8;
	@!%p14 bra 	BB2_23;
	bra.uni 	BB2_10;

BB2_10:
	div.u32 	%r55, %r98, %r90;
	cvt.rn.f64.u32	%fd8, %r55;
	setp.eq.s32	%p15, %r6, 0;
	mov.f64 	%fd66, 0d0000000000000000;
	@%p15 bra 	BB2_19;

	and.b32  	%r57, %r6, 3;
	setp.eq.s32	%p16, %r57, 0;
	mov.f64 	%fd66, 0d0000000000000000;
	mov.u32 	%r96, 0;
	@%p16 bra 	BB2_17;

	setp.eq.s32	%p17, %r57, 1;
	mov.f64 	%fd63, 0d0000000000000000;
	mov.u32 	%r94, 0;
	@%p17 bra 	BB2_16;

	setp.eq.s32	%p18, %r57, 2;
	mov.f64 	%fd62, 0d0000000000000000;
	mov.u32 	%r93, 0;
	@%p18 bra 	BB2_15;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	ld.local.u32 	%r63, [%rd19];
	cvt.rn.f64.u32	%fd43, %r63;
	sub.f64 	%fd44, %fd43, %fd8;
	fma.rn.f64 	%fd62, %fd44, %fd44, 0d0000000000000000;
	mov.u32 	%r93, 1;

BB2_15:
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r93, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.local.u32 	%r64, [%rd23];
	cvt.rn.f64.u32	%fd45, %r64;
	sub.f64 	%fd46, %fd45, %fd8;
	fma.rn.f64 	%fd63, %fd46, %fd46, %fd62;
	add.s32 	%r94, %r93, 1;

BB2_16:
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	mul.wide.u32 	%rd26, %r94, 4;
	add.s64 	%rd27, %rd25, %rd26;
	ld.local.u32 	%r65, [%rd27];
	cvt.rn.f64.u32	%fd47, %r65;
	sub.f64 	%fd48, %fd47, %fd8;
	fma.rn.f64 	%fd66, %fd48, %fd48, %fd63;
	add.s32 	%r96, %r94, 1;

BB2_17:
	setp.lt.u32	%p19, %r6, 4;
	@%p19 bra 	BB2_19;

BB2_18:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r96, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.local.u32 	%r66, [%rd31];
	cvt.rn.f64.u32	%fd49, %r66;
	sub.f64 	%fd50, %fd49, %fd8;
	fma.rn.f64 	%fd51, %fd50, %fd50, %fd66;
	add.s32 	%r67, %r96, 1;
	mul.wide.u32 	%rd32, %r67, 4;
	add.s64 	%rd33, %rd29, %rd32;
	ld.local.u32 	%r68, [%rd33];
	cvt.rn.f64.u32	%fd52, %r68;
	sub.f64 	%fd53, %fd52, %fd8;
	fma.rn.f64 	%fd54, %fd53, %fd53, %fd51;
	add.s32 	%r69, %r96, 2;
	mul.wide.u32 	%rd34, %r69, 4;
	add.s64 	%rd35, %rd29, %rd34;
	ld.local.u32 	%r70, [%rd35];
	cvt.rn.f64.u32	%fd55, %r70;
	sub.f64 	%fd56, %fd55, %fd8;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd54;
	add.s32 	%r71, %r96, 3;
	mul.wide.u32 	%rd36, %r71, 4;
	add.s64 	%rd37, %rd29, %rd36;
	ld.local.u32 	%r72, [%rd37];
	cvt.rn.f64.u32	%fd58, %r72;
	sub.f64 	%fd59, %fd58, %fd8;
	fma.rn.f64 	%fd66, %fd59, %fd59, %fd57;
	add.s32 	%r96, %r96, 4;
	setp.lt.u32	%p20, %r96, %r6;
	@%p20 bra 	BB2_18;

BB2_19:
	add.s32 	%r73, %r6, -1;
	cvt.rn.f64.u32	%fd60, %r73;
	div.rn.f64 	%fd61, %fd66, %fd60;
	div.rn.f64 	%fd18, %fd61, %fd8;
	setp.ne.s32	%p21, %r6, 1;
	@%p21 bra 	BB2_21;

	// inline asm
	activemask.b32 %r74;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r76, %r77}, [%rd39];
	setp.eq.s32	%p22, %r76, %r77;
	vote.sync.all.pred 	%p23, %p22, %r74;
	mov.u32 	%r97, 2;
	@%p23 bra 	BB2_23;

BB2_21:
	// inline asm
	activemask.b32 %r81;
	// inline asm
	setp.lt.f64	%p24, %fd18, 0d3F847AE140000000;
	vote.sync.all.pred 	%p25, %p24, %r81;
	mov.u32 	%r97, %r90;
	@%p25 bra 	BB2_23;

	// inline asm
	activemask.b32 %r83;
	// inline asm
	setp.le.f64	%p26, %fd18, 0d3FF0000000000000;
	vote.sync.all.pred 	%p27, %p26, %r83;
	setp.ge.u32	%p28, %r6, %r54;
	and.pred  	%p29, %p27, %p28;
	selp.b32	%r97, %r90, %r8, %p29;

BB2_23:
	setp.lt.u32	%p30, %r90, %r97;
	@%p30 bra 	BB2_7;

BB2_24:
	mul.lo.s32 	%r86, %r5, %r23;
	cvt.u64.u32	%rd40, %r86;
	cvta.to.global.u64 	%rd41, %rd1;
	add.s64 	%rd42, %rd41, %rd40;
	div.u32 	%r87, %r98, %r97;
	cvt.rn.f32.u32	%f2, %r87;
	mul.wide.u32 	%rd43, %r4, 16;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f2;
	cvt.rn.f32.u32	%f3, %r97;
	st.global.f32 	[%rd44+4], %f3;
	st.global.u32 	[%rd44+12], %r48;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd44+8], %rs1;
	setp.gt.f32	%p31, %f3, 0f00000000;
	@%p31 bra 	BB2_26;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r89, 206;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r89;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_26:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<53>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<149>;
	.reg .b32 	%r<126>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r24, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r26, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r25, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f41, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f40, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r123, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r28, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f46, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f45, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f44, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f43, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r29, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r31, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r30, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r32, %ntid.x;
	setp.eq.s32	%p2, %r32, 32;
	@%p2 bra 	BB3_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r33, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r33;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r34, %tid.y;
	mov.u32 	%r36, %tid.x;
	mad.lo.s32 	%r37, %r32, %r34, %r36;
	and.b32  	%r38, %r37, 15;
	shl.b32 	%r39, %r32, 2;
	rem.u32 	%r40, %r37, %r39;
	sub.s32 	%r41, %r40, %r38;
	shr.u32 	%r42, %r41, 2;
	and.b32  	%r43, %r37, 3;
	add.s32 	%r44, %r42, %r43;
	div.u32 	%r45, %r37, %r39;
	shl.b32 	%r46, %r45, 2;
	bfe.u32 	%r47, %r37, 2, 2;
	add.s32 	%r48, %r46, %r47;
	mov.u32 	%r49, %ctaid.x;
	mad.lo.s32 	%r3, %r49, %r32, %r44;
	mov.u32 	%r50, %ctaid.y;
	mov.u32 	%r51, %ntid.y;
	mad.lo.s32 	%r4, %r50, %r51, %r48;
	setp.lt.u32	%p3, %r3, %r25;
	setp.lt.u32	%p4, %r4, %r26;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB3_41;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r52, %r28, 8;
	setp.eq.s32	%p7, %r52, 0;
	mov.pred 	%p52, -1;
	mov.f32 	%f138, 0f00000000;
	@%p7 bra 	BB3_4;

	cvt.rn.f32.u32	%f49, %r3;
	cvt.rn.f32.u32	%f50, %r26;
	cvt.rn.f32.u32	%f51, %r4;
	sub.f32 	%f52, %f50, %f51;
	cvt.rn.f32.u32	%f53, %r25;
	div.rn.f32 	%f54, %f49, %f53;
	div.rn.f32 	%f55, %f52, %f50;
	sub.f32 	%f56, %f41, %f1;
	sub.f32 	%f57, %f2, %f40;
	fma.rn.f32 	%f58, %f56, %f54, %f1;
	fma.rn.f32 	%f59, %f57, %f55, %f40;
	sub.f32 	%f60, %f58, %f43;
	sub.f32 	%f61, %f59, %f44;
	sub.f32 	%f62, %f45, %f43;
	div.rn.f32 	%f63, %f60, %f62;
	sub.f32 	%f64, %f46, %f44;
	div.rn.f32 	%f65, %f61, %f64;
	mul.f32 	%f5, %f53, %f63;
	mul.f32 	%f66, %f50, %f65;
	sub.f32 	%f6, %f50, %f66;
	abs.f32 	%f67, %f5;
	mov.b32 	 %r53, %f5;
	and.b32  	%r54, %r53, -2147483648;
	or.b32  	%r55, %r54, 1056964608;
	mov.b32 	 %f68, %r55;
	add.f32 	%f69, %f5, %f68;
	cvt.rzi.f32.f32	%f70, %f69;
	setp.gt.f32	%p8, %f67, 0f4B000000;
	selp.f32	%f136, %f5, %f70, %p8;
	setp.geu.f32	%p9, %f67, 0f3F000000;
	@%p9 bra 	BB3_7;

	cvt.rzi.f32.f32	%f136, %f5;

BB3_7:
	cvt.rzi.s32.f32	%r5, %f136;
	mov.b32 	 %r56, %f6;
	and.b32  	%r57, %r56, -2147483648;
	or.b32  	%r58, %r57, 1056964608;
	mov.b32 	 %f71, %r58;
	add.f32 	%f72, %f6, %f71;
	cvt.rzi.f32.f32	%f73, %f72;
	abs.f32 	%f74, %f6;
	setp.gt.f32	%p10, %f74, 0f4B000000;
	selp.f32	%f137, %f6, %f73, %p10;
	setp.geu.f32	%p11, %f74, 0f3F000000;
	@%p11 bra 	BB3_9;

	cvt.rzi.f32.f32	%f137, %f6;

BB3_9:
	add.s32 	%r59, %r25, -2;
	setp.lt.u32	%p13, %r5, %r59;
	setp.gt.s32	%p14, %r5, 1;
	and.pred  	%p15, %p14, %p13;
	cvt.rzi.s32.f32	%r6, %f137;
	setp.gt.s32	%p16, %r6, 1;
	and.pred  	%p17, %p15, %p16;
	add.s32 	%r60, %r26, -2;
	setp.lt.u32	%p18, %r6, %r60;
	and.pred  	%p19, %p18, %p17;
	mov.f32 	%f139, %f138;
	@!%p19 bra 	BB3_13;
	bra.uni 	BB3_10;

BB3_10:
	sub.s32 	%r61, %r5, %r30;
	abs.s32 	%r62, %r61;
	setp.gt.s32	%p20, %r62, 19;
	@%p20 bra 	BB3_12;

	sub.s32 	%r63, %r6, %r31;
	abs.s32 	%r64, %r63;
	setp.lt.s32	%p22, %r64, 20;
	mov.f32 	%f139, %f138;
	@%p22 bra 	BB3_13;

BB3_12:
	cvt.rmi.f32.f32	%f80, %f5;
	cvt.rzi.u32.f32	%r65, %f80;
	cvt.rmi.f32.f32	%f81, %f6;
	cvt.rzi.u32.f32	%r66, %f81;
	cvt.rn.f32.u32	%f82, %r65;
	sub.f32 	%f83, %f5, %f82;
	cvt.rn.f32.u32	%f84, %r66;
	sub.f32 	%f85, %f6, %f84;
	mul.lo.s32 	%r67, %r66, %r29;
	cvt.u64.u32	%rd10, %r67;
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd10;
	mul.wide.u32 	%rd13, %r65, 16;
	add.s64 	%rd14, %rd12, %rd13;
	add.s32 	%r68, %r65, 1;
	mul.wide.u32 	%rd15, %r68, 16;
	add.s64 	%rd16, %rd12, %rd15;
	add.s32 	%r69, %r66, 1;
	mul.lo.s32 	%r70, %r69, %r29;
	cvt.u64.u32	%rd17, %r70;
	add.s64 	%rd18, %rd11, %rd17;
	add.s64 	%rd19, %rd18, %rd13;
	add.s64 	%rd20, %rd18, %rd15;
	mov.f32 	%f139, 0f3F800000;
	sub.f32 	%f86, %f139, %f83;
	ld.global.f32 	%f87, [%rd14];
	ld.global.f32 	%f88, [%rd16];
	mul.f32 	%f89, %f83, %f88;
	fma.rn.f32 	%f90, %f87, %f86, %f89;
	sub.f32 	%f91, %f139, %f85;
	ld.global.f32 	%f92, [%rd19];
	ld.global.f32 	%f93, [%rd20];
	mul.f32 	%f94, %f83, %f93;
	fma.rn.f32 	%f95, %f86, %f92, %f94;
	mul.f32 	%f96, %f85, %f95;
	fma.rn.f32 	%f138, %f91, %f90, %f96;
	mov.pred 	%p52, 0;
	bra.uni 	BB3_13;

BB3_4:
	mov.f32 	%f139, %f138;

BB3_13:
	mov.u16 	%rs4, 1;
	@!%p52 bra 	BB3_39;
	bra.uni 	BB3_14;

BB3_14:
	setp.ne.s32	%p24, %r123, 0;
	@%p24 bra 	BB3_16;

	mov.u64 	%rd21, $str6;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r71, 401;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r71;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_16:
	cvt.rn.f32.u32	%f97, %r25;
	sub.f32 	%f98, %f41, %f1;
	div.rn.f32 	%f16, %f98, %f97;
	cvt.rn.f32.u32	%f99, %r26;
	sub.f32 	%f100, %f2, %f40;
	div.rn.f32 	%f17, %f100, %f99;
	setp.lt.u32	%p25, %r123, 65;
	@%p25 bra 	BB3_18;

	mov.u64 	%rd27, $str8;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd29, $str2;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r72, 119;
	mov.u64 	%rd31, 0;
	mov.u64 	%rd32, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd28;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b32 param2;
	st.param.b32	[param2+0], %r72;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_18:
	setp.eq.s32	%p26, %r123, 0;
	cvt.rn.f32.u32	%f139, %r123;
	mov.u32 	%r124, 0;
	@%p26 bra 	BB3_19;

	cvt.rn.f32.u32	%f19, %r3;
	cvt.rn.f32.u32	%f20, %r4;
	ld.const.u32 	%r77, [amplifier];
	cvt.rn.f32.s32	%f21, %r77;
	mov.u32 	%r116, 0;
	mov.u32 	%r124, %r116;

BB3_21:
	mov.u32 	%r9, %r123;
	mov.u32 	%r7, %r116;
	cvt.rn.f32.u32	%f101, %r7;
	div.rn.f32 	%f102, %f101, %f139;
	add.f32 	%f103, %f19, %f102;
	add.f32 	%f104, %f20, %f102;
	neg.f32 	%f105, %f104;
	fma.rn.f32 	%f106, %f16, %f103, %f1;
	fma.rn.f32 	%f107, %f17, %f105, %f2;
	abs.f32 	%f108, %f106;
	abs.f32 	%f109, %f107;
	add.f32 	%f110, %f108, %f109;
	mul.f32 	%f111, %f110, %f21;
	cvt.rzi.s32.f32	%r78, %f111;
	cvt.rn.f32.s32	%f112, %r78;
	cvt.rzi.u32.f32	%r10, %f112;
	add.s32 	%r124, %r10, %r124;
	setp.gt.u32	%p27, %r7, 9;
	@%p27 bra 	BB3_23;

	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r7, 4;
	add.s64 	%rd36, %rd34, %rd35;
	st.local.u32 	[%rd36], %r10;

BB3_23:
	setp.lt.u32	%p28, %r7, 10;
	and.b32  	%r79, %r28, 1;
	setp.eq.b32	%p29, %r79, 1;
	setp.ne.s32	%p30, %r7, 0;
	and.pred  	%p31, %p28, %p30;
	and.pred  	%p32, %p31, %p29;
	shr.u32 	%r80, %r9, 1;
	setp.eq.s32	%p33, %r7, %r80;
	or.pred  	%p34, %p32, %p33;
	add.s32 	%r116, %r7, 1;
	mov.u32 	%r123, %r9;
	@!%p34 bra 	BB3_37;
	bra.uni 	BB3_24;

BB3_24:
	div.u32 	%r81, %r124, %r116;
	cvt.rn.f32.u32	%f23, %r81;
	setp.eq.s32	%p35, %r7, 0;
	mov.f32 	%f145, 0f00000000;
	@%p35 bra 	BB3_33;

	and.b32  	%r83, %r7, 3;
	setp.eq.s32	%p36, %r83, 0;
	mov.f32 	%f145, 0f00000000;
	mov.u32 	%r122, 0;
	@%p36 bra 	BB3_31;

	setp.eq.s32	%p37, %r83, 1;
	mov.f32 	%f142, 0f00000000;
	mov.u32 	%r120, 0;
	@%p37 bra 	BB3_30;

	setp.eq.s32	%p38, %r83, 2;
	mov.f32 	%f141, 0f00000000;
	mov.u32 	%r119, 0;
	@%p38 bra 	BB3_29;

	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	ld.local.u32 	%r89, [%rd38];
	cvt.rn.f32.u32	%f117, %r89;
	sub.f32 	%f118, %f117, %f23;
	fma.rn.f32 	%f141, %f118, %f118, 0f00000000;
	mov.u32 	%r119, 1;

BB3_29:
	add.u64 	%rd39, %SP, 0;
	cvta.to.local.u64 	%rd40, %rd39;
	mul.wide.u32 	%rd41, %r119, 4;
	add.s64 	%rd42, %rd40, %rd41;
	ld.local.u32 	%r90, [%rd42];
	cvt.rn.f32.u32	%f119, %r90;
	sub.f32 	%f120, %f119, %f23;
	fma.rn.f32 	%f142, %f120, %f120, %f141;
	add.s32 	%r120, %r119, 1;

BB3_30:
	add.u64 	%rd43, %SP, 0;
	cvta.to.local.u64 	%rd44, %rd43;
	mul.wide.u32 	%rd45, %r120, 4;
	add.s64 	%rd46, %rd44, %rd45;
	ld.local.u32 	%r91, [%rd46];
	cvt.rn.f32.u32	%f121, %r91;
	sub.f32 	%f122, %f121, %f23;
	fma.rn.f32 	%f145, %f122, %f122, %f142;
	add.s32 	%r122, %r120, 1;

BB3_31:
	add.u64 	%rd47, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd47;
	setp.lt.u32	%p39, %r7, 4;
	@%p39 bra 	BB3_33;

BB3_32:
	mul.wide.u32 	%rd48, %r122, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r92, [%rd49];
	cvt.rn.f32.u32	%f123, %r92;
	sub.f32 	%f124, %f123, %f23;
	fma.rn.f32 	%f125, %f124, %f124, %f145;
	add.s32 	%r93, %r122, 1;
	mul.wide.u32 	%rd50, %r93, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.local.u32 	%r94, [%rd51];
	cvt.rn.f32.u32	%f126, %r94;
	sub.f32 	%f127, %f126, %f23;
	fma.rn.f32 	%f128, %f127, %f127, %f125;
	add.s32 	%r95, %r122, 2;
	mul.wide.u32 	%rd52, %r95, 4;
	add.s64 	%rd53, %rd1, %rd52;
	ld.local.u32 	%r96, [%rd53];
	cvt.rn.f32.u32	%f129, %r96;
	sub.f32 	%f130, %f129, %f23;
	fma.rn.f32 	%f131, %f130, %f130, %f128;
	add.s32 	%r97, %r122, 3;
	mul.wide.u32 	%rd54, %r97, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.local.u32 	%r98, [%rd55];
	cvt.rn.f32.u32	%f132, %r98;
	sub.f32 	%f133, %f132, %f23;
	fma.rn.f32 	%f145, %f133, %f133, %f131;
	add.s32 	%r122, %r122, 4;
	setp.lt.u32	%p40, %r122, %r7;
	@%p40 bra 	BB3_32;

BB3_33:
	add.s32 	%r99, %r7, -1;
	cvt.rn.f32.u32	%f134, %r99;
	div.rn.f32 	%f135, %f145, %f134;
	div.rn.f32 	%f33, %f135, %f23;
	setp.ne.s32	%p41, %r7, 1;
	@%p41 bra 	BB3_35;

	// inline asm
	activemask.b32 %r100;
	// inline asm
	add.u64 	%rd56, %SP, 0;
	cvta.to.local.u64 	%rd57, %rd56;
	ld.local.v2.u32 	{%r102, %r103}, [%rd57];
	setp.eq.s32	%p42, %r102, %r103;
	vote.sync.all.pred 	%p43, %p42, %r100;
	mov.u32 	%r123, 2;
	@%p43 bra 	BB3_37;

BB3_35:
	// inline asm
	activemask.b32 %r107;
	// inline asm
	setp.lt.f32	%p44, %f33, 0f3C23D70A;
	vote.sync.all.pred 	%p45, %p44, %r107;
	mov.u32 	%r123, %r116;
	@%p45 bra 	BB3_37;

	// inline asm
	activemask.b32 %r109;
	// inline asm
	setp.le.f32	%p46, %f33, 0f3F800000;
	vote.sync.all.pred 	%p47, %p46, %r109;
	setp.ge.u32	%p48, %r7, %r80;
	and.pred  	%p49, %p47, %p48;
	selp.b32	%r123, %r116, %r9, %p49;

BB3_37:
	cvt.rn.f32.u32	%f139, %r123;
	setp.lt.u32	%p50, %r116, %r123;
	@%p50 bra 	BB3_21;
	bra.uni 	BB3_38;

BB3_19:
	mov.u32 	%r123, %r124;

BB3_38:
	div.u32 	%r112, %r124, %r123;
	cvt.rn.f32.u32	%f138, %r112;
	mov.u16 	%rs4, 0;

BB3_39:
	mul.lo.s32 	%r113, %r4, %r24;
	cvt.u64.u32	%rd58, %r113;
	cvta.to.global.u64 	%rd59, %rd2;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r3, 16;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.f32 	[%rd62], %f138;
	st.global.f32 	[%rd62+4], %f139;
	mov.u32 	%r114, 0;
	st.global.u32 	[%rd62+12], %r114;
	st.global.u8 	[%rd62+8], %rs4;
	setp.gt.f32	%p51, %f139, 0f00000000;
	@%p51 bra 	BB3_41;

	mov.u64 	%rd63, $str7;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r115, 408;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r115;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_41:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<53>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<130>;
	.reg .f64 	%fd<126>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r24, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r26, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r25, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd31, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd30, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r27, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r28, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd36, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd35, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd34, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd33, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r29, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r31, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r30, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r32, %ntid.x;
	setp.eq.s32	%p2, %r32, 32;
	@%p2 bra 	BB4_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r33, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r33;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB4_2:
	mov.u32 	%r34, %tid.y;
	mov.u32 	%r36, %tid.x;
	mad.lo.s32 	%r37, %r32, %r34, %r36;
	and.b32  	%r38, %r37, 15;
	shl.b32 	%r39, %r32, 2;
	rem.u32 	%r40, %r37, %r39;
	sub.s32 	%r41, %r40, %r38;
	shr.u32 	%r42, %r41, 2;
	and.b32  	%r43, %r37, 3;
	add.s32 	%r44, %r42, %r43;
	div.u32 	%r45, %r37, %r39;
	shl.b32 	%r46, %r45, 2;
	bfe.u32 	%r47, %r37, 2, 2;
	add.s32 	%r48, %r46, %r47;
	mov.u32 	%r49, %ctaid.x;
	mad.lo.s32 	%r3, %r49, %r32, %r44;
	mov.u32 	%r50, %ctaid.y;
	mov.u32 	%r51, %ntid.y;
	mad.lo.s32 	%r4, %r50, %r51, %r48;
	setp.lt.u32	%p3, %r3, %r25;
	setp.lt.u32	%p4, %r4, %r26;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB4_40;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r52, %r28, 8;
	setp.eq.s32	%p7, %r52, 0;
	mov.pred 	%p52, -1;
	mov.f32 	%f20, 0f00000000;
	@%p7 bra 	BB4_4;

	cvt.rn.f64.u32	%fd37, %r3;
	cvt.rn.f64.u32	%fd38, %r26;
	cvt.rn.f64.u32	%fd39, %r4;
	sub.f64 	%fd40, %fd38, %fd39;
	cvt.rn.f64.u32	%fd41, %r25;
	div.rn.f64 	%fd42, %fd37, %fd41;
	div.rn.f64 	%fd43, %fd40, %fd38;
	sub.f64 	%fd44, %fd31, %fd1;
	sub.f64 	%fd45, %fd2, %fd30;
	fma.rn.f64 	%fd46, %fd44, %fd42, %fd1;
	fma.rn.f64 	%fd47, %fd45, %fd43, %fd30;
	sub.f64 	%fd48, %fd46, %fd33;
	sub.f64 	%fd49, %fd47, %fd34;
	sub.f64 	%fd50, %fd35, %fd33;
	div.rn.f64 	%fd51, %fd48, %fd50;
	sub.f64 	%fd52, %fd36, %fd34;
	div.rn.f64 	%fd53, %fd49, %fd52;
	mul.f64 	%fd5, %fd41, %fd51;
	mul.f64 	%fd54, %fd38, %fd53;
	sub.f64 	%fd6, %fd38, %fd54;
	abs.f64 	%fd7, %fd5;
	setp.ge.f64	%p8, %fd7, 0d4330000000000000;
	mov.f64 	%fd119, %fd5;
	@%p8 bra 	BB4_7;

	add.f64 	%fd55, %fd7, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd56, %fd55;
	setp.lt.f64	%p9, %fd7, 0d3FE0000000000000;
	selp.f64	%fd57, 0d0000000000000000, %fd56, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r53, %temp}, %fd57;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r54}, %fd57;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r55}, %fd5;
	}
	and.b32  	%r56, %r55, -2147483648;
	or.b32  	%r57, %r54, %r56;
	mov.b64 	%fd119, {%r53, %r57};

BB4_7:
	cvt.rzi.s32.f64	%r5, %fd119;
	abs.f64 	%fd10, %fd6;
	setp.ge.f64	%p10, %fd10, 0d4330000000000000;
	mov.f64 	%fd120, %fd6;
	@%p10 bra 	BB4_9;

	add.f64 	%fd58, %fd10, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd59, %fd58;
	setp.lt.f64	%p11, %fd10, 0d3FE0000000000000;
	selp.f64	%fd60, 0d0000000000000000, %fd59, %p11;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r58, %temp}, %fd60;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r59}, %fd60;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r60}, %fd6;
	}
	and.b32  	%r61, %r60, -2147483648;
	or.b32  	%r62, %r59, %r61;
	mov.b64 	%fd120, {%r58, %r62};

BB4_9:
	add.s32 	%r63, %r25, -2;
	setp.lt.u32	%p13, %r5, %r63;
	setp.gt.s32	%p14, %r5, 1;
	and.pred  	%p15, %p14, %p13;
	cvt.rzi.s32.f64	%r6, %fd120;
	setp.gt.s32	%p16, %r6, 1;
	and.pred  	%p17, %p15, %p16;
	add.s32 	%r64, %r26, -2;
	setp.lt.u32	%p18, %r6, %r64;
	and.pred  	%p19, %p18, %p17;
	mov.f32 	%f21, %f20;
	@!%p19 bra 	BB4_13;
	bra.uni 	BB4_10;

BB4_10:
	sub.s32 	%r65, %r5, %r30;
	abs.s32 	%r66, %r65;
	setp.gt.s32	%p20, %r66, 19;
	@%p20 bra 	BB4_12;

	sub.s32 	%r67, %r6, %r31;
	abs.s32 	%r68, %r67;
	setp.lt.s32	%p22, %r68, 20;
	mov.f32 	%f21, %f20;
	@%p22 bra 	BB4_13;

BB4_12:
	cvt.rmi.f64.f64	%fd61, %fd5;
	cvt.rzi.u32.f64	%r69, %fd61;
	cvt.rmi.f64.f64	%fd62, %fd6;
	cvt.rzi.u32.f64	%r70, %fd62;
	cvt.rn.f64.u32	%fd63, %r69;
	sub.f64 	%fd64, %fd5, %fd63;
	cvt.rn.f64.u32	%fd65, %r70;
	sub.f64 	%fd66, %fd6, %fd65;
	mul.lo.s32 	%r71, %r70, %r29;
	cvt.u64.u32	%rd10, %r71;
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd10;
	mul.wide.u32 	%rd13, %r69, 16;
	add.s64 	%rd14, %rd12, %rd13;
	add.s32 	%r72, %r69, 1;
	mul.wide.u32 	%rd15, %r72, 16;
	add.s64 	%rd16, %rd12, %rd15;
	add.s32 	%r73, %r70, 1;
	mul.lo.s32 	%r74, %r73, %r29;
	cvt.u64.u32	%rd17, %r74;
	add.s64 	%rd18, %rd11, %rd17;
	add.s64 	%rd19, %rd18, %rd13;
	add.s64 	%rd20, %rd18, %rd15;
	ld.global.f32 	%f15, [%rd14];
	cvt.f64.f32	%fd67, %f15;
	mov.f64 	%fd68, 0d3FF0000000000000;
	sub.f64 	%fd69, %fd68, %fd64;
	ld.global.f32 	%f16, [%rd16];
	cvt.f64.f32	%fd70, %f16;
	mul.f64 	%fd71, %fd64, %fd70;
	fma.rn.f64 	%fd72, %fd69, %fd67, %fd71;
	sub.f64 	%fd73, %fd68, %fd66;
	ld.global.f32 	%f17, [%rd19];
	cvt.f64.f32	%fd74, %f17;
	ld.global.f32 	%f18, [%rd20];
	cvt.f64.f32	%fd75, %f18;
	mul.f64 	%fd76, %fd64, %fd75;
	fma.rn.f64 	%fd77, %fd69, %fd74, %fd76;
	mul.f64 	%fd78, %fd66, %fd77;
	fma.rn.f64 	%fd79, %fd73, %fd72, %fd78;
	cvt.rn.f32.f64	%f20, %fd79;
	mov.pred 	%p52, 0;
	mov.f32 	%f21, 0f3F800000;
	bra.uni 	BB4_13;

BB4_4:
	mov.f32 	%f21, %f20;

BB4_13:
	mov.u16 	%rs4, 1;
	@!%p52 bra 	BB4_38;
	bra.uni 	BB4_14;

BB4_14:
	setp.ne.s32	%p24, %r27, 0;
	@%p24 bra 	BB4_16;

	mov.u64 	%rd21, $str6;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r75, 401;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r75;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_16:
	cvt.rn.f64.u32	%fd80, %r25;
	sub.f64 	%fd81, %fd31, %fd1;
	div.rn.f64 	%fd13, %fd81, %fd80;
	cvt.rn.f64.u32	%fd82, %r26;
	sub.f64 	%fd83, %fd2, %fd30;
	div.rn.f64 	%fd14, %fd83, %fd82;
	setp.lt.u32	%p25, %r27, 65;
	@%p25 bra 	BB4_18;

	mov.u64 	%rd27, $str8;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd29, $str2;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r76, 119;
	mov.u64 	%rd31, 0;
	mov.u64 	%rd32, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd28;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b32 param2;
	st.param.b32	[param2+0], %r76;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_18:
	setp.eq.s32	%p26, %r27, 0;
	mov.u32 	%r128, 0;
	mov.u32 	%r127, %r128;
	@%p26 bra 	BB4_37;

	cvt.rn.f64.u32	%fd15, %r3;
	cvt.rn.f64.u32	%fd16, %r4;
	ld.const.u32 	%r81, [amplifier];
	cvt.rn.f64.s32	%fd17, %r81;
	mov.u32 	%r120, 0;
	mov.u32 	%r128, %r120;
	mov.u32 	%r127, %r27;

BB4_20:
	mov.u32 	%r9, %r127;
	mov.u32 	%r7, %r120;
	cvt.rn.f64.u32	%fd84, %r9;
	cvt.rn.f64.u32	%fd85, %r7;
	div.rn.f64 	%fd86, %fd85, %fd84;
	add.f64 	%fd87, %fd15, %fd86;
	add.f64 	%fd88, %fd16, %fd86;
	neg.f64 	%fd89, %fd88;
	fma.rn.f64 	%fd90, %fd13, %fd87, %fd1;
	fma.rn.f64 	%fd91, %fd14, %fd89, %fd2;
	abs.f64 	%fd92, %fd90;
	abs.f64 	%fd93, %fd91;
	add.f64 	%fd94, %fd92, %fd93;
	mul.f64 	%fd95, %fd94, %fd17;
	cvt.rzi.s32.f64	%r82, %fd95;
	cvt.rn.f32.s32	%f19, %r82;
	cvt.rzi.u32.f32	%r10, %f19;
	add.s32 	%r128, %r10, %r128;
	setp.gt.u32	%p27, %r7, 9;
	@%p27 bra 	BB4_22;

	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r7, 4;
	add.s64 	%rd36, %rd34, %rd35;
	st.local.u32 	[%rd36], %r10;

BB4_22:
	setp.lt.u32	%p28, %r7, 10;
	and.b32  	%r83, %r28, 1;
	setp.eq.b32	%p29, %r83, 1;
	setp.ne.s32	%p30, %r7, 0;
	and.pred  	%p31, %p28, %p30;
	and.pred  	%p32, %p31, %p29;
	shr.u32 	%r84, %r9, 1;
	setp.eq.s32	%p33, %r7, %r84;
	or.pred  	%p34, %p32, %p33;
	add.s32 	%r120, %r7, 1;
	mov.u32 	%r127, %r9;
	@!%p34 bra 	BB4_36;
	bra.uni 	BB4_23;

BB4_23:
	div.u32 	%r85, %r128, %r120;
	cvt.rn.f64.u32	%fd18, %r85;
	setp.eq.s32	%p35, %r7, 0;
	mov.f64 	%fd125, 0d0000000000000000;
	@%p35 bra 	BB4_32;

	and.b32  	%r87, %r7, 3;
	setp.eq.s32	%p36, %r87, 0;
	mov.f64 	%fd125, 0d0000000000000000;
	mov.u32 	%r126, 0;
	@%p36 bra 	BB4_30;

	setp.eq.s32	%p37, %r87, 1;
	mov.f64 	%fd122, 0d0000000000000000;
	mov.u32 	%r124, 0;
	@%p37 bra 	BB4_29;

	setp.eq.s32	%p38, %r87, 2;
	mov.f64 	%fd121, 0d0000000000000000;
	mov.u32 	%r123, 0;
	@%p38 bra 	BB4_28;

	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	ld.local.u32 	%r93, [%rd38];
	cvt.rn.f64.u32	%fd100, %r93;
	sub.f64 	%fd101, %fd100, %fd18;
	fma.rn.f64 	%fd121, %fd101, %fd101, 0d0000000000000000;
	mov.u32 	%r123, 1;

BB4_28:
	add.u64 	%rd39, %SP, 0;
	cvta.to.local.u64 	%rd40, %rd39;
	mul.wide.u32 	%rd41, %r123, 4;
	add.s64 	%rd42, %rd40, %rd41;
	ld.local.u32 	%r94, [%rd42];
	cvt.rn.f64.u32	%fd102, %r94;
	sub.f64 	%fd103, %fd102, %fd18;
	fma.rn.f64 	%fd122, %fd103, %fd103, %fd121;
	add.s32 	%r124, %r123, 1;

BB4_29:
	add.u64 	%rd43, %SP, 0;
	cvta.to.local.u64 	%rd44, %rd43;
	mul.wide.u32 	%rd45, %r124, 4;
	add.s64 	%rd46, %rd44, %rd45;
	ld.local.u32 	%r95, [%rd46];
	cvt.rn.f64.u32	%fd104, %r95;
	sub.f64 	%fd105, %fd104, %fd18;
	fma.rn.f64 	%fd125, %fd105, %fd105, %fd122;
	add.s32 	%r126, %r124, 1;

BB4_30:
	add.u64 	%rd47, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd47;
	setp.lt.u32	%p39, %r7, 4;
	@%p39 bra 	BB4_32;

BB4_31:
	mul.wide.u32 	%rd48, %r126, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r96, [%rd49];
	cvt.rn.f64.u32	%fd106, %r96;
	sub.f64 	%fd107, %fd106, %fd18;
	fma.rn.f64 	%fd108, %fd107, %fd107, %fd125;
	add.s32 	%r97, %r126, 1;
	mul.wide.u32 	%rd50, %r97, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.local.u32 	%r98, [%rd51];
	cvt.rn.f64.u32	%fd109, %r98;
	sub.f64 	%fd110, %fd109, %fd18;
	fma.rn.f64 	%fd111, %fd110, %fd110, %fd108;
	add.s32 	%r99, %r126, 2;
	mul.wide.u32 	%rd52, %r99, 4;
	add.s64 	%rd53, %rd1, %rd52;
	ld.local.u32 	%r100, [%rd53];
	cvt.rn.f64.u32	%fd112, %r100;
	sub.f64 	%fd113, %fd112, %fd18;
	fma.rn.f64 	%fd114, %fd113, %fd113, %fd111;
	add.s32 	%r101, %r126, 3;
	mul.wide.u32 	%rd54, %r101, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.local.u32 	%r102, [%rd55];
	cvt.rn.f64.u32	%fd115, %r102;
	sub.f64 	%fd116, %fd115, %fd18;
	fma.rn.f64 	%fd125, %fd116, %fd116, %fd114;
	add.s32 	%r126, %r126, 4;
	setp.lt.u32	%p40, %r126, %r7;
	@%p40 bra 	BB4_31;

BB4_32:
	add.s32 	%r103, %r7, -1;
	cvt.rn.f64.u32	%fd117, %r103;
	div.rn.f64 	%fd118, %fd125, %fd117;
	div.rn.f64 	%fd28, %fd118, %fd18;
	setp.ne.s32	%p41, %r7, 1;
	@%p41 bra 	BB4_34;

	// inline asm
	activemask.b32 %r104;
	// inline asm
	add.u64 	%rd56, %SP, 0;
	cvta.to.local.u64 	%rd57, %rd56;
	ld.local.v2.u32 	{%r106, %r107}, [%rd57];
	setp.eq.s32	%p42, %r106, %r107;
	vote.sync.all.pred 	%p43, %p42, %r104;
	mov.u32 	%r127, 2;
	@%p43 bra 	BB4_36;

BB4_34:
	// inline asm
	activemask.b32 %r111;
	// inline asm
	setp.lt.f64	%p44, %fd28, 0d3F847AE140000000;
	vote.sync.all.pred 	%p45, %p44, %r111;
	mov.u32 	%r127, %r120;
	@%p45 bra 	BB4_36;

	// inline asm
	activemask.b32 %r113;
	// inline asm
	setp.le.f64	%p46, %fd28, 0d3FF0000000000000;
	vote.sync.all.pred 	%p47, %p46, %r113;
	setp.ge.u32	%p48, %r7, %r84;
	and.pred  	%p49, %p47, %p48;
	selp.b32	%r127, %r120, %r9, %p49;

BB4_36:
	setp.lt.u32	%p50, %r120, %r127;
	@%p50 bra 	BB4_20;

BB4_37:
	div.u32 	%r116, %r128, %r127;
	cvt.rn.f32.u32	%f20, %r116;
	cvt.rn.f32.u32	%f21, %r127;
	mov.u16 	%rs4, 0;

BB4_38:
	mul.lo.s32 	%r117, %r4, %r24;
	cvt.u64.u32	%rd58, %r117;
	cvta.to.global.u64 	%rd59, %rd2;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r3, 16;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.f32 	[%rd62], %f20;
	st.global.f32 	[%rd62+4], %f21;
	mov.u32 	%r118, 0;
	st.global.u32 	[%rd62+12], %r118;
	st.global.u8 	[%rd62+8], %rs4;
	setp.gt.f32	%p51, %f21, 0f00000000;
	@%p51 bra 	BB4_40;

	mov.u64 	%rd63, $str7;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r119, 408;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r119;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_40:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<38>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r7, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r10, [compose_param_5];
	ld.param.u32 	%r11, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.u32 	%r9, [compose_param_9];
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r13, %r12, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.u32	%p1, %r2, %r11;
	setp.ge.u32	%p2, %r1, %r10;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_9;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r18, %r2, %r7;
	cvt.u64.u32	%rd6, %r18;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.u32 	%rd8, %r1, 16;
	add.s64 	%rd1, %rd7, %rd8;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	@%p4 bra 	BB5_3;

	ld.global.f32 	%f5, [%rd1+4];
	cvt.rzi.u32.f32	%r19, %f5;
	min.u32 	%r20, %r19, %r9;
	cvt.rn.f32.u32	%f6, %r20;
	cvt.rn.f32.u32	%f7, %r9;
	div.rn.f32 	%f8, %f6, %f7;
	mul.f32 	%f9, %f8, 0f437F0000;
	cvt.rzi.s32.f32	%r21, %f9;
	and.b32  	%r22, %r21, 255;
	prmt.b32 	%r23, %r22, %r22, 30212;
	prmt.b32 	%r24, %r22, %r23, 28756;
	or.b32  	%r25, %r24, -16777216;
	ld.global.u8 	%rs2, [%rd1+8];
	setp.eq.s16	%p5, %rs2, 0;
	selp.b32	%r37, %r25, -16777216, %p5;
	bra.uni 	BB5_8;

BB5_3:
	ld.global.f32 	%f1, [%rd1];
	abs.f32 	%f10, %f1;
	mov.b32 	 %r26, %f1;
	and.b32  	%r27, %r26, -2147483648;
	or.b32  	%r28, %r27, 1056964608;
	mov.b32 	 %f11, %r28;
	add.f32 	%f12, %f1, %f11;
	cvt.rzi.f32.f32	%f13, %f12;
	setp.gt.f32	%p6, %f10, 0f4B000000;
	selp.f32	%f14, %f1, %f13, %p6;
	setp.geu.f32	%p7, %f10, 0f3F000000;
	@%p7 bra 	BB5_5;

	cvt.rzi.f32.f32	%f14, %f1;

BB5_5:
	cvt.rzi.u32.f32	%r29, %f14;
	shl.b32 	%r30, %r29, 7;
	rem.u32 	%r31, %r30, %r8;
	sub.s32 	%r32, %r8, %r31;
	add.s32 	%r4, %r32, -1;
	setp.lt.u32	%p8, %r4, %r8;
	@%p8 bra 	BB5_7;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str10;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r33, 20;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r33;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB5_7:
	shl.b32 	%r34, %r4, 2;
	mov.u32 	%r35, 0;
	suld.b.2d.b32.trap {%r37}, [%rd4, {%r34, %r35}];

BB5_8:
	shl.b32 	%r36, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r36, %r2}], {%r37};

BB5_9:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r9, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r10, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r11, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f4, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f5, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f6, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f7, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r16, %r14, %r13, %r15;
	mul.lo.s32 	%r1, %r16, %r12;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %ntid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r20, %r17, %r18, %r19;
	mul.lo.s32 	%r2, %r20, %r12;
	sub.s32 	%r21, %r11, %r12;
	setp.ge.u32	%p1, %r2, %r21;
	sub.s32 	%r22, %r10, %r12;
	setp.ge.u32	%p2, %r1, %r22;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_10;

	sub.f32 	%f8, %f6, %f4;
	cvt.rn.f32.u32	%f9, %r10;
	div.rn.f32 	%f10, %f8, %f9;
	cvt.rn.f32.u32	%f11, %r1;
	fma.rn.f32 	%f1, %f11, %f10, %f4;
	setp.eq.s32	%p4, %r12, 0;
	@%p4 bra 	BB6_10;

	ld.const.u32 	%r27, [amplifier];
	cvt.rn.f32.s32	%f12, %r27;
	cvt.rn.f32.u32	%f13, %r2;
	sub.f32 	%f14, %f7, %f5;
	cvt.rn.f32.u32	%f15, %r11;
	div.rn.f32 	%f16, %f14, %f15;
	mul.f32 	%f17, %f13, %f16;
	sub.f32 	%f18, %f7, %f17;
	abs.f32 	%f19, %f18;
	abs.f32 	%f20, %f1;
	add.f32 	%f21, %f20, %f19;
	mul.f32 	%f22, %f21, %f12;
	cvt.rzi.s32.f32	%r28, %f22;
	cvt.rn.f32.s32	%f23, %r28;
	cvt.rzi.u32.f32	%r29, %f23;
	mul.lo.s32 	%r30, %r2, %r9;
	cvt.u64.u32	%rd3, %r30;
	cvta.to.global.u64 	%rd4, %rd2;
	add.s64 	%rd5, %rd4, %rd3;
	cvt.rn.f32.u32	%f24, %r12;
	rcp.rn.f32 	%f2, %f24;
	cvt.rn.f32.u32	%f3, %r29;
	mul.wide.u32 	%rd6, %r1, 16;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r26, %r12, 3;
	mov.u32 	%r36, 1;
	mov.u32 	%r39, 0;
	setp.eq.s32	%p5, %r26, 0;
	@%p5 bra 	BB6_8;

	setp.eq.s32	%p6, %r26, 1;
	mov.u32 	%r37, %r39;
	@%p6 bra 	BB6_7;

	setp.eq.s32	%p7, %r26, 2;
	@%p7 bra 	BB6_6;

	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r32, 0;
	st.global.u32 	[%rd1+12], %r32;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd1+8], %rs1;
	mov.u32 	%r36, 2;

BB6_6:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r33, 0;
	st.global.u32 	[%rd1+12], %r33;
	mov.u16 	%rs2, 0;
	st.global.u8 	[%rd1+8], %rs2;
	mov.u32 	%r37, %r36;

BB6_7:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	st.global.u32 	[%rd1+12], %r39;
	mov.u16 	%rs3, 0;
	st.global.u8 	[%rd1+8], %rs3;
	add.s32 	%r39, %r37, 1;

BB6_8:
	setp.lt.u32	%p8, %r12, 4;
	@%p8 bra 	BB6_10;

BB6_9:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r35, 0;
	st.global.u32 	[%rd1+12], %r35;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd1+8], %rs4;
	add.s32 	%r39, %r39, 4;
	setp.lt.u32	%p9, %r39, %r12;
	@%p9 bra 	BB6_9;

BB6_10:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 15

BB7_2:
	ret;
}


