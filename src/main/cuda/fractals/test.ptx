//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 4 .u32 amplifier;
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 ZOOMING_IN_FLAG_MASK = 32;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 4 .f32 pixelRealWidthInCm = 0f3CD94079;
.global .align 16 .b8 $str[17] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 116, 101, 115, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[42] = {109, 0, 97, 0, 120, 0, 83, 0, 117, 0, 112, 0, 101, 0, 114, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 105, 0, 110, 0, 103, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str4[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str5[44] = {109, 0, 97, 0, 120, 0, 83, 0, 117, 0, 112, 0, 101, 0, 114, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 105, 0, 110, 0, 103, 0, 32, 0, 62, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str6[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str10[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str11[16] = {100, 0, 121, 0, 32, 0, 60, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str12[16] = {100, 0, 120, 0, 32, 0, 60, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str13[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str14[120] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .f32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<109>;
	.reg .b32 	%r<104>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r24, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f38, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f37, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f36, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f35, [fractalRenderMainFloat_param_3];
	ld.param.f32 	%f39, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 59;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r25;
	setp.lt.u32	%p3, %r5, %r26;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_40;
	bra.uni 	BB1_3;

BB1_3:
	setp.ge.f32	%p5, %f39, 0f3F800000;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd8, $str5;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 213;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.lt.f32	%p6, %f39, 0f3F800000;
	mov.f32 	%f107, 0f00000000;
	mov.f32 	%f108, %f107;
	@%p6 bra 	BB1_38;

	abs.f32 	%f42, %f39;
	mov.b32 	 %r47, %f39;
	and.b32  	%r48, %r47, -2147483648;
	or.b32  	%r49, %r48, 1056964608;
	mov.b32 	 %f43, %r49;
	add.f32 	%f44, %f43, %f39;
	cvt.rzi.f32.f32	%f45, %f44;
	setp.gt.f32	%p7, %f42, 0f4B000000;
	selp.f32	%f98, %f39, %f45, %p7;
	setp.geu.f32	%p8, %f42, 0f3F000000;
	@%p8 bra 	BB1_8;

	cvt.rzi.f32.f32	%f98, %f39;

BB1_8:
	cvt.rzi.u32.f32	%r50, %f98;
	mov.u32 	%r51, 64;
	min.u32 	%r6, %r51, %r50;
	setp.lt.u32	%p9, %r6, 65;
	@%p9 bra 	BB1_10;

	mov.u64 	%rd14, $str10;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str2;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r52, 113;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_10:
	setp.eq.s32	%p10, %r6, 0;
	mov.u32 	%r102, 0;
	mov.u32 	%r101, %r102;
	@%p10 bra 	BB1_37;

	cvt.rn.f32.u32	%f6, %r4;
	cvt.rn.f32.u32	%f7, %r5;
	ld.const.u32 	%r57, [amplifier];
	cvt.rn.f32.s32	%f8, %r57;
	cvt.rn.f32.u32	%f46, %r25;
	sub.f32 	%f47, %f37, %f35;
	div.rn.f32 	%f9, %f47, %f46;
	cvt.rn.f32.u32	%f48, %r26;
	sub.f32 	%f49, %f38, %f36;
	div.rn.f32 	%f10, %f49, %f48;
	mov.u32 	%r94, 0;
	and.b32  	%r68, %r27, 1;
	mov.u32 	%r102, %r94;
	mov.u32 	%r101, %r6;

BB1_12:
	mov.u32 	%r9, %r101;
	mov.u32 	%r7, %r94;
	setp.lt.u32	%p11, %r7, 3;
	@%p11 bra 	BB1_19;
	bra.uni 	BB1_13;

BB1_19:
	cvt.rn.f32.u32	%f57, %r7;
	div.rn.f32 	%f100, %f57, 0f40400000;
	mov.f32 	%f101, %f100;
	bra.uni 	BB1_20;

BB1_13:
	add.f32 	%f50, %f39, 0fC0000000;
	sqrt.rn.f32 	%f11, %f50;
	abs.f32 	%f51, %f11;
	mov.b32 	 %r58, %f11;
	and.b32  	%r59, %r58, -2147483648;
	or.b32  	%r60, %r59, 1056964608;
	mov.b32 	 %f52, %r60;
	add.f32 	%f53, %f11, %f52;
	cvt.rzi.f32.f32	%f54, %f53;
	setp.gt.f32	%p12, %f51, 0f4B000000;
	selp.f32	%f99, %f11, %f54, %p12;
	setp.geu.f32	%p13, %f51, 0f3F000000;
	@%p13 bra 	BB1_15;

	cvt.rzi.f32.f32	%f99, %f11;

BB1_15:
	add.s32 	%r61, %r7, -2;
	cvt.rzi.u32.f32	%r62, %f99;
	rem.u32 	%r63, %r61, %r62;
	cvt.rn.f32.u32	%f55, %r63;
	div.rn.f32 	%f100, %f55, %f11;
	div.u32 	%r64, %r61, %r62;
	cvt.rn.f32.u32	%f56, %r64;
	div.rn.f32 	%f101, %f56, %f11;
	setp.le.f32	%p14, %f101, 0f3F800000;
	@%p14 bra 	BB1_17;

	mov.u64 	%rd20, $str11;
	cvta.global.u64 	%rd21, %rd20;
	mov.u64 	%rd22, $str2;
	cvta.global.u64 	%rd23, %rd22;
	mov.u32 	%r65, 132;
	mov.u64 	%rd24, 0;
	mov.u64 	%rd25, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd23;
	.param .b32 param2;
	st.param.b32	[param2+0], %r65;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_17:
	setp.le.f32	%p15, %f100, 0f3F800000;
	@%p15 bra 	BB1_20;

	mov.u64 	%rd26, $str12;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str2;
	cvta.global.u64 	%rd29, %rd28;
	mov.u32 	%r66, 133;
	mov.u64 	%rd30, 0;
	mov.u64 	%rd31, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r66;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd30;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd31;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB1_20:
	add.f32 	%f58, %f7, %f101;
	neg.f32 	%f59, %f58;
	add.f32 	%f60, %f6, %f100;
	fma.rn.f32 	%f61, %f9, %f60, %f35;
	fma.rn.f32 	%f62, %f10, %f59, %f38;
	abs.f32 	%f63, %f61;
	abs.f32 	%f64, %f62;
	add.f32 	%f65, %f63, %f64;
	mul.f32 	%f66, %f65, %f8;
	cvt.rzi.s32.f32	%r67, %f66;
	cvt.rn.f32.s32	%f67, %r67;
	cvt.rzi.u32.f32	%r10, %f67;
	add.s32 	%r102, %r10, %r102;
	setp.gt.u32	%p16, %r7, 9;
	@%p16 bra 	BB1_22;

	cvt.rn.f32.u32	%f68, %r10;
	add.u64 	%rd32, %SP, 0;
	cvta.to.local.u64 	%rd33, %rd32;
	mul.wide.u32 	%rd34, %r7, 4;
	add.s64 	%rd35, %rd33, %rd34;
	st.local.f32 	[%rd35], %f68;

BB1_22:
	setp.lt.u32	%p17, %r7, 10;
	setp.eq.b32	%p18, %r68, 1;
	setp.ne.s32	%p19, %r7, 0;
	and.pred  	%p20, %p17, %p19;
	and.pred  	%p21, %p20, %p18;
	shr.u32 	%r69, %r9, 1;
	setp.eq.s32	%p22, %r7, %r69;
	or.pred  	%p23, %p21, %p22;
	add.s32 	%r94, %r7, 1;
	mov.u32 	%r101, %r9;
	@!%p23 bra 	BB1_36;
	bra.uni 	BB1_23;

BB1_23:
	div.u32 	%r70, %r102, %r94;
	cvt.rn.f32.u32	%f20, %r70;
	setp.eq.s32	%p24, %r7, 0;
	mov.f32 	%f106, 0f00000000;
	@%p24 bra 	BB1_32;

	and.b32  	%r72, %r7, 3;
	setp.eq.s32	%p25, %r72, 0;
	mov.f32 	%f106, 0f00000000;
	mov.u32 	%r100, 0;
	@%p25 bra 	BB1_30;

	setp.eq.s32	%p26, %r72, 1;
	mov.f32 	%f103, 0f00000000;
	mov.u32 	%r98, 0;
	@%p26 bra 	BB1_29;

	setp.eq.s32	%p27, %r72, 2;
	mov.f32 	%f102, 0f00000000;
	mov.u32 	%r97, 0;
	@%p27 bra 	BB1_28;

	add.u64 	%rd36, %SP, 0;
	cvta.to.local.u64 	%rd37, %rd36;
	ld.local.f32 	%f73, [%rd37];
	sub.f32 	%f74, %f73, %f20;
	fma.rn.f32 	%f102, %f74, %f74, 0f00000000;
	mov.u32 	%r97, 1;

BB1_28:
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	mul.wide.u32 	%rd40, %r97, 4;
	add.s64 	%rd41, %rd39, %rd40;
	ld.local.f32 	%f75, [%rd41];
	sub.f32 	%f76, %f75, %f20;
	fma.rn.f32 	%f103, %f76, %f76, %f102;
	add.s32 	%r98, %r97, 1;

BB1_29:
	add.u64 	%rd42, %SP, 0;
	cvta.to.local.u64 	%rd43, %rd42;
	mul.wide.u32 	%rd44, %r98, 4;
	add.s64 	%rd45, %rd43, %rd44;
	ld.local.f32 	%f77, [%rd45];
	sub.f32 	%f78, %f77, %f20;
	fma.rn.f32 	%f106, %f78, %f78, %f103;
	add.s32 	%r100, %r98, 1;

BB1_30:
	setp.lt.u32	%p28, %r7, 4;
	@%p28 bra 	BB1_32;

BB1_31:
	add.u64 	%rd46, %SP, 0;
	cvta.to.local.u64 	%rd47, %rd46;
	mul.wide.u32 	%rd48, %r100, 4;
	add.s64 	%rd49, %rd47, %rd48;
	ld.local.f32 	%f79, [%rd49];
	sub.f32 	%f80, %f79, %f20;
	fma.rn.f32 	%f81, %f80, %f80, %f106;
	add.s32 	%r78, %r100, 1;
	mul.wide.u32 	%rd50, %r78, 4;
	add.s64 	%rd51, %rd47, %rd50;
	ld.local.f32 	%f82, [%rd51];
	sub.f32 	%f83, %f82, %f20;
	fma.rn.f32 	%f84, %f83, %f83, %f81;
	add.s32 	%r79, %r100, 2;
	mul.wide.u32 	%rd52, %r79, 4;
	add.s64 	%rd53, %rd47, %rd52;
	ld.local.f32 	%f85, [%rd53];
	sub.f32 	%f86, %f85, %f20;
	fma.rn.f32 	%f87, %f86, %f86, %f84;
	add.s32 	%r80, %r100, 3;
	mul.wide.u32 	%rd54, %r80, 4;
	add.s64 	%rd55, %rd47, %rd54;
	ld.local.f32 	%f88, [%rd55];
	sub.f32 	%f89, %f88, %f20;
	fma.rn.f32 	%f106, %f89, %f89, %f87;
	add.s32 	%r100, %r100, 4;
	setp.lt.u32	%p29, %r100, %r7;
	@%p29 bra 	BB1_31;

BB1_32:
	add.s32 	%r81, %r7, -1;
	cvt.rn.f32.u32	%f90, %r81;
	div.rn.f32 	%f91, %f106, %f90;
	div.rn.f32 	%f30, %f91, %f20;
	setp.ne.s32	%p30, %r7, 1;
	@%p30 bra 	BB1_34;

	// inline asm
	activemask.b32 %r82;
	// inline asm
	add.u64 	%rd56, %SP, 0;
	cvta.to.local.u64 	%rd57, %rd56;
	ld.local.v2.f32 	{%f92, %f93}, [%rd57];
	sub.f32 	%f96, %f92, %f93;
	abs.f32 	%f97, %f96;
	setp.lt.f32	%p31, %f97, 0f34000000;
	vote.sync.all.pred 	%p32, %p31, %r82;
	mov.u32 	%r101, 2;
	@%p32 bra 	BB1_36;

BB1_34:
	// inline asm
	activemask.b32 %r85;
	// inline asm
	setp.lt.f32	%p33, %f30, 0f3C23D70A;
	vote.sync.all.pred 	%p34, %p33, %r85;
	mov.u32 	%r101, %r94;
	@%p34 bra 	BB1_36;

	// inline asm
	activemask.b32 %r87;
	// inline asm
	setp.le.f32	%p35, %f30, 0f3F800000;
	vote.sync.all.pred 	%p36, %p35, %r87;
	setp.ge.u32	%p37, %r7, %r69;
	and.pred  	%p38, %p36, %p37;
	selp.b32	%r101, %r94, %r9, %p38;

BB1_36:
	setp.lt.u32	%p39, %r94, %r101;
	@%p39 bra 	BB1_12;

BB1_37:
	cvt.rn.f32.u32	%f107, %r101;
	div.u32 	%r90, %r102, %r101;
	cvt.rn.f32.u32	%f108, %r90;

BB1_38:
	mul.lo.s32 	%r91, %r5, %r24;
	cvt.u64.u32	%rd58, %r91;
	cvta.to.global.u64 	%rd59, %rd1;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r4, 16;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.f32 	[%rd62], %f108;
	st.global.f32 	[%rd62+4], %f107;
	mov.u32 	%r92, 0;
	st.global.u32 	[%rd62+12], %r92;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd62+8], %rs1;
	setp.gt.f32	%p40, %f107, 0f00000000;
	@%p40 bra 	BB1_40;

	mov.u64 	%rd63, $str6;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r93, 220;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r93;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB1_40:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .f32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<79>;
	.reg .b32 	%r<104>;
	.reg .f64 	%fd<33>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r24, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd16, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd15, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd14, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd13, [fractalRenderMainDouble_param_3];
	ld.param.f32 	%f25, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r28, 59;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB2_2:
	mov.u32 	%r29, %tid.x;
	mov.u32 	%r30, %tid.y;
	mad.lo.s32 	%r31, %r1, %r30, %r29;
	shl.b32 	%r32, %r1, 2;
	and.b32  	%r33, %r31, 15;
	rem.u32 	%r34, %r31, %r32;
	sub.s32 	%r35, %r34, %r33;
	shr.u32 	%r36, %r35, 2;
	and.b32  	%r37, %r31, 3;
	add.s32 	%r38, %r36, %r37;
	div.u32 	%r39, %r31, %r32;
	shl.b32 	%r40, %r39, 2;
	bfe.u32 	%r41, %r31, 2, 2;
	add.s32 	%r42, %r40, %r41;
	mov.u32 	%r43, %ctaid.x;
	mad.lo.s32 	%r4, %r43, %r1, %r38;
	mov.u32 	%r44, %ctaid.y;
	mov.u32 	%r45, %ntid.y;
	mad.lo.s32 	%r5, %r44, %r45, %r42;
	setp.lt.u32	%p2, %r4, %r25;
	setp.lt.u32	%p3, %r5, %r26;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_41;
	bra.uni 	BB2_3;

BB2_3:
	setp.ge.f32	%p5, %f25, 0f3F800000;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd8, $str5;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r46, 213;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB2_5:
	setp.lt.f32	%p6, %f25, 0f3F800000;
	mov.f32 	%f77, 0f00000000;
	mov.f32 	%f78, %f77;
	@%p6 bra 	BB2_39;

	abs.f32 	%f28, %f25;
	mov.b32 	 %r47, %f25;
	and.b32  	%r48, %r47, -2147483648;
	or.b32  	%r49, %r48, 1056964608;
	mov.b32 	 %f29, %r49;
	add.f32 	%f30, %f29, %f25;
	cvt.rzi.f32.f32	%f31, %f30;
	setp.gt.f32	%p7, %f28, 0f4B000000;
	selp.f32	%f70, %f25, %f31, %p7;
	setp.geu.f32	%p8, %f28, 0f3F000000;
	@%p8 bra 	BB2_8;

	cvt.rzi.f32.f32	%f70, %f25;

BB2_8:
	cvt.rzi.u32.f32	%r50, %f70;
	mov.u32 	%r51, 64;
	min.u32 	%r6, %r51, %r50;
	setp.lt.u32	%p9, %r6, 65;
	@%p9 bra 	BB2_10;

	mov.u64 	%rd14, $str10;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str2;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r52, 113;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB2_10:
	setp.eq.s32	%p10, %r6, 0;
	mov.u32 	%r102, 0;
	mov.u32 	%r101, %r102;
	@%p10 bra 	BB2_38;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.u32 	%r57, [amplifier];
	cvt.rn.f64.s32	%fd5, %r57;
	cvt.rn.f64.u32	%fd17, %r25;
	sub.f64 	%fd18, %fd15, %fd13;
	div.rn.f64 	%fd6, %fd18, %fd17;
	cvt.rn.f64.u32	%fd19, %r26;
	sub.f64 	%fd20, %fd16, %fd14;
	div.rn.f64 	%fd7, %fd20, %fd19;
	mov.u32 	%r94, 0;
	and.b32  	%r68, %r27, 1;
	mov.u32 	%r102, %r94;
	mov.u32 	%r101, %r6;

BB2_12:
	mov.u32 	%r9, %r101;
	mov.u32 	%r7, %r94;
	setp.lt.u32	%p11, %r7, 3;
	@%p11 bra 	BB2_20;
	bra.uni 	BB2_13;

BB2_20:
	cvt.rn.f64.u32	%fd21, %r7;
	div.rn.f64 	%fd31, %fd21, 0d4008000000000000;
	mov.f64 	%fd32, %fd31;
	bra.uni 	BB2_21;

BB2_13:
	add.f32 	%f32, %f25, 0fC0000000;
	sqrt.rn.f32 	%f4, %f32;
	abs.f32 	%f33, %f4;
	mov.b32 	 %r58, %f4;
	and.b32  	%r59, %r58, -2147483648;
	or.b32  	%r60, %r59, 1056964608;
	mov.b32 	 %f34, %r60;
	add.f32 	%f35, %f4, %f34;
	cvt.rzi.f32.f32	%f36, %f35;
	setp.gt.f32	%p12, %f33, 0f4B000000;
	selp.f32	%f71, %f4, %f36, %p12;
	setp.geu.f32	%p13, %f33, 0f3F000000;
	@%p13 bra 	BB2_15;

	cvt.rzi.f32.f32	%f71, %f4;

BB2_15:
	add.s32 	%r61, %r7, -2;
	cvt.rzi.u32.f32	%r62, %f71;
	rem.u32 	%r63, %r61, %r62;
	cvt.rn.f32.u32	%f37, %r63;
	div.rn.f32 	%f8, %f37, %f4;
	div.u32 	%r64, %r61, %r62;
	cvt.rn.f32.u32	%f38, %r64;
	div.rn.f32 	%f9, %f38, %f4;
	setp.le.f32	%p14, %f9, 0f3F800000;
	@%p14 bra 	BB2_17;

	mov.u64 	%rd20, $str11;
	cvta.global.u64 	%rd21, %rd20;
	mov.u64 	%rd22, $str2;
	cvta.global.u64 	%rd23, %rd22;
	mov.u32 	%r65, 132;
	mov.u64 	%rd24, 0;
	mov.u64 	%rd25, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd23;
	.param .b32 param2;
	st.param.b32	[param2+0], %r65;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB2_17:
	setp.le.f32	%p15, %f8, 0f3F800000;
	@%p15 bra 	BB2_19;

	mov.u64 	%rd26, $str12;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str2;
	cvta.global.u64 	%rd29, %rd28;
	mov.u32 	%r66, 133;
	mov.u64 	%rd30, 0;
	mov.u64 	%rd31, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r66;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd30;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd31;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB2_19:
	cvt.f64.f32	%fd31, %f8;
	cvt.f64.f32	%fd32, %f9;

BB2_21:
	add.f64 	%fd22, %fd4, %fd32;
	neg.f64 	%fd23, %fd22;
	add.f64 	%fd24, %fd3, %fd31;
	fma.rn.f64 	%fd25, %fd6, %fd24, %fd13;
	fma.rn.f64 	%fd26, %fd7, %fd23, %fd16;
	abs.f64 	%fd27, %fd25;
	abs.f64 	%fd28, %fd26;
	add.f64 	%fd29, %fd27, %fd28;
	mul.f64 	%fd30, %fd29, %fd5;
	cvt.rzi.s32.f64	%r67, %fd30;
	cvt.rn.f32.s32	%f39, %r67;
	cvt.rzi.u32.f32	%r10, %f39;
	add.s32 	%r102, %r10, %r102;
	setp.gt.u32	%p16, %r7, 9;
	@%p16 bra 	BB2_23;

	cvt.rn.f32.u32	%f40, %r10;
	add.u64 	%rd32, %SP, 0;
	cvta.to.local.u64 	%rd33, %rd32;
	mul.wide.u32 	%rd34, %r7, 4;
	add.s64 	%rd35, %rd33, %rd34;
	st.local.f32 	[%rd35], %f40;

BB2_23:
	setp.lt.u32	%p17, %r7, 10;
	setp.eq.b32	%p18, %r68, 1;
	setp.ne.s32	%p19, %r7, 0;
	and.pred  	%p20, %p17, %p19;
	and.pred  	%p21, %p20, %p18;
	shr.u32 	%r69, %r9, 1;
	setp.eq.s32	%p22, %r7, %r69;
	or.pred  	%p23, %p21, %p22;
	add.s32 	%r94, %r7, 1;
	mov.u32 	%r101, %r9;
	@!%p23 bra 	BB2_37;
	bra.uni 	BB2_24;

BB2_24:
	div.u32 	%r70, %r102, %r94;
	cvt.rn.f32.u32	%f10, %r70;
	setp.eq.s32	%p24, %r7, 0;
	mov.f32 	%f76, 0f00000000;
	@%p24 bra 	BB2_33;

	and.b32  	%r72, %r7, 3;
	setp.eq.s32	%p25, %r72, 0;
	mov.f32 	%f76, 0f00000000;
	mov.u32 	%r100, 0;
	@%p25 bra 	BB2_31;

	setp.eq.s32	%p26, %r72, 1;
	mov.f32 	%f73, 0f00000000;
	mov.u32 	%r98, 0;
	@%p26 bra 	BB2_30;

	setp.eq.s32	%p27, %r72, 2;
	mov.f32 	%f72, 0f00000000;
	mov.u32 	%r97, 0;
	@%p27 bra 	BB2_29;

	add.u64 	%rd36, %SP, 0;
	cvta.to.local.u64 	%rd37, %rd36;
	ld.local.f32 	%f45, [%rd37];
	sub.f32 	%f46, %f45, %f10;
	fma.rn.f32 	%f72, %f46, %f46, 0f00000000;
	mov.u32 	%r97, 1;

BB2_29:
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	mul.wide.u32 	%rd40, %r97, 4;
	add.s64 	%rd41, %rd39, %rd40;
	ld.local.f32 	%f47, [%rd41];
	sub.f32 	%f48, %f47, %f10;
	fma.rn.f32 	%f73, %f48, %f48, %f72;
	add.s32 	%r98, %r97, 1;

BB2_30:
	add.u64 	%rd42, %SP, 0;
	cvta.to.local.u64 	%rd43, %rd42;
	mul.wide.u32 	%rd44, %r98, 4;
	add.s64 	%rd45, %rd43, %rd44;
	ld.local.f32 	%f49, [%rd45];
	sub.f32 	%f50, %f49, %f10;
	fma.rn.f32 	%f76, %f50, %f50, %f73;
	add.s32 	%r100, %r98, 1;

BB2_31:
	setp.lt.u32	%p28, %r7, 4;
	@%p28 bra 	BB2_33;

BB2_32:
	add.u64 	%rd46, %SP, 0;
	cvta.to.local.u64 	%rd47, %rd46;
	mul.wide.u32 	%rd48, %r100, 4;
	add.s64 	%rd49, %rd47, %rd48;
	ld.local.f32 	%f51, [%rd49];
	sub.f32 	%f52, %f51, %f10;
	fma.rn.f32 	%f53, %f52, %f52, %f76;
	add.s32 	%r78, %r100, 1;
	mul.wide.u32 	%rd50, %r78, 4;
	add.s64 	%rd51, %rd47, %rd50;
	ld.local.f32 	%f54, [%rd51];
	sub.f32 	%f55, %f54, %f10;
	fma.rn.f32 	%f56, %f55, %f55, %f53;
	add.s32 	%r79, %r100, 2;
	mul.wide.u32 	%rd52, %r79, 4;
	add.s64 	%rd53, %rd47, %rd52;
	ld.local.f32 	%f57, [%rd53];
	sub.f32 	%f58, %f57, %f10;
	fma.rn.f32 	%f59, %f58, %f58, %f56;
	add.s32 	%r80, %r100, 3;
	mul.wide.u32 	%rd54, %r80, 4;
	add.s64 	%rd55, %rd47, %rd54;
	ld.local.f32 	%f60, [%rd55];
	sub.f32 	%f61, %f60, %f10;
	fma.rn.f32 	%f76, %f61, %f61, %f59;
	add.s32 	%r100, %r100, 4;
	setp.lt.u32	%p29, %r100, %r7;
	@%p29 bra 	BB2_32;

BB2_33:
	add.s32 	%r81, %r7, -1;
	cvt.rn.f32.u32	%f62, %r81;
	div.rn.f32 	%f63, %f76, %f62;
	div.rn.f32 	%f20, %f63, %f10;
	setp.ne.s32	%p30, %r7, 1;
	@%p30 bra 	BB2_35;

	// inline asm
	activemask.b32 %r82;
	// inline asm
	add.u64 	%rd56, %SP, 0;
	cvta.to.local.u64 	%rd57, %rd56;
	ld.local.v2.f32 	{%f64, %f65}, [%rd57];
	sub.f32 	%f68, %f64, %f65;
	abs.f32 	%f69, %f68;
	setp.lt.f32	%p31, %f69, 0f34000000;
	vote.sync.all.pred 	%p32, %p31, %r82;
	mov.u32 	%r101, 2;
	@%p32 bra 	BB2_37;

BB2_35:
	// inline asm
	activemask.b32 %r85;
	// inline asm
	setp.lt.f32	%p33, %f20, 0f3C23D70A;
	vote.sync.all.pred 	%p34, %p33, %r85;
	mov.u32 	%r101, %r94;
	@%p34 bra 	BB2_37;

	// inline asm
	activemask.b32 %r87;
	// inline asm
	setp.le.f32	%p35, %f20, 0f3F800000;
	vote.sync.all.pred 	%p36, %p35, %r87;
	setp.ge.u32	%p37, %r7, %r69;
	and.pred  	%p38, %p36, %p37;
	selp.b32	%r101, %r94, %r9, %p38;

BB2_37:
	setp.lt.u32	%p39, %r94, %r101;
	@%p39 bra 	BB2_12;

BB2_38:
	cvt.rn.f32.u32	%f77, %r101;
	div.u32 	%r90, %r102, %r101;
	cvt.rn.f32.u32	%f78, %r90;

BB2_39:
	mul.lo.s32 	%r91, %r5, %r24;
	cvt.u64.u32	%rd58, %r91;
	cvta.to.global.u64 	%rd59, %rd1;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r4, 16;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.f32 	[%rd62], %f78;
	st.global.f32 	[%rd62+4], %f77;
	mov.u32 	%r92, 0;
	st.global.u32 	[%rd62+12], %r92;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd62+8], %rs1;
	setp.gt.f32	%p40, %f77, 0f00000000;
	@%p40 bra 	BB2_41;

	mov.u64 	%rd63, $str6;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r93, 220;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r93;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB2_41:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .f32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<103>;
	.reg .b16 	%rs<11>;
	.reg .f32 	%f<349>;
	.reg .b32 	%r<203>;
	.reg .f64 	%fd<8>;
	.reg .b64 	%rd<129>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd4, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r46, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r48, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r47, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f98, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f97, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f96, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f95, [fractalRenderAdvancedFloat_param_3];
	ld.param.f32 	%f321, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r49, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f103, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f102, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f101, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f100, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd5, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r50, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r52, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r51, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p3, %r1, 32;
	@%p3 bra 	BB3_2;

	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r53, 59;
	mov.u64 	%rd10, 0;
	mov.u64 	%rd11, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r53;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd10;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd11;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB3_2:
	mov.u32 	%r54, %tid.x;
	mov.u32 	%r55, %tid.y;
	mad.lo.s32 	%r56, %r1, %r55, %r54;
	shl.b32 	%r57, %r1, 2;
	and.b32  	%r58, %r56, 15;
	rem.u32 	%r59, %r56, %r57;
	sub.s32 	%r60, %r59, %r58;
	shr.u32 	%r61, %r60, 2;
	and.b32  	%r62, %r56, 3;
	add.s32 	%r63, %r61, %r62;
	div.u32 	%r64, %r56, %r57;
	shl.b32 	%r65, %r64, 2;
	bfe.u32 	%r66, %r56, 2, 2;
	add.s32 	%r67, %r65, %r66;
	mov.u32 	%r68, %ctaid.x;
	mad.lo.s32 	%r4, %r68, %r1, %r63;
	mov.u32 	%r69, %ctaid.y;
	mov.u32 	%r70, %ntid.y;
	mad.lo.s32 	%r5, %r69, %r70, %r67;
	setp.lt.u32	%p4, %r4, %r47;
	setp.gt.u32	%p5, %r48, %r5;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB3_90;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r71, %r49, 52;
	mov.u16 	%rs9, 0;
	setp.ne.s32	%p7, %r71, 52;
	@%p7 bra 	BB3_12;

	setp.gt.f32	%p8, %f321, 0f00000000;
	@%p8 bra 	BB3_6;

	mov.u64 	%rd12, $str3;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, $str2;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r72, 263;
	mov.u64 	%rd16, 0;
	mov.u64 	%rd17, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd15;
	.param .b32 param2;
	st.param.b32	[param2+0], %r72;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB3_6:
	and.b32  	%r73, %r4, -8;
	cvt.rn.f32.u32	%f104, %r73;
	and.b32  	%r74, %r5, -4;
	cvt.rn.f32.u32	%f105, %r74;
	cvt.rn.f32.u32	%f106, %r51;
	sub.f32 	%f107, %f106, %f104;
	cvt.rn.f32.u32	%f108, %r52;
	sub.f32 	%f109, %f108, %f105;
	mul.f32 	%f110, %f109, %f109;
	fma.rn.f32 	%f111, %f107, %f107, %f110;
	sqrt.rn.f32 	%f112, %f111;
	ld.global.f32 	%f113, [pixelRealWidthInCm];
	mul.f32 	%f114, %f112, %f113;
	ld.global.f32 	%f115, [screenDistance];
	div.rn.f32 	%f1, %f114, %f115;
	abs.f32 	%f2, %f1;
	setp.leu.f32	%p9, %f2, 0f3F800000;
	mov.f32 	%f320, %f2;
	@%p9 bra 	BB3_8;

	rcp.rn.f32 	%f320, %f2;

BB3_8:
	mul.rn.f32 	%f116, %f320, %f320;
	mov.f32 	%f117, 0fC0B59883;
	mov.f32 	%f118, 0fBF52C7EA;
	fma.rn.f32 	%f119, %f116, %f118, %f117;
	mov.f32 	%f120, 0fC0D21907;
	fma.rn.f32 	%f121, %f119, %f116, %f120;
	mul.f32 	%f122, %f116, %f121;
	mul.f32 	%f123, %f320, %f122;
	add.f32 	%f124, %f116, 0f41355DC0;
	mov.f32 	%f125, 0f41E6BD60;
	fma.rn.f32 	%f126, %f124, %f116, %f125;
	mov.f32 	%f127, 0f419D92C8;
	fma.rn.f32 	%f128, %f126, %f116, %f127;
	rcp.rn.f32 	%f129, %f128;
	fma.rn.f32 	%f130, %f123, %f129, %f320;
	mov.f32 	%f131, 0f3FC90FDB;
	sub.f32 	%f132, %f131, %f130;
	setp.gt.f32	%p10, %f2, 0f3F800000;
	selp.f32	%f133, %f132, %f130, %p10;
	mov.b32 	 %r75, %f133;
	mov.b32 	 %r76, %f1;
	and.b32  	%r77, %r76, -2147483648;
	or.b32  	%r78, %r75, %r77;
	mov.b32 	 %f134, %r78;
	setp.gtu.f32	%p11, %f2, 0f7F800000;
	selp.f32	%f135, %f133, %f134, %p11;
	mul.f32 	%f136, %f135, 0f43340000;
	div.rn.f32 	%f5, %f136, 0f40490FDB;
	setp.ge.f32	%p12, %f5, 0f00000000;
	@%p12 bra 	BB3_10;

	mov.u64 	%rd18, $str4;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, $str2;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r79, 276;
	mov.u64 	%rd22, 0;
	mov.u64 	%rd23, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd19;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd21;
	.param .b32 param2;
	st.param.b32	[param2+0], %r79;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd22;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd23;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB3_10:
	mul.f32 	%f137, %f321, 0f40B00000;
	setp.ltu.f32	%p13, %f321, 0f3F800000;
	selp.f32	%f138, %f137, 0f40B00000, %p13;
	mov.f32 	%f139, 0f42700000;
	sub.f32 	%f140, %f139, %f138;
	mov.f32 	%f141, 0fBF800000;
	div.rn.f32 	%f142, %f141, %f140;
	fma.rn.f32 	%f143, %f138, 0f80000000, 0f42700000;
	div.rn.f32 	%f144, %f143, %f140;
	fma.rn.f32 	%f145, %f5, %f142, %f144;
	cvt.f64.f32	%fd1, %f145;
	mov.f64 	%fd2, 0d3FF0000000000000;
	min.f64 	%fd3, %fd2, %fd1;
	cvt.rn.f32.f64	%f146, %fd3;
	mul.f32 	%f321, %f146, %f321;
	setp.gtu.f32	%p14, %f5, %f138;
	@%p14 bra 	BB3_12;

	cvt.f64.f32	%fd4, %f321;
	max.f64 	%fd6, %fd2, %fd4;
	cvt.rn.f32.f64	%f321, %fd6;
	mov.u16 	%rs9, 1;

BB3_12:
	and.b32  	%r80, %r49, 8;
	setp.eq.s32	%p16, %r80, 0;
	mov.pred 	%p102, -1;
	mov.f32 	%f346, 0f00000000;
	@%p16 bra 	BB3_13;

	sub.s32 	%r81, %r48, %r5;
	cvt.rn.f32.u32	%f149, %r81;
	cvt.rn.f32.u32	%f150, %r47;
	cvt.rn.f32.u32	%f151, %r4;
	div.rn.f32 	%f152, %f151, %f150;
	cvt.rn.f32.u32	%f153, %r48;
	div.rn.f32 	%f154, %f149, %f153;
	sub.f32 	%f155, %f97, %f95;
	sub.f32 	%f156, %f98, %f96;
	fma.rn.f32 	%f157, %f155, %f152, %f95;
	fma.rn.f32 	%f158, %f156, %f154, %f96;
	sub.f32 	%f159, %f157, %f100;
	sub.f32 	%f160, %f158, %f101;
	sub.f32 	%f161, %f102, %f100;
	div.rn.f32 	%f162, %f159, %f161;
	sub.f32 	%f163, %f103, %f101;
	div.rn.f32 	%f164, %f160, %f163;
	mul.f32 	%f13, %f150, %f162;
	mul.f32 	%f165, %f153, %f164;
	sub.f32 	%f14, %f153, %f165;
	abs.f32 	%f166, %f13;
	mov.b32 	 %r82, %f13;
	and.b32  	%r83, %r82, -2147483648;
	or.b32  	%r84, %r83, 1056964608;
	mov.b32 	 %f167, %r84;
	add.f32 	%f168, %f13, %f167;
	cvt.rzi.f32.f32	%f169, %f168;
	setp.gt.f32	%p17, %f166, 0f4B000000;
	selp.f32	%f322, %f13, %f169, %p17;
	setp.geu.f32	%p18, %f166, 0f3F000000;
	@%p18 bra 	BB3_16;

	cvt.rzi.f32.f32	%f322, %f13;

BB3_16:
	cvt.rzi.s32.f32	%r6, %f322;
	mov.b32 	 %r85, %f14;
	and.b32  	%r86, %r85, -2147483648;
	or.b32  	%r87, %r86, 1056964608;
	mov.b32 	 %f170, %r87;
	add.f32 	%f171, %f14, %f170;
	cvt.rzi.f32.f32	%f172, %f171;
	abs.f32 	%f173, %f14;
	setp.gt.f32	%p19, %f173, 0f4B000000;
	selp.f32	%f323, %f14, %f172, %p19;
	setp.geu.f32	%p20, %f173, 0f3F000000;
	@%p20 bra 	BB3_18;

	cvt.rzi.f32.f32	%f323, %f14;

BB3_18:
	add.s32 	%r88, %r47, -2;
	setp.lt.u32	%p22, %r6, %r88;
	setp.gt.s32	%p23, %r6, 1;
	and.pred  	%p24, %p23, %p22;
	cvt.rzi.s32.f32	%r89, %f323;
	setp.gt.s32	%p25, %r89, 1;
	and.pred  	%p26, %p24, %p25;
	add.s32 	%r90, %r48, -2;
	setp.lt.u32	%p27, %r89, %r90;
	and.pred  	%p28, %p27, %p26;
	mov.f32 	%f325, %f346;
	@!%p28 bra 	BB3_20;
	bra.uni 	BB3_19;

BB3_19:
	cvt.rmi.f32.f32	%f176, %f13;
	cvt.rzi.u32.f32	%r91, %f176;
	cvt.rmi.f32.f32	%f177, %f14;
	cvt.rzi.u32.f32	%r92, %f177;
	cvt.rn.f32.u32	%f178, %r91;
	sub.f32 	%f179, %f13, %f178;
	cvt.rn.f32.u32	%f180, %r92;
	sub.f32 	%f181, %f14, %f180;
	mul.lo.s32 	%r93, %r92, %r50;
	cvt.u64.u32	%rd24, %r93;
	cvta.to.global.u64 	%rd25, %rd5;
	add.s64 	%rd26, %rd25, %rd24;
	mul.wide.u32 	%rd27, %r91, 16;
	add.s64 	%rd28, %rd26, %rd27;
	add.s32 	%r94, %r91, 1;
	mul.wide.u32 	%rd29, %r94, 16;
	add.s64 	%rd30, %rd26, %rd29;
	add.s32 	%r95, %r92, 1;
	mul.lo.s32 	%r96, %r95, %r50;
	cvt.u64.u32	%rd31, %r96;
	add.s64 	%rd32, %rd25, %rd31;
	add.s64 	%rd33, %rd32, %rd27;
	add.s64 	%rd34, %rd32, %rd29;
	mov.f32 	%f182, 0f3F800000;
	sub.f32 	%f183, %f182, %f179;
	sub.f32 	%f184, %f182, %f181;
	mul.f32 	%f185, %f183, %f184;
	ld.global.f32 	%f186, [%rd28];
	mul.f32 	%f187, %f179, %f184;
	ld.global.f32 	%f188, [%rd30];
	mul.f32 	%f189, %f188, %f187;
	fma.rn.f32 	%f190, %f186, %f185, %f189;
	mul.f32 	%f191, %f183, %f181;
	ld.global.f32 	%f192, [%rd33];
	fma.rn.f32 	%f193, %f191, %f192, %f190;
	mul.f32 	%f194, %f179, %f181;
	ld.global.f32 	%f195, [%rd34];
	fma.rn.f32 	%f346, %f194, %f195, %f193;
	ld.global.f32 	%f196, [%rd28+4];
	ld.global.f32 	%f197, [%rd30+4];
	mul.f32 	%f198, %f187, %f197;
	fma.rn.f32 	%f199, %f196, %f185, %f198;
	ld.global.f32 	%f200, [%rd33+4];
	fma.rn.f32 	%f201, %f191, %f200, %f199;
	ld.global.f32 	%f202, [%rd34+4];
	fma.rn.f32 	%f325, %f194, %f202, %f201;
	cvt.f64.f32	%fd7, %f325;
	setp.lt.f64	%p102, %fd7, 0d3FB999999999999A;
	bra.uni 	BB3_20;

BB3_13:
	mov.f32 	%f325, %f346;

BB3_20:
	add.u64 	%rd35, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd35;
	@%p102 bra 	BB3_56;
	bra.uni 	BB3_21;

BB3_56:
	setp.lt.f32	%p67, %f321, 0f3F800000;
	selp.f32	%f60, 0f3F800000, %f321, %p67;
	abs.f32 	%f264, %f60;
	mov.b32 	 %r143, %f60;
	and.b32  	%r144, %r143, -2147483648;
	or.b32  	%r145, %r144, 1056964608;
	mov.b32 	 %f265, %r145;
	add.f32 	%f266, %f60, %f265;
	cvt.rzi.f32.f32	%f267, %f266;
	setp.gt.f32	%p68, %f264, 0f4B000000;
	selp.f32	%f337, %f60, %f267, %p68;
	setp.geu.f32	%p69, %f264, 0f3F000000;
	@%p69 bra 	BB3_58;

	cvt.rzi.f32.f32	%f337, %f60;

BB3_58:
	cvt.rzi.u32.f32	%r146, %f337;
	mov.u32 	%r147, 64;
	min.u32 	%r25, %r147, %r146;
	cvt.rn.f32.u32	%f268, %r47;
	sub.f32 	%f269, %f97, %f95;
	div.rn.f32 	%f64, %f269, %f268;
	cvt.rn.f32.u32	%f270, %r48;
	sub.f32 	%f271, %f98, %f96;
	div.rn.f32 	%f65, %f271, %f270;
	setp.lt.u32	%p70, %r25, 65;
	@%p70 bra 	BB3_60;

	mov.u64 	%rd79, $str10;
	cvta.global.u64 	%rd80, %rd79;
	mov.u64 	%rd81, $str2;
	cvta.global.u64 	%rd82, %rd81;
	mov.u32 	%r148, 113;
	mov.u64 	%rd83, 0;
	mov.u64 	%rd84, 2;
	// Callseq Start 18
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd80;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd82;
	.param .b32 param2;
	st.param.b32	[param2+0], %r148;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd83;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd84;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 18

BB3_60:
	setp.eq.s32	%p71, %r25, 0;
	mov.u32 	%r201, 0;
	mov.u32 	%r200, %r201;
	@%p71 bra 	BB3_87;

	cvt.rn.f32.u32	%f66, %r4;
	cvt.rn.f32.u32	%f67, %r5;
	ld.const.u32 	%r153, [amplifier];
	cvt.rn.f32.s32	%f68, %r153;
	add.f32 	%f69, %f60, 0fC0000000;
	and.b32  	%r26, %r49, 1;
	mov.u32 	%r193, 0;
	sqrt.rn.f32 	%f70, %f69;
	mov.u32 	%r201, %r193;
	mov.u32 	%r200, %r25;

BB3_62:
	mov.u32 	%r29, %r200;
	mov.u32 	%r27, %r193;
	setp.lt.u32	%p72, %r27, 3;
	@%p72 bra 	BB3_69;
	bra.uni 	BB3_63;

BB3_69:
	cvt.rn.f32.u32	%f278, %r27;
	div.rn.f32 	%f339, %f278, 0f40400000;
	mov.f32 	%f340, %f339;
	bra.uni 	BB3_70;

BB3_63:
	abs.f32 	%f272, %f70;
	mov.b32 	 %r154, %f70;
	and.b32  	%r155, %r154, -2147483648;
	or.b32  	%r156, %r155, 1056964608;
	mov.b32 	 %f273, %r156;
	add.f32 	%f274, %f70, %f273;
	cvt.rzi.f32.f32	%f275, %f274;
	setp.gt.f32	%p73, %f272, 0f4B000000;
	selp.f32	%f338, %f70, %f275, %p73;
	setp.geu.f32	%p74, %f272, 0f3F000000;
	@%p74 bra 	BB3_65;

	cvt.rzi.f32.f32	%f338, %f70;

BB3_65:
	add.s32 	%r157, %r27, -2;
	cvt.rzi.u32.f32	%r158, %f338;
	rem.u32 	%r159, %r157, %r158;
	cvt.rn.f32.u32	%f276, %r159;
	div.rn.f32 	%f339, %f276, %f70;
	div.u32 	%r160, %r157, %r158;
	cvt.rn.f32.u32	%f277, %r160;
	div.rn.f32 	%f340, %f277, %f70;
	setp.le.f32	%p75, %f340, 0f3F800000;
	@%p75 bra 	BB3_67;

	mov.u64 	%rd85, $str11;
	cvta.global.u64 	%rd86, %rd85;
	mov.u64 	%rd87, $str2;
	cvta.global.u64 	%rd88, %rd87;
	mov.u32 	%r161, 132;
	mov.u64 	%rd89, 0;
	mov.u64 	%rd90, 2;
	// Callseq Start 19
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd86;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd88;
	.param .b32 param2;
	st.param.b32	[param2+0], %r161;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd89;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd90;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 19

BB3_67:
	setp.le.f32	%p76, %f339, 0f3F800000;
	@%p76 bra 	BB3_70;

	mov.u64 	%rd91, $str12;
	cvta.global.u64 	%rd92, %rd91;
	mov.u64 	%rd93, $str2;
	cvta.global.u64 	%rd94, %rd93;
	mov.u32 	%r162, 133;
	mov.u64 	%rd95, 0;
	mov.u64 	%rd96, 2;
	// Callseq Start 20
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd92;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd94;
	.param .b32 param2;
	st.param.b32	[param2+0], %r162;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd95;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd96;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 20

BB3_70:
	add.f32 	%f279, %f67, %f340;
	neg.f32 	%f280, %f279;
	add.f32 	%f281, %f66, %f339;
	fma.rn.f32 	%f282, %f64, %f281, %f95;
	fma.rn.f32 	%f283, %f65, %f280, %f98;
	abs.f32 	%f284, %f282;
	abs.f32 	%f285, %f283;
	add.f32 	%f286, %f284, %f285;
	mul.f32 	%f287, %f286, %f68;
	cvt.rzi.s32.f32	%r163, %f287;
	cvt.rn.f32.s32	%f288, %r163;
	cvt.rzi.u32.f32	%r30, %f288;
	add.s32 	%r201, %r30, %r201;
	setp.gt.u32	%p77, %r27, 9;
	@%p77 bra 	BB3_72;

	cvt.rn.f32.u32	%f289, %r30;
	mul.wide.u32 	%rd99, %r27, 4;
	add.s64 	%rd100, %rd1, %rd99;
	st.local.f32 	[%rd100], %f289;

BB3_72:
	setp.lt.u32	%p78, %r27, 10;
	setp.ne.s32	%p79, %r27, 0;
	and.pred  	%p80, %p78, %p79;
	setp.ne.s32	%p81, %r26, 0;
	and.pred  	%p82, %p80, %p81;
	shr.u32 	%r32, %r29, 1;
	setp.eq.s32	%p83, %r27, %r32;
	or.pred  	%p84, %p82, %p83;
	add.s32 	%r193, %r27, 1;
	mov.u32 	%r200, %r29;
	@!%p84 bra 	BB3_86;
	bra.uni 	BB3_73;

BB3_73:
	div.u32 	%r164, %r201, %r193;
	cvt.rn.f32.u32	%f79, %r164;
	setp.eq.s32	%p85, %r27, 0;
	mov.f32 	%f345, 0f00000000;
	@%p85 bra 	BB3_82;

	and.b32  	%r34, %r27, 3;
	setp.eq.s32	%p86, %r34, 0;
	mov.f32 	%f345, 0f00000000;
	mov.u32 	%r199, 0;
	@%p86 bra 	BB3_80;

	setp.eq.s32	%p87, %r34, 1;
	mov.f32 	%f342, 0f00000000;
	mov.u32 	%r197, 0;
	@%p87 bra 	BB3_79;

	setp.eq.s32	%p88, %r34, 2;
	mov.f32 	%f341, 0f00000000;
	mov.u32 	%r196, 0;
	@%p88 bra 	BB3_78;

	ld.local.f32 	%f294, [%rd1];
	sub.f32 	%f295, %f294, %f79;
	fma.rn.f32 	%f341, %f295, %f295, 0f00000000;
	mov.u32 	%r196, 1;

BB3_78:
	mul.wide.u32 	%rd103, %r196, 4;
	add.s64 	%rd104, %rd1, %rd103;
	ld.local.f32 	%f296, [%rd104];
	sub.f32 	%f297, %f296, %f79;
	fma.rn.f32 	%f342, %f297, %f297, %f341;
	add.s32 	%r197, %r196, 1;

BB3_79:
	mul.wide.u32 	%rd107, %r197, 4;
	add.s64 	%rd108, %rd1, %rd107;
	ld.local.f32 	%f298, [%rd108];
	sub.f32 	%f299, %f298, %f79;
	fma.rn.f32 	%f345, %f299, %f299, %f342;
	add.s32 	%r199, %r197, 1;

BB3_80:
	setp.lt.u32	%p89, %r27, 4;
	@%p89 bra 	BB3_82;

BB3_81:
	mul.wide.u32 	%rd110, %r199, 4;
	add.s64 	%rd111, %rd1, %rd110;
	ld.local.f32 	%f300, [%rd111];
	sub.f32 	%f301, %f300, %f79;
	fma.rn.f32 	%f302, %f301, %f301, %f345;
	add.s32 	%r169, %r199, 1;
	mul.wide.u32 	%rd112, %r169, 4;
	add.s64 	%rd113, %rd1, %rd112;
	ld.local.f32 	%f303, [%rd113];
	sub.f32 	%f304, %f303, %f79;
	fma.rn.f32 	%f305, %f304, %f304, %f302;
	add.s32 	%r170, %r199, 2;
	mul.wide.u32 	%rd114, %r170, 4;
	add.s64 	%rd115, %rd1, %rd114;
	ld.local.f32 	%f306, [%rd115];
	sub.f32 	%f307, %f306, %f79;
	fma.rn.f32 	%f308, %f307, %f307, %f305;
	add.s32 	%r171, %r199, 3;
	mul.wide.u32 	%rd116, %r171, 4;
	add.s64 	%rd117, %rd1, %rd116;
	ld.local.f32 	%f309, [%rd117];
	sub.f32 	%f310, %f309, %f79;
	fma.rn.f32 	%f345, %f310, %f310, %f308;
	add.s32 	%r199, %r199, 4;
	setp.lt.u32	%p90, %r199, %r27;
	@%p90 bra 	BB3_81;

BB3_82:
	add.s32 	%r172, %r27, -1;
	cvt.rn.f32.u32	%f311, %r172;
	div.rn.f32 	%f312, %f345, %f311;
	div.rn.f32 	%f89, %f312, %f79;
	setp.ne.s32	%p91, %r27, 1;
	@%p91 bra 	BB3_84;

	// inline asm
	activemask.b32 %r173;
	// inline asm
	ld.local.v2.f32 	{%f313, %f314}, [%rd1];
	sub.f32 	%f317, %f313, %f314;
	abs.f32 	%f318, %f317;
	setp.lt.f32	%p92, %f318, 0f34000000;
	vote.sync.all.pred 	%p93, %p92, %r173;
	mov.u32 	%r200, 2;
	@%p93 bra 	BB3_86;

BB3_84:
	// inline asm
	activemask.b32 %r176;
	// inline asm
	setp.lt.f32	%p94, %f89, 0f3C23D70A;
	vote.sync.all.pred 	%p95, %p94, %r176;
	mov.u32 	%r200, %r193;
	@%p95 bra 	BB3_86;

	// inline asm
	activemask.b32 %r178;
	// inline asm
	setp.le.f32	%p96, %f89, 0f3F800000;
	vote.sync.all.pred 	%p97, %p96, %r178;
	setp.ge.u32	%p98, %r27, %r32;
	and.pred  	%p99, %p97, %p98;
	selp.b32	%r200, %r193, %r29, %p99;

BB3_86:
	setp.lt.u32	%p100, %r193, %r200;
	@%p100 bra 	BB3_62;

BB3_87:
	cvt.rn.f32.u32	%f325, %r200;
	div.u32 	%r180, %r201, %r200;
	cvt.rn.f32.u32	%f346, %r180;
	mov.f32 	%f348, 0f00000000;
	mov.u16 	%rs10, 0;
	bra.uni 	BB3_88;

BB3_21:
	shr.u32 	%r97, %r49, 5;
	and.b32  	%r98, %r97, 1;
	setp.eq.b32	%p29, %r98, 1;
	not.pred 	%p30, %p29;
	setp.eq.s16	%p31, %rs9, 0;
	mov.f32 	%f348, 0f00000000;
	mov.u16 	%rs10, 1;
	or.pred  	%p32, %p31, %p30;
	@%p32 bra 	BB3_88;

	setp.lt.f32	%p33, %f321, 0f3F800000;
	mov.f32 	%f348, 0f00000000;
	mov.f32 	%f336, %f348;
	@%p33 bra 	BB3_55;

	abs.f32 	%f206, %f321;
	mov.b32 	 %r99, %f321;
	and.b32  	%r100, %r99, -2147483648;
	or.b32  	%r101, %r100, 1056964608;
	mov.b32 	 %f207, %r101;
	add.f32 	%f208, %f321, %f207;
	cvt.rzi.f32.f32	%f209, %f208;
	setp.gt.f32	%p34, %f206, 0f4B000000;
	selp.f32	%f326, %f321, %f209, %p34;
	setp.geu.f32	%p35, %f206, 0f3F000000;
	@%p35 bra 	BB3_25;

	cvt.rzi.f32.f32	%f326, %f321;

BB3_25:
	cvt.rzi.u32.f32	%r102, %f326;
	mov.u32 	%r103, 64;
	min.u32 	%r7, %r103, %r102;
	cvt.rn.f32.u32	%f210, %r47;
	sub.f32 	%f211, %f97, %f95;
	div.rn.f32 	%f28, %f211, %f210;
	cvt.rn.f32.u32	%f212, %r48;
	sub.f32 	%f213, %f98, %f96;
	div.rn.f32 	%f29, %f213, %f212;
	setp.lt.u32	%p36, %r7, 65;
	@%p36 bra 	BB3_27;

	mov.u64 	%rd36, $str10;
	cvta.global.u64 	%rd37, %rd36;
	mov.u64 	%rd38, $str2;
	cvta.global.u64 	%rd39, %rd38;
	mov.u32 	%r104, 113;
	mov.u64 	%rd40, 0;
	mov.u64 	%rd41, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd39;
	.param .b32 param2;
	st.param.b32	[param2+0], %r104;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd40;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd41;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB3_27:
	setp.eq.s32	%p37, %r7, 0;
	mov.u32 	%r191, 0;
	mov.u32 	%r190, %r191;
	@%p37 bra 	BB3_54;

	cvt.rn.f32.u32	%f30, %r4;
	cvt.rn.f32.u32	%f31, %r5;
	ld.const.u32 	%r109, [amplifier];
	cvt.rn.f32.s32	%f32, %r109;
	add.f32 	%f33, %f321, 0fC0000000;
	mov.u32 	%r183, 0;
	sqrt.rn.f32 	%f34, %f33;
	mov.u32 	%r191, %r183;
	mov.u32 	%r190, %r7;

BB3_29:
	mov.u32 	%r10, %r190;
	mov.u32 	%r8, %r183;
	setp.lt.u32	%p38, %r8, 3;
	@%p38 bra 	BB3_36;
	bra.uni 	BB3_30;

BB3_36:
	cvt.rn.f32.u32	%f220, %r8;
	div.rn.f32 	%f328, %f220, 0f40400000;
	mov.f32 	%f329, %f328;
	bra.uni 	BB3_37;

BB3_30:
	abs.f32 	%f214, %f34;
	mov.b32 	 %r110, %f34;
	and.b32  	%r111, %r110, -2147483648;
	or.b32  	%r112, %r111, 1056964608;
	mov.b32 	 %f215, %r112;
	add.f32 	%f216, %f34, %f215;
	cvt.rzi.f32.f32	%f217, %f216;
	setp.gt.f32	%p39, %f214, 0f4B000000;
	selp.f32	%f327, %f34, %f217, %p39;
	setp.geu.f32	%p40, %f214, 0f3F000000;
	@%p40 bra 	BB3_32;

	cvt.rzi.f32.f32	%f327, %f34;

BB3_32:
	add.s32 	%r113, %r8, -2;
	cvt.rzi.u32.f32	%r114, %f327;
	rem.u32 	%r115, %r113, %r114;
	cvt.rn.f32.u32	%f218, %r115;
	div.rn.f32 	%f328, %f218, %f34;
	div.u32 	%r116, %r113, %r114;
	cvt.rn.f32.u32	%f219, %r116;
	div.rn.f32 	%f329, %f219, %f34;
	setp.le.f32	%p41, %f329, 0f3F800000;
	@%p41 bra 	BB3_34;

	mov.u64 	%rd42, $str11;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, $str2;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r117, 132;
	mov.u64 	%rd46, 0;
	mov.u64 	%rd47, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd43;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd45;
	.param .b32 param2;
	st.param.b32	[param2+0], %r117;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd46;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd47;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB3_34:
	setp.le.f32	%p42, %f328, 0f3F800000;
	@%p42 bra 	BB3_37;

	mov.u64 	%rd48, $str12;
	cvta.global.u64 	%rd49, %rd48;
	mov.u64 	%rd50, $str2;
	cvta.global.u64 	%rd51, %rd50;
	mov.u32 	%r118, 133;
	mov.u64 	%rd52, 0;
	mov.u64 	%rd53, 2;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd49;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd51;
	.param .b32 param2;
	st.param.b32	[param2+0], %r118;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd52;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd53;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 17

BB3_37:
	add.f32 	%f221, %f31, %f329;
	neg.f32 	%f222, %f221;
	add.f32 	%f223, %f30, %f328;
	fma.rn.f32 	%f224, %f28, %f223, %f95;
	fma.rn.f32 	%f225, %f29, %f222, %f98;
	abs.f32 	%f226, %f224;
	abs.f32 	%f227, %f225;
	add.f32 	%f228, %f226, %f227;
	mul.f32 	%f229, %f228, %f32;
	cvt.rzi.s32.f32	%r119, %f229;
	cvt.rn.f32.s32	%f230, %r119;
	cvt.rzi.u32.f32	%r11, %f230;
	add.s32 	%r191, %r11, %r191;
	setp.gt.u32	%p43, %r8, 9;
	@%p43 bra 	BB3_39;

	cvt.rn.f32.u32	%f231, %r11;
	mul.wide.u32 	%rd56, %r8, 4;
	add.s64 	%rd57, %rd1, %rd56;
	st.local.f32 	[%rd57], %f231;

BB3_39:
	setp.lt.u32	%p44, %r8, 10;
	and.b32  	%r120, %r49, 1;
	setp.eq.b32	%p45, %r120, 1;
	setp.ne.s32	%p46, %r8, 0;
	and.pred  	%p47, %p44, %p46;
	and.pred  	%p48, %p47, %p45;
	shr.u32 	%r121, %r10, 1;
	setp.eq.s32	%p49, %r8, %r121;
	or.pred  	%p50, %p48, %p49;
	add.s32 	%r183, %r8, 1;
	mov.u32 	%r190, %r10;
	@!%p50 bra 	BB3_53;
	bra.uni 	BB3_40;

BB3_40:
	div.u32 	%r122, %r191, %r183;
	cvt.rn.f32.u32	%f43, %r122;
	setp.eq.s32	%p51, %r8, 0;
	mov.f32 	%f334, 0f00000000;
	@%p51 bra 	BB3_49;

	and.b32  	%r124, %r8, 3;
	setp.eq.s32	%p52, %r124, 0;
	mov.f32 	%f334, 0f00000000;
	mov.u32 	%r189, 0;
	@%p52 bra 	BB3_47;

	setp.eq.s32	%p53, %r124, 1;
	mov.f32 	%f331, 0f00000000;
	mov.u32 	%r187, 0;
	@%p53 bra 	BB3_46;

	setp.eq.s32	%p54, %r124, 2;
	mov.f32 	%f330, 0f00000000;
	mov.u32 	%r186, 0;
	@%p54 bra 	BB3_45;

	ld.local.f32 	%f236, [%rd1];
	sub.f32 	%f237, %f236, %f43;
	fma.rn.f32 	%f330, %f237, %f237, 0f00000000;
	mov.u32 	%r186, 1;

BB3_45:
	mul.wide.u32 	%rd62, %r186, 4;
	add.s64 	%rd63, %rd1, %rd62;
	ld.local.f32 	%f238, [%rd63];
	sub.f32 	%f239, %f238, %f43;
	fma.rn.f32 	%f331, %f239, %f239, %f330;
	add.s32 	%r187, %r186, 1;

BB3_46:
	mul.wide.u32 	%rd66, %r187, 4;
	add.s64 	%rd67, %rd1, %rd66;
	ld.local.f32 	%f240, [%rd67];
	sub.f32 	%f241, %f240, %f43;
	fma.rn.f32 	%f334, %f241, %f241, %f331;
	add.s32 	%r189, %r187, 1;

BB3_47:
	setp.lt.u32	%p55, %r8, 4;
	@%p55 bra 	BB3_49;

BB3_48:
	mul.wide.u32 	%rd69, %r189, 4;
	add.s64 	%rd70, %rd1, %rd69;
	ld.local.f32 	%f242, [%rd70];
	sub.f32 	%f243, %f242, %f43;
	fma.rn.f32 	%f244, %f243, %f243, %f334;
	add.s32 	%r130, %r189, 1;
	mul.wide.u32 	%rd71, %r130, 4;
	add.s64 	%rd72, %rd1, %rd71;
	ld.local.f32 	%f245, [%rd72];
	sub.f32 	%f246, %f245, %f43;
	fma.rn.f32 	%f247, %f246, %f246, %f244;
	add.s32 	%r131, %r189, 2;
	mul.wide.u32 	%rd73, %r131, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.local.f32 	%f248, [%rd74];
	sub.f32 	%f249, %f248, %f43;
	fma.rn.f32 	%f250, %f249, %f249, %f247;
	add.s32 	%r132, %r189, 3;
	mul.wide.u32 	%rd75, %r132, 4;
	add.s64 	%rd76, %rd1, %rd75;
	ld.local.f32 	%f251, [%rd76];
	sub.f32 	%f252, %f251, %f43;
	fma.rn.f32 	%f334, %f252, %f252, %f250;
	add.s32 	%r189, %r189, 4;
	setp.lt.u32	%p56, %r189, %r8;
	@%p56 bra 	BB3_48;

BB3_49:
	add.s32 	%r133, %r8, -1;
	cvt.rn.f32.u32	%f253, %r133;
	div.rn.f32 	%f254, %f334, %f253;
	div.rn.f32 	%f53, %f254, %f43;
	setp.ne.s32	%p57, %r8, 1;
	@%p57 bra 	BB3_51;

	// inline asm
	activemask.b32 %r134;
	// inline asm
	ld.local.v2.f32 	{%f255, %f256}, [%rd1];
	sub.f32 	%f259, %f255, %f256;
	abs.f32 	%f260, %f259;
	setp.lt.f32	%p58, %f260, 0f34000000;
	vote.sync.all.pred 	%p59, %p58, %r134;
	mov.u32 	%r190, 2;
	@%p59 bra 	BB3_53;

BB3_51:
	// inline asm
	activemask.b32 %r137;
	// inline asm
	setp.lt.f32	%p60, %f53, 0f3C23D70A;
	vote.sync.all.pred 	%p61, %p60, %r137;
	mov.u32 	%r190, %r183;
	@%p61 bra 	BB3_53;

	// inline asm
	activemask.b32 %r139;
	// inline asm
	setp.le.f32	%p62, %f53, 0f3F800000;
	vote.sync.all.pred 	%p63, %p62, %r139;
	setp.ge.u32	%p64, %r8, %r121;
	and.pred  	%p65, %p63, %p64;
	selp.b32	%r190, %r183, %r10, %p65;

BB3_53:
	setp.lt.u32	%p66, %r183, %r190;
	@%p66 bra 	BB3_29;

BB3_54:
	cvt.rn.f32.u32	%f348, %r190;
	div.u32 	%r142, %r191, %r190;
	cvt.rn.f32.u32	%f336, %r142;

BB3_55:
	mul.f32 	%f261, %f325, 0f3F400000;
	add.f32 	%f325, %f261, %f348;
	mul.f32 	%f262, %f348, %f336;
	fma.rn.f32 	%f263, %f346, %f261, %f262;
	div.rn.f32 	%f346, %f263, %f325;

BB3_88:
	mul.lo.s32 	%r181, %r5, %r46;
	cvt.u64.u32	%rd118, %r181;
	cvta.to.global.u64 	%rd119, %rd4;
	add.s64 	%rd120, %rd119, %rd118;
	mul.wide.u32 	%rd121, %r4, 16;
	add.s64 	%rd122, %rd120, %rd121;
	st.global.f32 	[%rd122], %f346;
	st.global.f32 	[%rd122+4], %f325;
	st.global.f32 	[%rd122+12], %f348;
	st.global.u8 	[%rd122+8], %rs10;
	setp.gt.f32	%p101, %f325, 0f00000000;
	@%p101 bra 	BB3_90;

	mov.u64 	%rd123, $str9;
	cvta.global.u64 	%rd124, %rd123;
	mov.u64 	%rd125, $str2;
	cvta.global.u64 	%rd126, %rd125;
	mov.u32 	%r182, 399;
	mov.u64 	%rd127, 0;
	mov.u64 	%rd128, 2;
	// Callseq Start 21
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd124;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd126;
	.param .b32 param2;
	st.param.b32	[param2+0], %r182;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd127;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd128;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 21

BB3_90:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .f32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<103>;
	.reg .b16 	%rs<11>;
	.reg .f32 	%f<277>;
	.reg .b32 	%r<203>;
	.reg .f64 	%fd<88>;
	.reg .b64 	%rd<129>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd4, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r46, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r48, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r47, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd28, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd27, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd26, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd25, [fractalRenderAdvancedDouble_param_3];
	ld.param.f32 	%f253, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r49, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd32, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd31, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd30, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd29, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd5, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r50, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r52, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r51, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p3, %r1, 32;
	@%p3 bra 	BB4_2;

	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r53, 59;
	mov.u64 	%rd10, 0;
	mov.u64 	%rd11, 2;
	// Callseq Start 22
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r53;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd10;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd11;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 22

BB4_2:
	mov.u32 	%r54, %tid.x;
	mov.u32 	%r55, %tid.y;
	mad.lo.s32 	%r56, %r1, %r55, %r54;
	shl.b32 	%r57, %r1, 2;
	and.b32  	%r58, %r56, 15;
	rem.u32 	%r59, %r56, %r57;
	sub.s32 	%r60, %r59, %r58;
	shr.u32 	%r61, %r60, 2;
	and.b32  	%r62, %r56, 3;
	add.s32 	%r63, %r61, %r62;
	div.u32 	%r64, %r56, %r57;
	shl.b32 	%r65, %r64, 2;
	bfe.u32 	%r66, %r56, 2, 2;
	add.s32 	%r67, %r65, %r66;
	mov.u32 	%r68, %ctaid.x;
	mad.lo.s32 	%r4, %r68, %r1, %r63;
	mov.u32 	%r69, %ctaid.y;
	mov.u32 	%r70, %ntid.y;
	mad.lo.s32 	%r5, %r69, %r70, %r67;
	setp.lt.u32	%p4, %r4, %r47;
	setp.gt.u32	%p5, %r48, %r5;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB4_92;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r71, %r49, 52;
	mov.u16 	%rs9, 0;
	setp.ne.s32	%p7, %r71, 52;
	@%p7 bra 	BB4_12;

	setp.gt.f32	%p8, %f253, 0f00000000;
	@%p8 bra 	BB4_6;

	mov.u64 	%rd12, $str3;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, $str2;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r72, 263;
	mov.u64 	%rd16, 0;
	mov.u64 	%rd17, 2;
	// Callseq Start 23
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd15;
	.param .b32 param2;
	st.param.b32	[param2+0], %r72;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 23

BB4_6:
	and.b32  	%r73, %r4, -8;
	cvt.rn.f32.u32	%f76, %r73;
	and.b32  	%r74, %r5, -4;
	cvt.rn.f32.u32	%f77, %r74;
	cvt.rn.f32.u32	%f78, %r51;
	sub.f32 	%f79, %f78, %f76;
	cvt.rn.f32.u32	%f80, %r52;
	sub.f32 	%f81, %f80, %f77;
	mul.f32 	%f82, %f81, %f81;
	fma.rn.f32 	%f83, %f79, %f79, %f82;
	sqrt.rn.f32 	%f84, %f83;
	ld.global.f32 	%f85, [pixelRealWidthInCm];
	mul.f32 	%f86, %f84, %f85;
	ld.global.f32 	%f87, [screenDistance];
	div.rn.f32 	%f1, %f86, %f87;
	abs.f32 	%f2, %f1;
	setp.leu.f32	%p9, %f2, 0f3F800000;
	mov.f32 	%f252, %f2;
	@%p9 bra 	BB4_8;

	rcp.rn.f32 	%f252, %f2;

BB4_8:
	mul.rn.f32 	%f88, %f252, %f252;
	mov.f32 	%f89, 0fC0B59883;
	mov.f32 	%f90, 0fBF52C7EA;
	fma.rn.f32 	%f91, %f88, %f90, %f89;
	mov.f32 	%f92, 0fC0D21907;
	fma.rn.f32 	%f93, %f91, %f88, %f92;
	mul.f32 	%f94, %f88, %f93;
	mul.f32 	%f95, %f252, %f94;
	add.f32 	%f96, %f88, 0f41355DC0;
	mov.f32 	%f97, 0f41E6BD60;
	fma.rn.f32 	%f98, %f96, %f88, %f97;
	mov.f32 	%f99, 0f419D92C8;
	fma.rn.f32 	%f100, %f98, %f88, %f99;
	rcp.rn.f32 	%f101, %f100;
	fma.rn.f32 	%f102, %f95, %f101, %f252;
	mov.f32 	%f103, 0f3FC90FDB;
	sub.f32 	%f104, %f103, %f102;
	setp.gt.f32	%p10, %f2, 0f3F800000;
	selp.f32	%f105, %f104, %f102, %p10;
	mov.b32 	 %r75, %f105;
	mov.b32 	 %r76, %f1;
	and.b32  	%r77, %r76, -2147483648;
	or.b32  	%r78, %r75, %r77;
	mov.b32 	 %f106, %r78;
	setp.gtu.f32	%p11, %f2, 0f7F800000;
	selp.f32	%f107, %f105, %f106, %p11;
	mul.f32 	%f108, %f107, 0f43340000;
	div.rn.f32 	%f5, %f108, 0f40490FDB;
	setp.ge.f32	%p12, %f5, 0f00000000;
	@%p12 bra 	BB4_10;

	mov.u64 	%rd18, $str4;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, $str2;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r79, 276;
	mov.u64 	%rd22, 0;
	mov.u64 	%rd23, 2;
	// Callseq Start 24
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd19;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd21;
	.param .b32 param2;
	st.param.b32	[param2+0], %r79;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd22;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd23;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 24

BB4_10:
	mul.f32 	%f109, %f253, 0f40B00000;
	setp.ltu.f32	%p13, %f253, 0f3F800000;
	selp.f32	%f110, %f109, 0f40B00000, %p13;
	mov.f32 	%f111, 0f42700000;
	sub.f32 	%f112, %f111, %f110;
	mov.f32 	%f113, 0fBF800000;
	div.rn.f32 	%f114, %f113, %f112;
	fma.rn.f32 	%f115, %f110, 0f80000000, 0f42700000;
	div.rn.f32 	%f116, %f115, %f112;
	fma.rn.f32 	%f117, %f5, %f114, %f116;
	cvt.f64.f32	%fd33, %f117;
	mov.f64 	%fd34, 0d3FF0000000000000;
	min.f64 	%fd35, %fd34, %fd33;
	cvt.rn.f32.f64	%f118, %fd35;
	mul.f32 	%f253, %f118, %f253;
	setp.gtu.f32	%p14, %f5, %f110;
	@%p14 bra 	BB4_12;

	cvt.f64.f32	%fd36, %f253;
	max.f64 	%fd38, %fd34, %fd36;
	cvt.rn.f32.f64	%f253, %fd38;
	mov.u16 	%rs9, 1;

BB4_12:
	and.b32  	%r80, %r49, 8;
	setp.eq.s32	%p16, %r80, 0;
	mov.pred 	%p102, -1;
	mov.f32 	%f274, 0f00000000;
	@%p16 bra 	BB4_13;

	sub.s32 	%r81, %r48, %r5;
	cvt.rn.f64.u32	%fd39, %r81;
	cvt.rn.f64.u32	%fd40, %r47;
	cvt.rn.f64.u32	%fd41, %r4;
	div.rn.f64 	%fd42, %fd41, %fd40;
	cvt.rn.f64.u32	%fd43, %r48;
	div.rn.f64 	%fd44, %fd39, %fd43;
	sub.f64 	%fd45, %fd27, %fd25;
	sub.f64 	%fd46, %fd28, %fd26;
	fma.rn.f64 	%fd47, %fd45, %fd42, %fd25;
	fma.rn.f64 	%fd48, %fd46, %fd44, %fd26;
	sub.f64 	%fd49, %fd47, %fd29;
	sub.f64 	%fd50, %fd48, %fd30;
	sub.f64 	%fd51, %fd31, %fd29;
	div.rn.f64 	%fd52, %fd49, %fd51;
	sub.f64 	%fd53, %fd32, %fd30;
	div.rn.f64 	%fd54, %fd50, %fd53;
	cvt.rn.f32.f64	%f121, %fd52;
	cvt.rn.f32.f64	%f122, %fd54;
	cvt.rn.f32.u32	%f123, %r47;
	mul.f32 	%f9, %f123, %f121;
	cvt.rn.f32.u32	%f124, %r48;
	mul.f32 	%f125, %f124, %f122;
	sub.f32 	%f10, %f124, %f125;
	abs.f32 	%f126, %f9;
	mov.b32 	 %r82, %f9;
	and.b32  	%r83, %r82, -2147483648;
	or.b32  	%r84, %r83, 1056964608;
	mov.b32 	 %f127, %r84;
	add.f32 	%f128, %f9, %f127;
	cvt.rzi.f32.f32	%f129, %f128;
	setp.gt.f32	%p17, %f126, 0f4B000000;
	selp.f32	%f254, %f9, %f129, %p17;
	setp.geu.f32	%p18, %f126, 0f3F000000;
	@%p18 bra 	BB4_16;

	cvt.rzi.f32.f32	%f254, %f9;

BB4_16:
	cvt.rzi.s32.f32	%r6, %f254;
	mov.b32 	 %r85, %f10;
	and.b32  	%r86, %r85, -2147483648;
	or.b32  	%r87, %r86, 1056964608;
	mov.b32 	 %f130, %r87;
	add.f32 	%f131, %f10, %f130;
	cvt.rzi.f32.f32	%f132, %f131;
	abs.f32 	%f133, %f10;
	setp.gt.f32	%p19, %f133, 0f4B000000;
	selp.f32	%f255, %f10, %f132, %p19;
	setp.geu.f32	%p20, %f133, 0f3F000000;
	@%p20 bra 	BB4_18;

	cvt.rzi.f32.f32	%f255, %f10;

BB4_18:
	add.s32 	%r88, %r47, -2;
	setp.lt.u32	%p22, %r6, %r88;
	setp.gt.s32	%p23, %r6, 1;
	and.pred  	%p24, %p23, %p22;
	cvt.rzi.s32.f32	%r89, %f255;
	setp.gt.s32	%p25, %r89, 1;
	and.pred  	%p26, %p24, %p25;
	add.s32 	%r90, %r48, -2;
	setp.lt.u32	%p27, %r89, %r90;
	and.pred  	%p28, %p27, %p26;
	mov.f32 	%f257, %f274;
	@!%p28 bra 	BB4_20;
	bra.uni 	BB4_19;

BB4_19:
	cvt.rmi.f32.f32	%f136, %f9;
	cvt.rzi.u32.f32	%r91, %f136;
	cvt.rmi.f32.f32	%f137, %f10;
	cvt.rzi.u32.f32	%r92, %f137;
	cvt.rn.f32.u32	%f138, %r91;
	sub.f32 	%f139, %f9, %f138;
	cvt.rn.f32.u32	%f140, %r92;
	sub.f32 	%f141, %f10, %f140;
	mul.lo.s32 	%r93, %r92, %r50;
	cvt.u64.u32	%rd24, %r93;
	cvta.to.global.u64 	%rd25, %rd5;
	add.s64 	%rd26, %rd25, %rd24;
	mul.wide.u32 	%rd27, %r91, 16;
	add.s64 	%rd28, %rd26, %rd27;
	add.s32 	%r94, %r91, 1;
	mul.wide.u32 	%rd29, %r94, 16;
	add.s64 	%rd30, %rd26, %rd29;
	add.s32 	%r95, %r92, 1;
	mul.lo.s32 	%r96, %r95, %r50;
	cvt.u64.u32	%rd31, %r96;
	add.s64 	%rd32, %rd25, %rd31;
	add.s64 	%rd33, %rd32, %rd27;
	add.s64 	%rd34, %rd32, %rd29;
	mov.f32 	%f142, 0f3F800000;
	sub.f32 	%f143, %f142, %f139;
	sub.f32 	%f144, %f142, %f141;
	mul.f32 	%f145, %f143, %f144;
	ld.global.f32 	%f146, [%rd28];
	mul.f32 	%f147, %f139, %f144;
	ld.global.f32 	%f148, [%rd30];
	mul.f32 	%f149, %f148, %f147;
	fma.rn.f32 	%f150, %f146, %f145, %f149;
	mul.f32 	%f151, %f143, %f141;
	ld.global.f32 	%f152, [%rd33];
	fma.rn.f32 	%f153, %f151, %f152, %f150;
	mul.f32 	%f154, %f139, %f141;
	ld.global.f32 	%f155, [%rd34];
	fma.rn.f32 	%f274, %f154, %f155, %f153;
	ld.global.f32 	%f156, [%rd28+4];
	ld.global.f32 	%f157, [%rd30+4];
	mul.f32 	%f158, %f147, %f157;
	fma.rn.f32 	%f159, %f156, %f145, %f158;
	ld.global.f32 	%f160, [%rd33+4];
	fma.rn.f32 	%f161, %f151, %f160, %f159;
	ld.global.f32 	%f162, [%rd34+4];
	fma.rn.f32 	%f257, %f154, %f162, %f161;
	cvt.f64.f32	%fd55, %f257;
	setp.lt.f64	%p102, %fd55, 0d3FB999999999999A;
	bra.uni 	BB4_20;

BB4_13:
	mov.f32 	%f257, %f274;

BB4_20:
	add.u64 	%rd35, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd35;
	@%p102 bra 	BB4_57;
	bra.uni 	BB4_21;

BB4_57:
	setp.lt.f32	%p67, %f253, 0f3F800000;
	selp.f32	%f48, 0f3F800000, %f253, %p67;
	abs.f32 	%f210, %f48;
	mov.b32 	 %r143, %f48;
	and.b32  	%r144, %r143, -2147483648;
	or.b32  	%r145, %r144, 1056964608;
	mov.b32 	 %f211, %r145;
	add.f32 	%f212, %f48, %f211;
	cvt.rzi.f32.f32	%f213, %f212;
	setp.gt.f32	%p68, %f210, 0f4B000000;
	selp.f32	%f267, %f48, %f213, %p68;
	setp.geu.f32	%p69, %f210, 0f3F000000;
	@%p69 bra 	BB4_59;

	cvt.rzi.f32.f32	%f267, %f48;

BB4_59:
	cvt.rzi.u32.f32	%r146, %f267;
	mov.u32 	%r147, 64;
	min.u32 	%r25, %r147, %r146;
	cvt.rn.f64.u32	%fd70, %r47;
	sub.f64 	%fd71, %fd27, %fd25;
	div.rn.f64 	%fd15, %fd71, %fd70;
	cvt.rn.f64.u32	%fd72, %r48;
	sub.f64 	%fd73, %fd28, %fd26;
	div.rn.f64 	%fd16, %fd73, %fd72;
	setp.lt.u32	%p70, %r25, 65;
	@%p70 bra 	BB4_61;

	mov.u64 	%rd79, $str10;
	cvta.global.u64 	%rd80, %rd79;
	mov.u64 	%rd81, $str2;
	cvta.global.u64 	%rd82, %rd81;
	mov.u32 	%r148, 113;
	mov.u64 	%rd83, 0;
	mov.u64 	%rd84, 2;
	// Callseq Start 28
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd80;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd82;
	.param .b32 param2;
	st.param.b32	[param2+0], %r148;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd83;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd84;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 28

BB4_61:
	setp.eq.s32	%p71, %r25, 0;
	mov.u32 	%r201, 0;
	mov.u32 	%r200, %r201;
	@%p71 bra 	BB4_89;

	cvt.rn.f64.u32	%fd17, %r4;
	cvt.rn.f64.u32	%fd18, %r5;
	ld.const.u32 	%r153, [amplifier];
	cvt.rn.f64.s32	%fd19, %r153;
	add.f32 	%f52, %f48, 0fC0000000;
	and.b32  	%r26, %r49, 1;
	mov.u32 	%r193, 0;
	sqrt.rn.f32 	%f53, %f52;
	mov.u32 	%r201, %r193;
	mov.u32 	%r200, %r25;

BB4_63:
	mov.u32 	%r29, %r200;
	mov.u32 	%r27, %r193;
	setp.lt.u32	%p72, %r27, 3;
	@%p72 bra 	BB4_71;
	bra.uni 	BB4_64;

BB4_71:
	cvt.rn.f64.u32	%fd74, %r27;
	div.rn.f64 	%fd86, %fd74, 0d4008000000000000;
	mov.f64 	%fd87, %fd86;
	bra.uni 	BB4_72;

BB4_64:
	abs.f32 	%f214, %f53;
	mov.b32 	 %r154, %f53;
	and.b32  	%r155, %r154, -2147483648;
	or.b32  	%r156, %r155, 1056964608;
	mov.b32 	 %f215, %r156;
	add.f32 	%f216, %f53, %f215;
	cvt.rzi.f32.f32	%f217, %f216;
	setp.gt.f32	%p73, %f214, 0f4B000000;
	selp.f32	%f268, %f53, %f217, %p73;
	setp.geu.f32	%p74, %f214, 0f3F000000;
	@%p74 bra 	BB4_66;

	cvt.rzi.f32.f32	%f268, %f53;

BB4_66:
	add.s32 	%r157, %r27, -2;
	cvt.rzi.u32.f32	%r158, %f268;
	rem.u32 	%r159, %r157, %r158;
	cvt.rn.f32.u32	%f218, %r159;
	div.rn.f32 	%f57, %f218, %f53;
	div.u32 	%r160, %r157, %r158;
	cvt.rn.f32.u32	%f219, %r160;
	div.rn.f32 	%f58, %f219, %f53;
	setp.le.f32	%p75, %f58, 0f3F800000;
	@%p75 bra 	BB4_68;

	mov.u64 	%rd85, $str11;
	cvta.global.u64 	%rd86, %rd85;
	mov.u64 	%rd87, $str2;
	cvta.global.u64 	%rd88, %rd87;
	mov.u32 	%r161, 132;
	mov.u64 	%rd89, 0;
	mov.u64 	%rd90, 2;
	// Callseq Start 29
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd86;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd88;
	.param .b32 param2;
	st.param.b32	[param2+0], %r161;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd89;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd90;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 29

BB4_68:
	setp.le.f32	%p76, %f57, 0f3F800000;
	@%p76 bra 	BB4_70;

	mov.u64 	%rd91, $str12;
	cvta.global.u64 	%rd92, %rd91;
	mov.u64 	%rd93, $str2;
	cvta.global.u64 	%rd94, %rd93;
	mov.u32 	%r162, 133;
	mov.u64 	%rd95, 0;
	mov.u64 	%rd96, 2;
	// Callseq Start 30
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd92;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd94;
	.param .b32 param2;
	st.param.b32	[param2+0], %r162;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd95;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd96;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 30

BB4_70:
	cvt.f64.f32	%fd86, %f57;
	cvt.f64.f32	%fd87, %f58;

BB4_72:
	add.f64 	%fd75, %fd18, %fd87;
	neg.f64 	%fd76, %fd75;
	add.f64 	%fd77, %fd17, %fd86;
	fma.rn.f64 	%fd78, %fd15, %fd77, %fd25;
	fma.rn.f64 	%fd79, %fd16, %fd76, %fd28;
	abs.f64 	%fd80, %fd78;
	abs.f64 	%fd81, %fd79;
	add.f64 	%fd82, %fd80, %fd81;
	mul.f64 	%fd83, %fd82, %fd19;
	cvt.rzi.s32.f64	%r163, %fd83;
	cvt.rn.f32.s32	%f220, %r163;
	cvt.rzi.u32.f32	%r30, %f220;
	add.s32 	%r201, %r30, %r201;
	setp.gt.u32	%p77, %r27, 9;
	@%p77 bra 	BB4_74;

	cvt.rn.f32.u32	%f221, %r30;
	mul.wide.u32 	%rd99, %r27, 4;
	add.s64 	%rd100, %rd1, %rd99;
	st.local.f32 	[%rd100], %f221;

BB4_74:
	setp.lt.u32	%p78, %r27, 10;
	setp.ne.s32	%p79, %r27, 0;
	and.pred  	%p80, %p78, %p79;
	setp.ne.s32	%p81, %r26, 0;
	and.pred  	%p82, %p80, %p81;
	shr.u32 	%r32, %r29, 1;
	setp.eq.s32	%p83, %r27, %r32;
	or.pred  	%p84, %p82, %p83;
	add.s32 	%r193, %r27, 1;
	mov.u32 	%r200, %r29;
	@!%p84 bra 	BB4_88;
	bra.uni 	BB4_75;

BB4_75:
	div.u32 	%r164, %r201, %r193;
	cvt.rn.f32.u32	%f59, %r164;
	setp.eq.s32	%p85, %r27, 0;
	mov.f32 	%f273, 0f00000000;
	@%p85 bra 	BB4_84;

	and.b32  	%r34, %r27, 3;
	setp.eq.s32	%p86, %r34, 0;
	mov.f32 	%f273, 0f00000000;
	mov.u32 	%r199, 0;
	@%p86 bra 	BB4_82;

	setp.eq.s32	%p87, %r34, 1;
	mov.f32 	%f270, 0f00000000;
	mov.u32 	%r197, 0;
	@%p87 bra 	BB4_81;

	setp.eq.s32	%p88, %r34, 2;
	mov.f32 	%f269, 0f00000000;
	mov.u32 	%r196, 0;
	@%p88 bra 	BB4_80;

	ld.local.f32 	%f226, [%rd1];
	sub.f32 	%f227, %f226, %f59;
	fma.rn.f32 	%f269, %f227, %f227, 0f00000000;
	mov.u32 	%r196, 1;

BB4_80:
	mul.wide.u32 	%rd103, %r196, 4;
	add.s64 	%rd104, %rd1, %rd103;
	ld.local.f32 	%f228, [%rd104];
	sub.f32 	%f229, %f228, %f59;
	fma.rn.f32 	%f270, %f229, %f229, %f269;
	add.s32 	%r197, %r196, 1;

BB4_81:
	mul.wide.u32 	%rd107, %r197, 4;
	add.s64 	%rd108, %rd1, %rd107;
	ld.local.f32 	%f230, [%rd108];
	sub.f32 	%f231, %f230, %f59;
	fma.rn.f32 	%f273, %f231, %f231, %f270;
	add.s32 	%r199, %r197, 1;

BB4_82:
	setp.lt.u32	%p89, %r27, 4;
	@%p89 bra 	BB4_84;

BB4_83:
	mul.wide.u32 	%rd110, %r199, 4;
	add.s64 	%rd111, %rd1, %rd110;
	ld.local.f32 	%f232, [%rd111];
	sub.f32 	%f233, %f232, %f59;
	fma.rn.f32 	%f234, %f233, %f233, %f273;
	add.s32 	%r169, %r199, 1;
	mul.wide.u32 	%rd112, %r169, 4;
	add.s64 	%rd113, %rd1, %rd112;
	ld.local.f32 	%f235, [%rd113];
	sub.f32 	%f236, %f235, %f59;
	fma.rn.f32 	%f237, %f236, %f236, %f234;
	add.s32 	%r170, %r199, 2;
	mul.wide.u32 	%rd114, %r170, 4;
	add.s64 	%rd115, %rd1, %rd114;
	ld.local.f32 	%f238, [%rd115];
	sub.f32 	%f239, %f238, %f59;
	fma.rn.f32 	%f240, %f239, %f239, %f237;
	add.s32 	%r171, %r199, 3;
	mul.wide.u32 	%rd116, %r171, 4;
	add.s64 	%rd117, %rd1, %rd116;
	ld.local.f32 	%f241, [%rd117];
	sub.f32 	%f242, %f241, %f59;
	fma.rn.f32 	%f273, %f242, %f242, %f240;
	add.s32 	%r199, %r199, 4;
	setp.lt.u32	%p90, %r199, %r27;
	@%p90 bra 	BB4_83;

BB4_84:
	add.s32 	%r172, %r27, -1;
	cvt.rn.f32.u32	%f243, %r172;
	div.rn.f32 	%f244, %f273, %f243;
	div.rn.f32 	%f69, %f244, %f59;
	setp.ne.s32	%p91, %r27, 1;
	@%p91 bra 	BB4_86;

	// inline asm
	activemask.b32 %r173;
	// inline asm
	ld.local.v2.f32 	{%f245, %f246}, [%rd1];
	sub.f32 	%f249, %f245, %f246;
	abs.f32 	%f250, %f249;
	setp.lt.f32	%p92, %f250, 0f34000000;
	vote.sync.all.pred 	%p93, %p92, %r173;
	mov.u32 	%r200, 2;
	@%p93 bra 	BB4_88;

BB4_86:
	// inline asm
	activemask.b32 %r176;
	// inline asm
	setp.lt.f32	%p94, %f69, 0f3C23D70A;
	vote.sync.all.pred 	%p95, %p94, %r176;
	mov.u32 	%r200, %r193;
	@%p95 bra 	BB4_88;

	// inline asm
	activemask.b32 %r178;
	// inline asm
	setp.le.f32	%p96, %f69, 0f3F800000;
	vote.sync.all.pred 	%p97, %p96, %r178;
	setp.ge.u32	%p98, %r27, %r32;
	and.pred  	%p99, %p97, %p98;
	selp.b32	%r200, %r193, %r29, %p99;

BB4_88:
	setp.lt.u32	%p100, %r193, %r200;
	@%p100 bra 	BB4_63;

BB4_89:
	cvt.rn.f32.u32	%f257, %r200;
	div.u32 	%r180, %r201, %r200;
	cvt.rn.f32.u32	%f274, %r180;
	mov.f32 	%f276, 0f00000000;
	mov.u16 	%rs10, 0;
	bra.uni 	BB4_90;

BB4_21:
	shr.u32 	%r97, %r49, 5;
	and.b32  	%r98, %r97, 1;
	setp.eq.b32	%p29, %r98, 1;
	not.pred 	%p30, %p29;
	setp.eq.s16	%p31, %rs9, 0;
	mov.f32 	%f276, 0f00000000;
	mov.u16 	%rs10, 1;
	or.pred  	%p32, %p31, %p30;
	@%p32 bra 	BB4_90;

	setp.lt.f32	%p33, %f253, 0f3F800000;
	mov.f32 	%f276, 0f00000000;
	mov.f32 	%f266, %f276;
	@%p33 bra 	BB4_56;

	abs.f32 	%f166, %f253;
	mov.b32 	 %r99, %f253;
	and.b32  	%r100, %r99, -2147483648;
	or.b32  	%r101, %r100, 1056964608;
	mov.b32 	 %f167, %r101;
	add.f32 	%f168, %f253, %f167;
	cvt.rzi.f32.f32	%f169, %f168;
	setp.gt.f32	%p34, %f166, 0f4B000000;
	selp.f32	%f258, %f253, %f169, %p34;
	setp.geu.f32	%p35, %f166, 0f3F000000;
	@%p35 bra 	BB4_25;

	cvt.rzi.f32.f32	%f258, %f253;

BB4_25:
	cvt.rzi.u32.f32	%r102, %f258;
	mov.u32 	%r103, 64;
	min.u32 	%r7, %r103, %r102;
	cvt.rn.f64.u32	%fd56, %r47;
	sub.f64 	%fd57, %fd27, %fd25;
	div.rn.f64 	%fd5, %fd57, %fd56;
	cvt.rn.f64.u32	%fd58, %r48;
	sub.f64 	%fd59, %fd28, %fd26;
	div.rn.f64 	%fd6, %fd59, %fd58;
	setp.lt.u32	%p36, %r7, 65;
	@%p36 bra 	BB4_27;

	mov.u64 	%rd36, $str10;
	cvta.global.u64 	%rd37, %rd36;
	mov.u64 	%rd38, $str2;
	cvta.global.u64 	%rd39, %rd38;
	mov.u32 	%r104, 113;
	mov.u64 	%rd40, 0;
	mov.u64 	%rd41, 2;
	// Callseq Start 25
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd39;
	.param .b32 param2;
	st.param.b32	[param2+0], %r104;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd40;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd41;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 25

BB4_27:
	setp.eq.s32	%p37, %r7, 0;
	mov.u32 	%r191, 0;
	mov.u32 	%r190, %r191;
	@%p37 bra 	BB4_55;

	cvt.rn.f64.u32	%fd7, %r4;
	cvt.rn.f64.u32	%fd8, %r5;
	ld.const.u32 	%r109, [amplifier];
	cvt.rn.f64.s32	%fd9, %r109;
	add.f32 	%f24, %f253, 0fC0000000;
	mov.u32 	%r183, 0;
	sqrt.rn.f32 	%f25, %f24;
	mov.u32 	%r191, %r183;
	mov.u32 	%r190, %r7;

BB4_29:
	mov.u32 	%r10, %r190;
	mov.u32 	%r8, %r183;
	setp.lt.u32	%p38, %r8, 3;
	@%p38 bra 	BB4_37;
	bra.uni 	BB4_30;

BB4_37:
	cvt.rn.f64.u32	%fd60, %r8;
	div.rn.f64 	%fd84, %fd60, 0d4008000000000000;
	mov.f64 	%fd85, %fd84;
	bra.uni 	BB4_38;

BB4_30:
	abs.f32 	%f170, %f25;
	mov.b32 	 %r110, %f25;
	and.b32  	%r111, %r110, -2147483648;
	or.b32  	%r112, %r111, 1056964608;
	mov.b32 	 %f171, %r112;
	add.f32 	%f172, %f25, %f171;
	cvt.rzi.f32.f32	%f173, %f172;
	setp.gt.f32	%p39, %f170, 0f4B000000;
	selp.f32	%f259, %f25, %f173, %p39;
	setp.geu.f32	%p40, %f170, 0f3F000000;
	@%p40 bra 	BB4_32;

	cvt.rzi.f32.f32	%f259, %f25;

BB4_32:
	add.s32 	%r113, %r8, -2;
	cvt.rzi.u32.f32	%r114, %f259;
	rem.u32 	%r115, %r113, %r114;
	cvt.rn.f32.u32	%f174, %r115;
	div.rn.f32 	%f29, %f174, %f25;
	div.u32 	%r116, %r113, %r114;
	cvt.rn.f32.u32	%f175, %r116;
	div.rn.f32 	%f30, %f175, %f25;
	setp.le.f32	%p41, %f30, 0f3F800000;
	@%p41 bra 	BB4_34;

	mov.u64 	%rd42, $str11;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, $str2;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r117, 132;
	mov.u64 	%rd46, 0;
	mov.u64 	%rd47, 2;
	// Callseq Start 26
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd43;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd45;
	.param .b32 param2;
	st.param.b32	[param2+0], %r117;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd46;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd47;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 26

BB4_34:
	setp.le.f32	%p42, %f29, 0f3F800000;
	@%p42 bra 	BB4_36;

	mov.u64 	%rd48, $str12;
	cvta.global.u64 	%rd49, %rd48;
	mov.u64 	%rd50, $str2;
	cvta.global.u64 	%rd51, %rd50;
	mov.u32 	%r118, 133;
	mov.u64 	%rd52, 0;
	mov.u64 	%rd53, 2;
	// Callseq Start 27
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd49;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd51;
	.param .b32 param2;
	st.param.b32	[param2+0], %r118;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd52;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd53;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 27

BB4_36:
	cvt.f64.f32	%fd84, %f29;
	cvt.f64.f32	%fd85, %f30;

BB4_38:
	add.f64 	%fd61, %fd8, %fd85;
	neg.f64 	%fd62, %fd61;
	add.f64 	%fd63, %fd7, %fd84;
	fma.rn.f64 	%fd64, %fd5, %fd63, %fd25;
	fma.rn.f64 	%fd65, %fd6, %fd62, %fd28;
	abs.f64 	%fd66, %fd64;
	abs.f64 	%fd67, %fd65;
	add.f64 	%fd68, %fd66, %fd67;
	mul.f64 	%fd69, %fd68, %fd9;
	cvt.rzi.s32.f64	%r119, %fd69;
	cvt.rn.f32.s32	%f176, %r119;
	cvt.rzi.u32.f32	%r11, %f176;
	add.s32 	%r191, %r11, %r191;
	setp.gt.u32	%p43, %r8, 9;
	@%p43 bra 	BB4_40;

	cvt.rn.f32.u32	%f177, %r11;
	mul.wide.u32 	%rd56, %r8, 4;
	add.s64 	%rd57, %rd1, %rd56;
	st.local.f32 	[%rd57], %f177;

BB4_40:
	setp.lt.u32	%p44, %r8, 10;
	and.b32  	%r120, %r49, 1;
	setp.eq.b32	%p45, %r120, 1;
	setp.ne.s32	%p46, %r8, 0;
	and.pred  	%p47, %p44, %p46;
	and.pred  	%p48, %p47, %p45;
	shr.u32 	%r121, %r10, 1;
	setp.eq.s32	%p49, %r8, %r121;
	or.pred  	%p50, %p48, %p49;
	add.s32 	%r183, %r8, 1;
	mov.u32 	%r190, %r10;
	@!%p50 bra 	BB4_54;
	bra.uni 	BB4_41;

BB4_41:
	div.u32 	%r122, %r191, %r183;
	cvt.rn.f32.u32	%f31, %r122;
	setp.eq.s32	%p51, %r8, 0;
	mov.f32 	%f264, 0f00000000;
	@%p51 bra 	BB4_50;

	and.b32  	%r124, %r8, 3;
	setp.eq.s32	%p52, %r124, 0;
	mov.f32 	%f264, 0f00000000;
	mov.u32 	%r189, 0;
	@%p52 bra 	BB4_48;

	setp.eq.s32	%p53, %r124, 1;
	mov.f32 	%f261, 0f00000000;
	mov.u32 	%r187, 0;
	@%p53 bra 	BB4_47;

	setp.eq.s32	%p54, %r124, 2;
	mov.f32 	%f260, 0f00000000;
	mov.u32 	%r186, 0;
	@%p54 bra 	BB4_46;

	ld.local.f32 	%f182, [%rd1];
	sub.f32 	%f183, %f182, %f31;
	fma.rn.f32 	%f260, %f183, %f183, 0f00000000;
	mov.u32 	%r186, 1;

BB4_46:
	mul.wide.u32 	%rd62, %r186, 4;
	add.s64 	%rd63, %rd1, %rd62;
	ld.local.f32 	%f184, [%rd63];
	sub.f32 	%f185, %f184, %f31;
	fma.rn.f32 	%f261, %f185, %f185, %f260;
	add.s32 	%r187, %r186, 1;

BB4_47:
	mul.wide.u32 	%rd66, %r187, 4;
	add.s64 	%rd67, %rd1, %rd66;
	ld.local.f32 	%f186, [%rd67];
	sub.f32 	%f187, %f186, %f31;
	fma.rn.f32 	%f264, %f187, %f187, %f261;
	add.s32 	%r189, %r187, 1;

BB4_48:
	setp.lt.u32	%p55, %r8, 4;
	@%p55 bra 	BB4_50;

BB4_49:
	mul.wide.u32 	%rd69, %r189, 4;
	add.s64 	%rd70, %rd1, %rd69;
	ld.local.f32 	%f188, [%rd70];
	sub.f32 	%f189, %f188, %f31;
	fma.rn.f32 	%f190, %f189, %f189, %f264;
	add.s32 	%r130, %r189, 1;
	mul.wide.u32 	%rd71, %r130, 4;
	add.s64 	%rd72, %rd1, %rd71;
	ld.local.f32 	%f191, [%rd72];
	sub.f32 	%f192, %f191, %f31;
	fma.rn.f32 	%f193, %f192, %f192, %f190;
	add.s32 	%r131, %r189, 2;
	mul.wide.u32 	%rd73, %r131, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.local.f32 	%f194, [%rd74];
	sub.f32 	%f195, %f194, %f31;
	fma.rn.f32 	%f196, %f195, %f195, %f193;
	add.s32 	%r132, %r189, 3;
	mul.wide.u32 	%rd75, %r132, 4;
	add.s64 	%rd76, %rd1, %rd75;
	ld.local.f32 	%f197, [%rd76];
	sub.f32 	%f198, %f197, %f31;
	fma.rn.f32 	%f264, %f198, %f198, %f196;
	add.s32 	%r189, %r189, 4;
	setp.lt.u32	%p56, %r189, %r8;
	@%p56 bra 	BB4_49;

BB4_50:
	add.s32 	%r133, %r8, -1;
	cvt.rn.f32.u32	%f199, %r133;
	div.rn.f32 	%f200, %f264, %f199;
	div.rn.f32 	%f41, %f200, %f31;
	setp.ne.s32	%p57, %r8, 1;
	@%p57 bra 	BB4_52;

	// inline asm
	activemask.b32 %r134;
	// inline asm
	ld.local.v2.f32 	{%f201, %f202}, [%rd1];
	sub.f32 	%f205, %f201, %f202;
	abs.f32 	%f206, %f205;
	setp.lt.f32	%p58, %f206, 0f34000000;
	vote.sync.all.pred 	%p59, %p58, %r134;
	mov.u32 	%r190, 2;
	@%p59 bra 	BB4_54;

BB4_52:
	// inline asm
	activemask.b32 %r137;
	// inline asm
	setp.lt.f32	%p60, %f41, 0f3C23D70A;
	vote.sync.all.pred 	%p61, %p60, %r137;
	mov.u32 	%r190, %r183;
	@%p61 bra 	BB4_54;

	// inline asm
	activemask.b32 %r139;
	// inline asm
	setp.le.f32	%p62, %f41, 0f3F800000;
	vote.sync.all.pred 	%p63, %p62, %r139;
	setp.ge.u32	%p64, %r8, %r121;
	and.pred  	%p65, %p63, %p64;
	selp.b32	%r190, %r183, %r10, %p65;

BB4_54:
	setp.lt.u32	%p66, %r183, %r190;
	@%p66 bra 	BB4_29;

BB4_55:
	cvt.rn.f32.u32	%f276, %r190;
	div.u32 	%r142, %r191, %r190;
	cvt.rn.f32.u32	%f266, %r142;

BB4_56:
	mul.f32 	%f207, %f257, 0f3F400000;
	add.f32 	%f257, %f207, %f276;
	mul.f32 	%f208, %f276, %f266;
	fma.rn.f32 	%f209, %f274, %f207, %f208;
	div.rn.f32 	%f274, %f209, %f257;

BB4_90:
	mul.lo.s32 	%r181, %r5, %r46;
	cvt.u64.u32	%rd118, %r181;
	cvta.to.global.u64 	%rd119, %rd4;
	add.s64 	%rd120, %rd119, %rd118;
	mul.wide.u32 	%rd121, %r4, 16;
	add.s64 	%rd122, %rd120, %rd121;
	st.global.f32 	[%rd122], %f274;
	st.global.f32 	[%rd122+4], %f257;
	st.global.f32 	[%rd122+12], %f276;
	st.global.u8 	[%rd122+8], %rs10;
	setp.gt.f32	%p101, %f257, 0f00000000;
	@%p101 bra 	BB4_92;

	mov.u64 	%rd123, $str9;
	cvta.global.u64 	%rd124, %rd123;
	mov.u64 	%rd125, $str2;
	cvta.global.u64 	%rd126, %rd125;
	mov.u32 	%r182, 399;
	mov.u64 	%rd127, 0;
	mov.u64 	%rd128, 2;
	// Callseq Start 31
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd124;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd126;
	.param .b32 param2;
	st.param.b32	[param2+0], %r182;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd127;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd128;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 31

BB4_92:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .f32 compose_param_9
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<20>;
	.reg .b32 	%r<45>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r11, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r13, [compose_param_5];
	ld.param.u32 	%r14, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r12, [compose_param_8];
	ld.param.f32 	%f6, [compose_param_9];
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r1, %r16, %r15, %r17;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %tid.y;
	mad.lo.s32 	%r2, %r18, %r19, %r20;
	setp.ge.u32	%p1, %r2, %r14;
	setp.ge.u32	%p2, %r1, %r13;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_11;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r21, %r2, %r11;
	cvt.u64.u32	%rd6, %r21;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.u32 	%rd8, %r1, 16;
	add.s64 	%rd9, %rd7, %rd8;
	add.s64 	%rd1, %rd9, 12;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	@%p4 bra 	BB5_5;

	ld.global.f32 	%f7, [%rd1+-8];
	cvt.rzi.u32.f32	%r22, %f7;
	cvt.f64.f32	%fd1, %f6;
	mov.f64 	%fd2, 0d3FF0000000000000;
	max.f64 	%fd3, %fd2, %fd1;
	cvt.rzi.u32.f64	%r3, %fd3;
	min.u32 	%r23, %r22, %r3;
	cvt.rn.f32.u32	%f8, %r23;
	cvt.rn.f32.u32	%f1, %r3;
	div.rn.f32 	%f9, %f8, %f1;
	mul.f32 	%f10, %f9, 0f437F0000;
	cvt.rzi.s32.f32	%r24, %f10;
	and.b32  	%r25, %r24, 255;
	prmt.b32 	%r26, %r25, %r25, 30212;
	prmt.b32 	%r43, %r25, %r26, 28756;
	ld.global.u8 	%rs2, [%rd1+-4];
	setp.eq.s16	%p5, %rs2, 0;
	@%p5 bra 	BB5_4;

	ld.global.f32 	%f11, [%rd1];
	cvt.rzi.u32.f32	%r27, %f11;
	min.u32 	%r28, %r27, %r3;
	cvt.rn.f32.u32	%f12, %r28;
	div.rn.f32 	%f13, %f12, %f1;
	mul.f32 	%f14, %f13, 0f437F0000;
	cvt.rzi.s32.f32	%r29, %f14;
	and.b32  	%r30, %r29, 255;
	prmt.b32 	%r31, %r30, %r30, 30212;
	prmt.b32 	%r43, %r30, %r31, 28756;

BB5_4:
	or.b32  	%r44, %r43, -16777216;
	bra.uni 	BB5_10;

BB5_5:
	ld.global.f32 	%f2, [%rd1+-12];
	abs.f32 	%f15, %f2;
	mov.b32 	 %r32, %f2;
	and.b32  	%r33, %r32, -2147483648;
	or.b32  	%r34, %r33, 1056964608;
	mov.b32 	 %f16, %r34;
	add.f32 	%f17, %f2, %f16;
	cvt.rzi.f32.f32	%f18, %f17;
	setp.gt.f32	%p6, %f15, 0f4B000000;
	selp.f32	%f19, %f2, %f18, %p6;
	setp.geu.f32	%p7, %f15, 0f3F000000;
	@%p7 bra 	BB5_7;

	cvt.rzi.f32.f32	%f19, %f2;

BB5_7:
	cvt.rzi.u32.f32	%r35, %f19;
	shl.b32 	%r36, %r35, 7;
	rem.u32 	%r37, %r36, %r12;
	sub.s32 	%r38, %r12, %r37;
	add.s32 	%r8, %r38, -1;
	setp.lt.u32	%p8, %r8, %r12;
	@%p8 bra 	BB5_9;

	mov.u64 	%rd10, $str13;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str14;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r39, 20;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 32
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r39;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 32

BB5_9:
	shl.b32 	%r40, %r8, 2;
	mov.u32 	%r41, 0;
	suld.b.2d.b32.trap {%r44}, [%rd4, {%r40, %r41}];

BB5_10:
	shl.b32 	%r42, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r42, %r2}], {%r44};

BB5_11:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r9, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r10, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r11, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f4, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f5, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f6, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f7, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r16, %r14, %r13, %r15;
	mul.lo.s32 	%r1, %r16, %r12;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %ntid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r20, %r17, %r18, %r19;
	mul.lo.s32 	%r2, %r20, %r12;
	sub.s32 	%r21, %r11, %r12;
	setp.ge.u32	%p1, %r2, %r21;
	sub.s32 	%r22, %r10, %r12;
	setp.ge.u32	%p2, %r1, %r22;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_10;

	sub.f32 	%f8, %f6, %f4;
	cvt.rn.f32.u32	%f9, %r10;
	div.rn.f32 	%f10, %f8, %f9;
	cvt.rn.f32.u32	%f11, %r1;
	fma.rn.f32 	%f1, %f11, %f10, %f4;
	setp.eq.s32	%p4, %r12, 0;
	@%p4 bra 	BB6_10;

	ld.const.u32 	%r27, [amplifier];
	cvt.rn.f32.s32	%f12, %r27;
	cvt.rn.f32.u32	%f13, %r2;
	sub.f32 	%f14, %f7, %f5;
	cvt.rn.f32.u32	%f15, %r11;
	div.rn.f32 	%f16, %f14, %f15;
	mul.f32 	%f17, %f13, %f16;
	sub.f32 	%f18, %f7, %f17;
	abs.f32 	%f19, %f18;
	abs.f32 	%f20, %f1;
	add.f32 	%f21, %f20, %f19;
	mul.f32 	%f22, %f21, %f12;
	cvt.rzi.s32.f32	%r28, %f22;
	cvt.rn.f32.s32	%f23, %r28;
	cvt.rzi.u32.f32	%r29, %f23;
	mul.lo.s32 	%r30, %r2, %r9;
	cvt.u64.u32	%rd3, %r30;
	cvta.to.global.u64 	%rd4, %rd2;
	add.s64 	%rd5, %rd4, %rd3;
	cvt.rn.f32.u32	%f24, %r12;
	rcp.rn.f32 	%f2, %f24;
	cvt.rn.f32.u32	%f3, %r29;
	mul.wide.u32 	%rd6, %r1, 16;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r26, %r12, 3;
	mov.u32 	%r36, 1;
	mov.u32 	%r39, 0;
	setp.eq.s32	%p5, %r26, 0;
	@%p5 bra 	BB6_8;

	setp.eq.s32	%p6, %r26, 1;
	mov.u32 	%r37, %r39;
	@%p6 bra 	BB6_7;

	setp.eq.s32	%p7, %r26, 2;
	@%p7 bra 	BB6_6;

	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r32, 0;
	st.global.u32 	[%rd1+12], %r32;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd1+8], %rs1;
	mov.u32 	%r36, 2;

BB6_6:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r33, 0;
	st.global.u32 	[%rd1+12], %r33;
	mov.u16 	%rs2, 0;
	st.global.u8 	[%rd1+8], %rs2;
	mov.u32 	%r37, %r36;

BB6_7:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	st.global.u32 	[%rd1+12], %r39;
	mov.u16 	%rs3, 0;
	st.global.u8 	[%rd1+8], %rs3;
	add.s32 	%r39, %r37, 1;

BB6_8:
	setp.lt.u32	%p8, %r12, 4;
	@%p8 bra 	BB6_10;

BB6_9:
	st.global.f32 	[%rd1], %f3;
	st.global.f32 	[%rd1+4], %f2;
	mov.u32 	%r35, 0;
	st.global.u32 	[%rd1+12], %r35;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd1+8], %rs4;
	add.s32 	%r39, %r39, 4;
	setp.lt.u32	%p9, %r39, %r12;
	@%p9 bra 	BB6_9;

BB6_10:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 33
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 33

BB7_2:
	ret;
}


