//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 4 .u32 amplifier;
.global .align 4 .f32 PI_F = 0f40490FDB;
.global .align 4 .u32 MAX_SS_LEVEL = 256;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 VISUALISE_SAMPLE_COUNT_FLAG_MASK = 2;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[17] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 116, 101, 115, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[66] = {114, 0, 101, 0, 117, 0, 115, 0, 105, 0, 110, 0, 103, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 32, 0, 124, 0, 124, 0, 32, 0, 115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[34] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 87, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[56] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 16 .b8 $str10[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str11[120] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 116, 0, 101, 0, 115, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<22>;
	.reg .f32 	%f<73>;
	.reg .b32 	%r<82>;
	.reg .b64 	%rd<49>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r21, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r23, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r22, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f24, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f23, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r81, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r26, 64;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r26;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r27, %tid.x;
	mov.u32 	%r28, %tid.y;
	mad.lo.s32 	%r29, %r1, %r28, %r27;
	shl.b32 	%r30, %r1, 2;
	and.b32  	%r31, %r29, 15;
	rem.u32 	%r32, %r29, %r30;
	sub.s32 	%r33, %r32, %r31;
	shr.u32 	%r34, %r33, 2;
	and.b32  	%r35, %r29, 3;
	add.s32 	%r36, %r34, %r35;
	div.u32 	%r37, %r29, %r30;
	shl.b32 	%r38, %r37, 2;
	bfe.u32 	%r39, %r29, 2, 2;
	add.s32 	%r40, %r38, %r39;
	mov.u32 	%r41, %ctaid.x;
	mad.lo.s32 	%r4, %r41, %r1, %r36;
	mov.u32 	%r42, %ctaid.y;
	mov.u32 	%r43, %ntid.y;
	mad.lo.s32 	%r5, %r42, %r43, %r40;
	setp.lt.u32	%p2, %r4, %r22;
	setp.lt.u32	%p3, %r5, %r23;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_23;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r81, 257;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd8, $str9;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r44, 99;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r44;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r81, 0;
	cvt.rn.f32.u32	%f72, %r81;
	@%p6 bra 	BB1_21;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	ld.const.u32 	%r47, [amplifier];
	cvt.rn.f32.s32	%f6, %r47;
	cvt.rn.f32.u32	%f26, %r22;
	sub.f32 	%f27, %f24, %f1;
	div.rn.f32 	%f7, %f27, %f26;
	cvt.rn.f32.u32	%f28, %r23;
	sub.f32 	%f29, %f2, %f23;
	div.rn.f32 	%f8, %f29, %f28;
	mov.u32 	%r74, 0;
	and.b32  	%r48, %r25, 1;
	mov.u32 	%r75, %r74;

BB1_7:
	cvt.rn.f32.u32	%f30, %r74;
	div.rn.f32 	%f31, %f30, %f72;
	add.f32 	%f32, %f4, %f31;
	add.f32 	%f33, %f5, %f31;
	neg.f32 	%f34, %f33;
	fma.rn.f32 	%f35, %f7, %f32, %f1;
	fma.rn.f32 	%f36, %f8, %f34, %f2;
	abs.f32 	%f37, %f35;
	abs.f32 	%f38, %f36;
	add.f32 	%f39, %f37, %f38;
	mul.f32 	%f40, %f39, %f6;
	cvt.rzi.s32.f32	%r9, %f40;
	add.s32 	%r75, %r9, %r75;
	setp.gt.u32	%p7, %r74, 9;
	@%p7 bra 	BB1_9;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r74, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r9;

BB1_9:
	setp.eq.b32	%p8, %r48, 1;
	and.b32  	%r49, %r74, -9;
	setp.eq.s32	%p9, %r49, 2;
	and.pred  	%p10, %p9, %p8;
	add.s32 	%r11, %r74, 1;
	@!%p10 bra 	BB1_20;
	bra.uni 	BB1_10;

BB1_10:
	div.u32 	%r50, %r75, %r11;
	cvt.rn.f32.u32	%f10, %r50;
	setp.eq.s32	%p11, %r74, 0;
	mov.f32 	%f71, 0f00000000;
	@%p11 bra 	BB1_19;

	and.b32  	%r52, %r74, 3;
	setp.eq.s32	%p12, %r52, 0;
	mov.f32 	%f71, 0f00000000;
	mov.u32 	%r80, 0;
	@%p12 bra 	BB1_17;

	setp.eq.s32	%p13, %r52, 1;
	mov.f32 	%f68, 0f00000000;
	mov.u32 	%r78, 0;
	@%p13 bra 	BB1_16;

	setp.eq.s32	%p14, %r52, 2;
	mov.f32 	%f67, 0f00000000;
	mov.u32 	%r77, 0;
	@%p14 bra 	BB1_15;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	ld.local.u32 	%r58, [%rd19];
	cvt.rn.f32.u32	%f45, %r58;
	sub.f32 	%f46, %f45, %f10;
	fma.rn.f32 	%f67, %f46, %f46, 0f00000000;
	mov.u32 	%r77, 1;

BB1_15:
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r77, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.local.u32 	%r59, [%rd23];
	cvt.rn.f32.u32	%f47, %r59;
	sub.f32 	%f48, %f47, %f10;
	fma.rn.f32 	%f68, %f48, %f48, %f67;
	add.s32 	%r78, %r77, 1;

BB1_16:
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	mul.wide.u32 	%rd26, %r78, 4;
	add.s64 	%rd27, %rd25, %rd26;
	ld.local.u32 	%r60, [%rd27];
	cvt.rn.f32.u32	%f49, %r60;
	sub.f32 	%f50, %f49, %f10;
	fma.rn.f32 	%f71, %f50, %f50, %f68;
	add.s32 	%r80, %r78, 1;

BB1_17:
	setp.lt.u32	%p15, %r74, 4;
	@%p15 bra 	BB1_19;

BB1_18:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r80, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.local.u32 	%r61, [%rd31];
	cvt.rn.f32.u32	%f51, %r61;
	sub.f32 	%f52, %f51, %f10;
	fma.rn.f32 	%f53, %f52, %f52, %f71;
	add.s32 	%r62, %r80, 1;
	mul.wide.u32 	%rd32, %r62, 4;
	add.s64 	%rd33, %rd29, %rd32;
	ld.local.u32 	%r63, [%rd33];
	cvt.rn.f32.u32	%f54, %r63;
	sub.f32 	%f55, %f54, %f10;
	fma.rn.f32 	%f56, %f55, %f55, %f53;
	add.s32 	%r64, %r80, 2;
	mul.wide.u32 	%rd34, %r64, 4;
	add.s64 	%rd35, %rd29, %rd34;
	ld.local.u32 	%r65, [%rd35];
	cvt.rn.f32.u32	%f57, %r65;
	sub.f32 	%f58, %f57, %f10;
	fma.rn.f32 	%f59, %f58, %f58, %f56;
	add.s32 	%r66, %r80, 3;
	mul.wide.u32 	%rd36, %r66, 4;
	add.s64 	%rd37, %rd29, %rd36;
	ld.local.u32 	%r67, [%rd37];
	cvt.rn.f32.u32	%f60, %r67;
	sub.f32 	%f61, %f60, %f10;
	fma.rn.f32 	%f71, %f61, %f61, %f59;
	add.s32 	%r80, %r80, 4;
	setp.lt.u32	%p16, %r80, %r74;
	@%p16 bra 	BB1_18;

BB1_19:
	add.s32 	%r69, %r74, -1;
	cvt.rn.f32.u32	%f62, %r69;
	div.rn.f32 	%f63, %f71, %f62;
	div.rn.f32 	%f64, %f63, %f10;
	setp.eq.s32	%p17, %r74, 2;
	selp.f32	%f65, 0f3C23D70A, 0f3DCCCCCD, %p17;
	// inline asm
	activemask.b32 %r68;
	// inline asm
	setp.le.f32	%p18, %f64, %f65;
	vote.sync.all.pred 	%p19, %p18, %r68;
	selp.b32	%r81, %r11, %r81, %p19;

BB1_20:
	cvt.rn.f32.u32	%f72, %r81;
	setp.lt.u32	%p20, %r11, %r81;
	mov.u32 	%r74, %r11;
	@%p20 bra 	BB1_7;

BB1_21:
	mul.lo.s32 	%r71, %r5, %r21;
	cvt.u64.u32	%rd38, %r71;
	cvta.to.global.u64 	%rd39, %rd1;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r4, 8;
	add.s64 	%rd42, %rd40, %rd41;
	st.global.f32 	[%rd42+4], %f72;
	mov.u32 	%r72, 0;
	st.global.u32 	[%rd42], %r72;
	setp.gt.f32	%p21, %f72, 0f00000000;
	@%p21 bra 	BB1_23;

	mov.u64 	%rd43, $str3;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str2;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r73, 169;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r73;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_23:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<22>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<85>;
	.reg .f64 	%fd<68>;
	.reg .b64 	%rd<49>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r22, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r24, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r23, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd20, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd19, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd2, $str1;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str2;
	cvta.global.u64 	%rd5, %rd4;
	mov.u32 	%r27, 64;
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r27;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd6;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd7;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r28, %tid.x;
	mov.u32 	%r29, %tid.y;
	mad.lo.s32 	%r30, %r1, %r29, %r28;
	shl.b32 	%r31, %r1, 2;
	and.b32  	%r32, %r30, 15;
	rem.u32 	%r33, %r30, %r31;
	sub.s32 	%r34, %r33, %r32;
	shr.u32 	%r35, %r34, 2;
	and.b32  	%r36, %r30, 3;
	add.s32 	%r37, %r35, %r36;
	div.u32 	%r38, %r30, %r31;
	shl.b32 	%r39, %r38, 2;
	bfe.u32 	%r40, %r30, 2, 2;
	add.s32 	%r41, %r39, %r40;
	mov.u32 	%r42, %ctaid.x;
	mad.lo.s32 	%r4, %r42, %r1, %r37;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ntid.y;
	mad.lo.s32 	%r5, %r43, %r44, %r41;
	setp.lt.u32	%p2, %r4, %r23;
	setp.lt.u32	%p3, %r5, %r24;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_23;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r25, 257;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd8, $str9;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r45, 99;
	mov.u64 	%rd12, 0;
	mov.u64 	%rd13, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 param2;
	st.param.b32	[param2+0], %r45;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r25, 0;
	mov.u32 	%r46, 0;
	mov.u32 	%r83, %r46;
	@%p6 bra 	BB2_21;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.u32 	%r49, [amplifier];
	cvt.rn.f64.s32	%fd5, %r49;
	cvt.rn.f64.u32	%fd22, %r23;
	sub.f64 	%fd23, %fd20, %fd1;
	div.rn.f64 	%fd6, %fd23, %fd22;
	cvt.rn.f64.u32	%fd24, %r24;
	sub.f64 	%fd25, %fd2, %fd19;
	div.rn.f64 	%fd7, %fd25, %fd24;
	mov.u32 	%r76, 0;
	and.b32  	%r50, %r26, 1;
	mov.u32 	%r77, %r76;
	mov.u32 	%r83, %r25;

BB2_7:
	cvt.rn.f64.u32	%fd26, %r83;
	cvt.rn.f64.u32	%fd27, %r76;
	div.rn.f64 	%fd28, %fd27, %fd26;
	add.f64 	%fd29, %fd3, %fd28;
	add.f64 	%fd30, %fd4, %fd28;
	neg.f64 	%fd31, %fd30;
	fma.rn.f64 	%fd32, %fd6, %fd29, %fd1;
	fma.rn.f64 	%fd33, %fd7, %fd31, %fd2;
	abs.f64 	%fd34, %fd32;
	abs.f64 	%fd35, %fd33;
	add.f64 	%fd36, %fd34, %fd35;
	mul.f64 	%fd37, %fd36, %fd5;
	cvt.rzi.s32.f64	%r9, %fd37;
	add.s32 	%r77, %r9, %r77;
	setp.gt.u32	%p7, %r76, 9;
	@%p7 bra 	BB2_9;

	add.u64 	%rd14, %SP, 0;
	cvta.to.local.u64 	%rd15, %rd14;
	mul.wide.u32 	%rd16, %r76, 4;
	add.s64 	%rd17, %rd15, %rd16;
	st.local.u32 	[%rd17], %r9;

BB2_9:
	setp.eq.b32	%p8, %r50, 1;
	and.b32  	%r51, %r76, -9;
	setp.eq.s32	%p9, %r51, 2;
	and.pred  	%p10, %p9, %p8;
	add.s32 	%r11, %r76, 1;
	@!%p10 bra 	BB2_20;
	bra.uni 	BB2_10;

BB2_10:
	div.u32 	%r52, %r77, %r11;
	cvt.rn.f64.u32	%fd8, %r52;
	setp.eq.s32	%p11, %r76, 0;
	mov.f64 	%fd67, 0d0000000000000000;
	@%p11 bra 	BB2_19;

	and.b32  	%r54, %r76, 3;
	setp.eq.s32	%p12, %r54, 0;
	mov.f64 	%fd67, 0d0000000000000000;
	mov.u32 	%r82, 0;
	@%p12 bra 	BB2_17;

	setp.eq.s32	%p13, %r54, 1;
	mov.f64 	%fd64, 0d0000000000000000;
	mov.u32 	%r80, 0;
	@%p13 bra 	BB2_16;

	setp.eq.s32	%p14, %r54, 2;
	mov.f64 	%fd63, 0d0000000000000000;
	mov.u32 	%r79, 0;
	@%p14 bra 	BB2_15;

	add.u64 	%rd18, %SP, 0;
	cvta.to.local.u64 	%rd19, %rd18;
	ld.local.u32 	%r60, [%rd19];
	cvt.rn.f64.u32	%fd42, %r60;
	sub.f64 	%fd43, %fd42, %fd8;
	fma.rn.f64 	%fd63, %fd43, %fd43, 0d0000000000000000;
	mov.u32 	%r79, 1;

BB2_15:
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd21, %rd20;
	mul.wide.u32 	%rd22, %r79, 4;
	add.s64 	%rd23, %rd21, %rd22;
	ld.local.u32 	%r61, [%rd23];
	cvt.rn.f64.u32	%fd44, %r61;
	sub.f64 	%fd45, %fd44, %fd8;
	fma.rn.f64 	%fd64, %fd45, %fd45, %fd63;
	add.s32 	%r80, %r79, 1;

BB2_16:
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd25, %rd24;
	mul.wide.u32 	%rd26, %r80, 4;
	add.s64 	%rd27, %rd25, %rd26;
	ld.local.u32 	%r62, [%rd27];
	cvt.rn.f64.u32	%fd46, %r62;
	sub.f64 	%fd47, %fd46, %fd8;
	fma.rn.f64 	%fd67, %fd47, %fd47, %fd64;
	add.s32 	%r82, %r80, 1;

BB2_17:
	setp.lt.u32	%p15, %r76, 4;
	@%p15 bra 	BB2_19;

BB2_18:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r82, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.local.u32 	%r63, [%rd31];
	cvt.rn.f64.u32	%fd48, %r63;
	sub.f64 	%fd49, %fd48, %fd8;
	fma.rn.f64 	%fd50, %fd49, %fd49, %fd67;
	add.s32 	%r64, %r82, 1;
	mul.wide.u32 	%rd32, %r64, 4;
	add.s64 	%rd33, %rd29, %rd32;
	ld.local.u32 	%r65, [%rd33];
	cvt.rn.f64.u32	%fd51, %r65;
	sub.f64 	%fd52, %fd51, %fd8;
	fma.rn.f64 	%fd53, %fd52, %fd52, %fd50;
	add.s32 	%r66, %r82, 2;
	mul.wide.u32 	%rd34, %r66, 4;
	add.s64 	%rd35, %rd29, %rd34;
	ld.local.u32 	%r67, [%rd35];
	cvt.rn.f64.u32	%fd54, %r67;
	sub.f64 	%fd55, %fd54, %fd8;
	fma.rn.f64 	%fd56, %fd55, %fd55, %fd53;
	add.s32 	%r68, %r82, 3;
	mul.wide.u32 	%rd36, %r68, 4;
	add.s64 	%rd37, %rd29, %rd36;
	ld.local.u32 	%r69, [%rd37];
	cvt.rn.f64.u32	%fd57, %r69;
	sub.f64 	%fd58, %fd57, %fd8;
	fma.rn.f64 	%fd67, %fd58, %fd58, %fd56;
	add.s32 	%r82, %r82, 4;
	setp.lt.u32	%p16, %r82, %r76;
	@%p16 bra 	BB2_18;

BB2_19:
	add.s32 	%r71, %r76, -1;
	cvt.rn.f64.u32	%fd59, %r71;
	div.rn.f64 	%fd60, %fd67, %fd59;
	div.rn.f64 	%fd61, %fd60, %fd8;
	setp.eq.s32	%p17, %r76, 2;
	selp.f64	%fd62, 0d3F847AE140000000, 0d3FB99999A0000000, %p17;
	// inline asm
	activemask.b32 %r70;
	// inline asm
	setp.le.f64	%p18, %fd61, %fd62;
	vote.sync.all.pred 	%p19, %p18, %r70;
	selp.b32	%r83, %r11, %r83, %p19;

BB2_20:
	setp.lt.u32	%p20, %r11, %r83;
	mov.u32 	%r76, %r11;
	@%p20 bra 	BB2_7;

BB2_21:
	mul.lo.s32 	%r73, %r5, %r22;
	cvt.u64.u32	%rd38, %r73;
	cvta.to.global.u64 	%rd39, %rd1;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r4, 8;
	cvt.rn.f32.u32	%f1, %r83;
	add.s64 	%rd42, %rd40, %rd41;
	st.global.f32 	[%rd42+4], %f1;
	st.global.u32 	[%rd42], %r46;
	setp.gt.f32	%p21, %f1, 0f00000000;
	@%p21 bra 	BB2_23;

	mov.u64 	%rd43, $str3;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str2;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r75, 169;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r75;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_23:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<52>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<166>;
	.reg .b32 	%r<126>;
	.reg .b64 	%rd<67>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r34, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r36, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r35, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f2, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f40, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f39, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f1, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r114, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r38, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f45, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f44, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f43, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f42, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd2, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r39, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r41, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r40, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r42, 64;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r42;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r43, %tid.x;
	mov.u32 	%r44, %tid.y;
	mad.lo.s32 	%r45, %r1, %r44, %r43;
	shl.b32 	%r46, %r1, 2;
	and.b32  	%r47, %r45, 15;
	rem.u32 	%r48, %r45, %r46;
	sub.s32 	%r49, %r48, %r47;
	shr.u32 	%r50, %r49, 2;
	and.b32  	%r51, %r45, 3;
	add.s32 	%r52, %r50, %r51;
	div.u32 	%r53, %r45, %r46;
	shl.b32 	%r54, %r53, 2;
	bfe.u32 	%r55, %r45, 2, 2;
	add.s32 	%r56, %r54, %r55;
	mov.u32 	%r57, %ctaid.x;
	mad.lo.s32 	%r4, %r57, %r1, %r52;
	mov.u32 	%r58, %ctaid.y;
	mov.u32 	%r59, %ntid.y;
	mad.lo.s32 	%r5, %r58, %r59, %r56;
	setp.lt.u32	%p2, %r4, %r35;
	setp.lt.u32	%p3, %r5, %r36;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB3_44;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r61, %r38, 8;
	setp.eq.s32	%p5, %r61, 0;
	mov.u16 	%rs5, 0;
	@%p5 bra 	BB3_10;

	cvt.rn.f32.u32	%f47, %r4;
	sub.f32 	%f48, %f44, %f42;
	sub.f32 	%f49, %f40, %f1;
	div.rn.f32 	%f50, %f49, %f48;
	sub.f32 	%f51, %f45, %f43;
	sub.f32 	%f52, %f2, %f39;
	div.rn.f32 	%f53, %f52, %f51;
	sub.f32 	%f54, %f1, %f42;
	div.rn.f32 	%f55, %f54, %f49;
	sub.f32 	%f56, %f45, %f2;
	div.rn.f32 	%f57, %f56, %f52;
	cvt.rn.f32.u32	%f58, %r35;
	mul.f32 	%f59, %f58, %f55;
	cvt.rn.f32.u32	%f60, %r36;
	mul.f32 	%f61, %f60, %f57;
	cvt.rn.f32.u32	%f62, %r5;
	fma.rn.f32 	%f5, %f47, %f50, %f59;
	fma.rn.f32 	%f6, %f62, %f53, %f61;
	abs.f32 	%f63, %f5;
	mov.b32 	 %r62, %f5;
	and.b32  	%r63, %r62, -2147483648;
	or.b32  	%r64, %r63, 1056964608;
	mov.b32 	 %f64, %r64;
	add.f32 	%f65, %f5, %f64;
	cvt.rzi.f32.f32	%f66, %f65;
	setp.gt.f32	%p6, %f63, 0f4B000000;
	selp.f32	%f156, %f5, %f66, %p6;
	setp.geu.f32	%p7, %f63, 0f3F000000;
	@%p7 bra 	BB3_6;

	cvt.rzi.f32.f32	%f156, %f5;

BB3_6:
	cvt.rzi.s32.f32	%r6, %f156;
	mov.b32 	 %r65, %f6;
	and.b32  	%r66, %r65, -2147483648;
	or.b32  	%r67, %r66, 1056964608;
	mov.b32 	 %f67, %r67;
	add.f32 	%f68, %f6, %f67;
	cvt.rzi.f32.f32	%f69, %f68;
	abs.f32 	%f70, %f6;
	setp.gt.f32	%p8, %f70, 0f4B000000;
	selp.f32	%f157, %f6, %f69, %p8;
	setp.geu.f32	%p9, %f70, 0f3F000000;
	@%p9 bra 	BB3_8;

	cvt.rzi.f32.f32	%f157, %f6;

BB3_8:
	setp.lt.u32	%p10, %r6, %r35;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f32	%r7, %f157;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r36;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB3_10;
	bra.uni 	BB3_9;

BB3_9:
	cvta.to.global.u64 	%rd9, %rd2;
	mul.lo.s32 	%r69, %r7, %r39;
	cvt.u64.u32	%rd10, %r69;
	add.s64 	%rd11, %rd9, %rd10;
	mul.wide.u32 	%rd12, %r6, 8;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.u32 	%r113, [%rd13];
	ld.global.f32 	%f158, [%rd13+4];
	mov.u16 	%rs5, 1;

BB3_10:
	and.b32  	%r70, %r38, 4;
	setp.eq.s32	%p17, %r70, 0;
	@%p17 bra 	BB3_17;

	and.b32  	%r71, %r4, -8;
	cvt.rn.f32.u32	%f72, %r71;
	and.b32  	%r72, %r5, -4;
	cvt.rn.f32.u32	%f73, %r72;
	cvt.rn.f32.u32	%f74, %r40;
	sub.f32 	%f75, %f74, %f72;
	cvt.rn.f32.u32	%f76, %r41;
	sub.f32 	%f77, %f76, %f73;
	mul.f32 	%f78, %f77, %f77;
	fma.rn.f32 	%f79, %f75, %f75, %f78;
	sqrt.rn.f32 	%f80, %f79;
	mul.f32 	%f81, %f80, 0f3CD94079;
	ld.global.f32 	%f82, [screenDistance];
	div.rn.f32 	%f15, %f81, %f82;
	abs.f32 	%f16, %f15;
	setp.leu.f32	%p18, %f16, 0f3F800000;
	mov.f32 	%f159, %f16;
	@%p18 bra 	BB3_13;

	rcp.rn.f32 	%f159, %f16;

BB3_13:
	mul.rn.f32 	%f83, %f159, %f159;
	mov.f32 	%f84, 0fC0B59883;
	mov.f32 	%f85, 0fBF52C7EA;
	fma.rn.f32 	%f86, %f83, %f85, %f84;
	mov.f32 	%f87, 0fC0D21907;
	fma.rn.f32 	%f88, %f86, %f83, %f87;
	mul.f32 	%f89, %f83, %f88;
	mul.f32 	%f90, %f159, %f89;
	add.f32 	%f91, %f83, 0f41355DC0;
	mov.f32 	%f92, 0f41E6BD60;
	fma.rn.f32 	%f93, %f91, %f83, %f92;
	mov.f32 	%f94, 0f419D92C8;
	fma.rn.f32 	%f95, %f93, %f83, %f94;
	rcp.rn.f32 	%f96, %f95;
	fma.rn.f32 	%f97, %f90, %f96, %f159;
	mov.f32 	%f98, 0f3FC90FDB;
	sub.f32 	%f99, %f98, %f97;
	setp.gt.f32	%p19, %f16, 0f3F800000;
	selp.f32	%f100, %f99, %f97, %p19;
	mov.b32 	 %r73, %f100;
	mov.b32 	 %r74, %f15;
	and.b32  	%r75, %r74, -2147483648;
	or.b32  	%r76, %r73, %r75;
	mov.b32 	 %f101, %r76;
	setp.gtu.f32	%p20, %f16, 0f7F800000;
	selp.f32	%f102, %f100, %f101, %p20;
	mul.f32 	%f103, %f102, 0f43340000;
	div.rn.f32 	%f19, %f103, 0f40490FDB;
	setp.ge.f32	%p21, %f19, 0f00000000;
	@%p21 bra 	BB3_15;

	mov.u64 	%rd14, $str6;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str2;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r77, 210;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r77;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_15:
	fma.rn.f32 	%f104, %f19, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f19, 0f40B00000;
	selp.f32	%f105, %f104, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f106, %r114;
	mul.f32 	%f107, %f106, %f105;
	cvt.rzi.u32.f32	%r114, %f107;
	setp.gtu.f32	%p23, %f19, 0f42700000;
	@%p23 bra 	BB3_17;

	mov.u32 	%r78, 1;
	max.u32 	%r114, %r78, %r114;

BB3_17:
	setp.eq.f32	%p24, %f158, 0f00000000;
	setp.eq.s16	%p25, %rs5, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r114, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r114, %p28;
	cvt.rn.f32.u32	%f108, %r35;
	sub.f32 	%f109, %f40, %f1;
	div.rn.f32 	%f20, %f109, %f108;
	cvt.rn.f32.u32	%f110, %r36;
	sub.f32 	%f111, %f2, %f39;
	div.rn.f32 	%f21, %f111, %f110;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB3_19;

	mov.u64 	%rd20, $str9;
	cvta.global.u64 	%rd21, %rd20;
	mov.u64 	%rd22, $str2;
	cvta.global.u64 	%rd23, %rd22;
	mov.u32 	%r79, 99;
	mov.u64 	%rd24, 0;
	mov.u64 	%rd25, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd23;
	.param .b32 param2;
	st.param.b32	[param2+0], %r79;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r123, 0;
	mov.u32 	%r122, %r123;
	@%p30 bra 	BB3_35;

	cvt.rn.f32.u32	%f22, %r4;
	cvt.rn.f32.u32	%f23, %r5;
	ld.const.u32 	%r84, [amplifier];
	cvt.rn.f32.s32	%f24, %r84;
	mov.u32 	%r115, 0;
	mov.u32 	%r123, %r115;
	mov.u32 	%r122, %r13;

BB3_21:
	cvt.rn.f32.u32	%f112, %r122;
	cvt.rn.f32.u32	%f113, %r115;
	div.rn.f32 	%f114, %f113, %f112;
	add.f32 	%f115, %f22, %f114;
	add.f32 	%f116, %f23, %f114;
	neg.f32 	%f117, %f116;
	fma.rn.f32 	%f118, %f20, %f115, %f1;
	fma.rn.f32 	%f119, %f21, %f117, %f2;
	abs.f32 	%f120, %f118;
	abs.f32 	%f121, %f119;
	add.f32 	%f122, %f120, %f121;
	mul.f32 	%f123, %f122, %f24;
	cvt.rzi.s32.f32	%r17, %f123;
	add.s32 	%r123, %r17, %r123;
	setp.gt.u32	%p31, %r115, 9;
	@%p31 bra 	BB3_23;

	add.u64 	%rd26, %SP, 0;
	cvta.to.local.u64 	%rd27, %rd26;
	mul.wide.u32 	%rd28, %r115, 4;
	add.s64 	%rd29, %rd27, %rd28;
	st.local.u32 	[%rd29], %r17;

BB3_23:
	and.b32  	%r85, %r38, 1;
	setp.eq.b32	%p32, %r85, 1;
	and.b32  	%r86, %r115, -9;
	setp.eq.s32	%p33, %r86, 2;
	and.pred  	%p34, %p33, %p32;
	add.s32 	%r19, %r115, 1;
	@!%p34 bra 	BB3_34;
	bra.uni 	BB3_24;

BB3_24:
	div.u32 	%r87, %r123, %r19;
	cvt.rn.f32.u32	%f25, %r87;
	setp.eq.s32	%p35, %r115, 0;
	mov.f32 	%f164, 0f00000000;
	@%p35 bra 	BB3_33;

	and.b32  	%r89, %r115, 3;
	setp.eq.s32	%p36, %r89, 0;
	mov.f32 	%f164, 0f00000000;
	mov.u32 	%r121, 0;
	@%p36 bra 	BB3_31;

	setp.eq.s32	%p37, %r89, 1;
	mov.f32 	%f161, 0f00000000;
	mov.u32 	%r119, 0;
	@%p37 bra 	BB3_30;

	setp.eq.s32	%p38, %r89, 2;
	mov.f32 	%f160, 0f00000000;
	mov.u32 	%r118, 0;
	@%p38 bra 	BB3_29;

	add.u64 	%rd30, %SP, 0;
	cvta.to.local.u64 	%rd31, %rd30;
	ld.local.u32 	%r95, [%rd31];
	cvt.rn.f32.u32	%f128, %r95;
	sub.f32 	%f129, %f128, %f25;
	fma.rn.f32 	%f160, %f129, %f129, 0f00000000;
	mov.u32 	%r118, 1;

BB3_29:
	add.u64 	%rd32, %SP, 0;
	cvta.to.local.u64 	%rd33, %rd32;
	mul.wide.u32 	%rd34, %r118, 4;
	add.s64 	%rd35, %rd33, %rd34;
	ld.local.u32 	%r96, [%rd35];
	cvt.rn.f32.u32	%f130, %r96;
	sub.f32 	%f131, %f130, %f25;
	fma.rn.f32 	%f161, %f131, %f131, %f160;
	add.s32 	%r119, %r118, 1;

BB3_30:
	add.u64 	%rd36, %SP, 0;
	cvta.to.local.u64 	%rd37, %rd36;
	mul.wide.u32 	%rd38, %r119, 4;
	add.s64 	%rd39, %rd37, %rd38;
	ld.local.u32 	%r97, [%rd39];
	cvt.rn.f32.u32	%f132, %r97;
	sub.f32 	%f133, %f132, %f25;
	fma.rn.f32 	%f164, %f133, %f133, %f161;
	add.s32 	%r121, %r119, 1;

BB3_31:
	setp.lt.u32	%p39, %r115, 4;
	@%p39 bra 	BB3_33;

BB3_32:
	add.u64 	%rd40, %SP, 0;
	cvta.to.local.u64 	%rd41, %rd40;
	mul.wide.u32 	%rd42, %r121, 4;
	add.s64 	%rd43, %rd41, %rd42;
	ld.local.u32 	%r98, [%rd43];
	cvt.rn.f32.u32	%f134, %r98;
	sub.f32 	%f135, %f134, %f25;
	fma.rn.f32 	%f136, %f135, %f135, %f164;
	add.s32 	%r99, %r121, 1;
	mul.wide.u32 	%rd44, %r99, 4;
	add.s64 	%rd45, %rd41, %rd44;
	ld.local.u32 	%r100, [%rd45];
	cvt.rn.f32.u32	%f137, %r100;
	sub.f32 	%f138, %f137, %f25;
	fma.rn.f32 	%f139, %f138, %f138, %f136;
	add.s32 	%r101, %r121, 2;
	mul.wide.u32 	%rd46, %r101, 4;
	add.s64 	%rd47, %rd41, %rd46;
	ld.local.u32 	%r102, [%rd47];
	cvt.rn.f32.u32	%f140, %r102;
	sub.f32 	%f141, %f140, %f25;
	fma.rn.f32 	%f142, %f141, %f141, %f139;
	add.s32 	%r103, %r121, 3;
	mul.wide.u32 	%rd48, %r103, 4;
	add.s64 	%rd49, %rd41, %rd48;
	ld.local.u32 	%r104, [%rd49];
	cvt.rn.f32.u32	%f143, %r104;
	sub.f32 	%f144, %f143, %f25;
	fma.rn.f32 	%f164, %f144, %f144, %f142;
	add.s32 	%r121, %r121, 4;
	setp.lt.u32	%p40, %r121, %r115;
	@%p40 bra 	BB3_32;

BB3_33:
	add.s32 	%r106, %r115, -1;
	cvt.rn.f32.u32	%f145, %r106;
	div.rn.f32 	%f146, %f164, %f145;
	div.rn.f32 	%f147, %f146, %f25;
	setp.eq.s32	%p41, %r115, 2;
	selp.f32	%f148, 0f3C23D70A, 0f3DCCCCCD, %p41;
	// inline asm
	activemask.b32 %r105;
	// inline asm
	setp.le.f32	%p42, %f147, %f148;
	vote.sync.all.pred 	%p43, %p42, %r105;
	selp.b32	%r122, %r19, %r122, %p43;

BB3_34:
	setp.lt.u32	%p44, %r19, %r122;
	mov.u32 	%r115, %r19;
	@%p44 bra 	BB3_21;

BB3_35:
	div.u32 	%r125, %r123, %r122;
	setp.ne.s16	%p45, %rs5, 0;
	setp.ne.s32	%p46, %r122, 0;
	or.pred  	%p47, %p46, %p45;
	@%p47 bra 	BB3_37;

	mov.u64 	%rd50, $str7;
	cvta.global.u64 	%rd51, %rd50;
	mov.u64 	%rd52, $str2;
	cvta.global.u64 	%rd53, %rd52;
	mov.u32 	%r108, 264;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd55, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd51;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd53;
	.param .b32 param2;
	st.param.b32	[param2+0], %r108;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd54;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd55;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_37:
	@%p25 bra 	BB3_41;

	setp.eq.s32	%p49, %r122, 0;
	@%p49 bra 	BB3_39;

	and.b32  	%r109, %r38, 16;
	setp.eq.s32	%p50, %r109, 0;
	mul.f32 	%f149, %f158, 0f3B808081;
	selp.f32	%f150, %f158, %f149, %p50;
	cvt.rn.f32.u32	%f151, %r122;
	add.f32 	%f158, %f150, %f151;
	cvt.rn.f32.u32	%f152, %r113;
	mul.lo.s32 	%r110, %r125, %r122;
	cvt.rn.f32.u32	%f153, %r110;
	fma.rn.f32 	%f154, %f152, %f150, %f153;
	div.rn.f32 	%f155, %f154, %f158;
	cvt.rzi.u32.f32	%r125, %f155;
	bra.uni 	BB3_42;

BB3_41:
	cvt.rn.f32.u32	%f158, %r122;
	bra.uni 	BB3_42;

BB3_39:
	mov.u32 	%r125, %r113;

BB3_42:
	mul.lo.s32 	%r111, %r5, %r34;
	cvt.u64.u32	%rd56, %r111;
	cvta.to.global.u64 	%rd57, %rd1;
	add.s64 	%rd58, %rd57, %rd56;
	mul.wide.u32 	%rd59, %r4, 8;
	add.s64 	%rd60, %rd58, %rd59;
	st.global.u32 	[%rd60], %r125;
	st.global.f32 	[%rd60+4], %f158;
	setp.gt.f32	%p51, %f158, 0f00000000;
	@%p51 bra 	BB3_44;

	mov.u64 	%rd61, $str8;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str2;
	cvta.global.u64 	%rd64, %rd63;
	mov.u32 	%r112, 287;
	mov.u64 	%rd65, 0;
	mov.u64 	%rd66, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r112;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd65;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd66;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_44:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<52>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<59>;
	.reg .b32 	%r<130>;
	.reg .f64 	%fd<106>;
	.reg .b64 	%rd<67>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r34, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r36, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r35, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd2, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd30, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd29, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd1, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r118, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r38, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd35, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd34, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd33, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd32, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd2, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r39, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r41, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r40, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r42, 64;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r42;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_2:
	mov.u32 	%r43, %tid.x;
	mov.u32 	%r44, %tid.y;
	mad.lo.s32 	%r45, %r1, %r44, %r43;
	shl.b32 	%r46, %r1, 2;
	and.b32  	%r47, %r45, 15;
	rem.u32 	%r48, %r45, %r46;
	sub.s32 	%r49, %r48, %r47;
	shr.u32 	%r50, %r49, 2;
	and.b32  	%r51, %r45, 3;
	add.s32 	%r52, %r50, %r51;
	div.u32 	%r53, %r45, %r46;
	shl.b32 	%r54, %r53, 2;
	bfe.u32 	%r55, %r45, 2, 2;
	add.s32 	%r56, %r54, %r55;
	mov.u32 	%r57, %ctaid.x;
	mad.lo.s32 	%r4, %r57, %r1, %r52;
	mov.u32 	%r58, %ctaid.y;
	mov.u32 	%r59, %ntid.y;
	mad.lo.s32 	%r5, %r58, %r59, %r56;
	setp.lt.u32	%p2, %r4, %r35;
	setp.lt.u32	%p3, %r5, %r36;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_44;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r61, %r38, 8;
	setp.eq.s32	%p5, %r61, 0;
	mov.u16 	%rs5, 0;
	@%p5 bra 	BB4_10;

	cvt.rn.f64.u32	%fd36, %r4;
	sub.f64 	%fd37, %fd34, %fd32;
	sub.f64 	%fd38, %fd30, %fd1;
	div.rn.f64 	%fd39, %fd38, %fd37;
	sub.f64 	%fd40, %fd35, %fd33;
	sub.f64 	%fd41, %fd2, %fd29;
	div.rn.f64 	%fd42, %fd41, %fd40;
	sub.f64 	%fd43, %fd1, %fd32;
	div.rn.f64 	%fd44, %fd43, %fd38;
	sub.f64 	%fd45, %fd35, %fd2;
	div.rn.f64 	%fd46, %fd45, %fd41;
	cvt.rn.f64.u32	%fd47, %r35;
	mul.f64 	%fd48, %fd47, %fd44;
	cvt.rn.f64.u32	%fd49, %r36;
	mul.f64 	%fd50, %fd49, %fd46;
	cvt.rn.f64.u32	%fd51, %r5;
	fma.rn.f64 	%fd99, %fd36, %fd39, %fd48;
	fma.rn.f64 	%fd100, %fd51, %fd42, %fd50;
	abs.f64 	%fd7, %fd99;
	setp.ge.f64	%p6, %fd7, 0d4330000000000000;
	@%p6 bra 	BB4_6;

	add.f64 	%fd52, %fd7, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd53, %fd52;
	setp.lt.f64	%p7, %fd7, 0d3FE0000000000000;
	selp.f64	%fd54, 0d0000000000000000, %fd53, %p7;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r62, %temp}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r63}, %fd54;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r64}, %fd99;
	}
	and.b32  	%r65, %r64, -2147483648;
	or.b32  	%r66, %r63, %r65;
	mov.b64 	%fd99, {%r62, %r66};

BB4_6:
	cvt.rzi.s32.f64	%r6, %fd99;
	abs.f64 	%fd10, %fd100;
	setp.ge.f64	%p8, %fd10, 0d4330000000000000;
	@%p8 bra 	BB4_8;

	add.f64 	%fd55, %fd10, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd56, %fd55;
	setp.lt.f64	%p9, %fd10, 0d3FE0000000000000;
	selp.f64	%fd57, 0d0000000000000000, %fd56, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r67, %temp}, %fd57;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r68}, %fd57;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r69}, %fd100;
	}
	and.b32  	%r70, %r69, -2147483648;
	or.b32  	%r71, %r68, %r70;
	mov.b64 	%fd100, {%r67, %r71};

BB4_8:
	setp.lt.u32	%p10, %r6, %r35;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f64	%r7, %fd100;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r36;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB4_10;
	bra.uni 	BB4_9;

BB4_9:
	cvta.to.global.u64 	%rd9, %rd2;
	mul.lo.s32 	%r73, %r7, %r39;
	cvt.u64.u32	%rd10, %r73;
	add.s64 	%rd11, %rd9, %rd10;
	mul.wide.u32 	%rd12, %r6, 8;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.u32 	%r117, [%rd13];
	ld.global.f32 	%f56, [%rd13+4];
	mov.u16 	%rs5, 1;

BB4_10:
	and.b32  	%r74, %r38, 4;
	setp.eq.s32	%p17, %r74, 0;
	@%p17 bra 	BB4_17;

	and.b32  	%r75, %r4, -8;
	cvt.rn.f32.u32	%f13, %r75;
	and.b32  	%r76, %r5, -4;
	cvt.rn.f32.u32	%f14, %r76;
	cvt.rn.f32.u32	%f15, %r40;
	sub.f32 	%f16, %f15, %f13;
	cvt.rn.f32.u32	%f17, %r41;
	sub.f32 	%f18, %f17, %f14;
	mul.f32 	%f19, %f18, %f18;
	fma.rn.f32 	%f20, %f16, %f16, %f19;
	sqrt.rn.f32 	%f21, %f20;
	mul.f32 	%f22, %f21, 0f3CD94079;
	ld.global.f32 	%f23, [screenDistance];
	div.rn.f32 	%f3, %f22, %f23;
	abs.f32 	%f4, %f3;
	setp.leu.f32	%p18, %f4, 0f3F800000;
	mov.f32 	%f57, %f4;
	@%p18 bra 	BB4_13;

	rcp.rn.f32 	%f57, %f4;

BB4_13:
	mul.rn.f32 	%f24, %f57, %f57;
	mov.f32 	%f25, 0fC0B59883;
	mov.f32 	%f26, 0fBF52C7EA;
	fma.rn.f32 	%f27, %f24, %f26, %f25;
	mov.f32 	%f28, 0fC0D21907;
	fma.rn.f32 	%f29, %f27, %f24, %f28;
	mul.f32 	%f30, %f24, %f29;
	mul.f32 	%f31, %f57, %f30;
	add.f32 	%f32, %f24, 0f41355DC0;
	mov.f32 	%f33, 0f41E6BD60;
	fma.rn.f32 	%f34, %f32, %f24, %f33;
	mov.f32 	%f35, 0f419D92C8;
	fma.rn.f32 	%f36, %f34, %f24, %f35;
	rcp.rn.f32 	%f37, %f36;
	fma.rn.f32 	%f38, %f31, %f37, %f57;
	mov.f32 	%f39, 0f3FC90FDB;
	sub.f32 	%f40, %f39, %f38;
	setp.gt.f32	%p19, %f4, 0f3F800000;
	selp.f32	%f41, %f40, %f38, %p19;
	mov.b32 	 %r77, %f41;
	mov.b32 	 %r78, %f3;
	and.b32  	%r79, %r78, -2147483648;
	or.b32  	%r80, %r77, %r79;
	mov.b32 	 %f42, %r80;
	setp.gtu.f32	%p20, %f4, 0f7F800000;
	selp.f32	%f43, %f41, %f42, %p20;
	mul.f32 	%f44, %f43, 0f43340000;
	div.rn.f32 	%f7, %f44, 0f40490FDB;
	setp.ge.f32	%p21, %f7, 0f00000000;
	@%p21 bra 	BB4_15;

	mov.u64 	%rd14, $str6;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str2;
	cvta.global.u64 	%rd17, %rd16;
	mov.u32 	%r81, 210;
	mov.u64 	%rd18, 0;
	mov.u64 	%rd19, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_15:
	fma.rn.f32 	%f45, %f7, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f7, 0f40B00000;
	selp.f32	%f46, %f45, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f47, %r118;
	mul.f32 	%f48, %f47, %f46;
	cvt.rzi.u32.f32	%r118, %f48;
	setp.gtu.f32	%p23, %f7, 0f42700000;
	@%p23 bra 	BB4_17;

	mov.u32 	%r82, 1;
	max.u32 	%r118, %r82, %r118;

BB4_17:
	setp.eq.f32	%p24, %f56, 0f00000000;
	setp.eq.s16	%p25, %rs5, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r118, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r118, %p28;
	cvt.rn.f64.u32	%fd58, %r35;
	sub.f64 	%fd59, %fd30, %fd1;
	div.rn.f64 	%fd13, %fd59, %fd58;
	cvt.rn.f64.u32	%fd60, %r36;
	sub.f64 	%fd61, %fd2, %fd29;
	div.rn.f64 	%fd14, %fd61, %fd60;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB4_19;

	mov.u64 	%rd20, $str9;
	cvta.global.u64 	%rd21, %rd20;
	mov.u64 	%rd22, $str2;
	cvta.global.u64 	%rd23, %rd22;
	mov.u32 	%r83, 99;
	mov.u64 	%rd24, 0;
	mov.u64 	%rd25, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd23;
	.param .b32 param2;
	st.param.b32	[param2+0], %r83;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r127, 0;
	mov.u32 	%r126, %r127;
	@%p30 bra 	BB4_35;

	cvt.rn.f64.u32	%fd15, %r4;
	cvt.rn.f64.u32	%fd16, %r5;
	ld.const.u32 	%r88, [amplifier];
	cvt.rn.f64.s32	%fd17, %r88;
	mov.u32 	%r119, 0;
	mov.u32 	%r127, %r119;
	mov.u32 	%r126, %r13;

BB4_21:
	cvt.rn.f64.u32	%fd62, %r126;
	cvt.rn.f64.u32	%fd63, %r119;
	div.rn.f64 	%fd64, %fd63, %fd62;
	add.f64 	%fd65, %fd15, %fd64;
	add.f64 	%fd66, %fd16, %fd64;
	neg.f64 	%fd67, %fd66;
	fma.rn.f64 	%fd68, %fd13, %fd65, %fd1;
	fma.rn.f64 	%fd69, %fd14, %fd67, %fd2;
	abs.f64 	%fd70, %fd68;
	abs.f64 	%fd71, %fd69;
	add.f64 	%fd72, %fd70, %fd71;
	mul.f64 	%fd73, %fd72, %fd17;
	cvt.rzi.s32.f64	%r17, %fd73;
	add.s32 	%r127, %r17, %r127;
	setp.gt.u32	%p31, %r119, 9;
	@%p31 bra 	BB4_23;

	add.u64 	%rd26, %SP, 0;
	cvta.to.local.u64 	%rd27, %rd26;
	mul.wide.u32 	%rd28, %r119, 4;
	add.s64 	%rd29, %rd27, %rd28;
	st.local.u32 	[%rd29], %r17;

BB4_23:
	and.b32  	%r89, %r38, 1;
	setp.eq.b32	%p32, %r89, 1;
	and.b32  	%r90, %r119, -9;
	setp.eq.s32	%p33, %r90, 2;
	and.pred  	%p34, %p33, %p32;
	add.s32 	%r19, %r119, 1;
	@!%p34 bra 	BB4_34;
	bra.uni 	BB4_24;

BB4_24:
	div.u32 	%r91, %r127, %r19;
	cvt.rn.f64.u32	%fd18, %r91;
	setp.eq.s32	%p35, %r119, 0;
	mov.f64 	%fd105, 0d0000000000000000;
	@%p35 bra 	BB4_33;

	and.b32  	%r93, %r119, 3;
	setp.eq.s32	%p36, %r93, 0;
	mov.f64 	%fd105, 0d0000000000000000;
	mov.u32 	%r125, 0;
	@%p36 bra 	BB4_31;

	setp.eq.s32	%p37, %r93, 1;
	mov.f64 	%fd102, 0d0000000000000000;
	mov.u32 	%r123, 0;
	@%p37 bra 	BB4_30;

	setp.eq.s32	%p38, %r93, 2;
	mov.f64 	%fd101, 0d0000000000000000;
	mov.u32 	%r122, 0;
	@%p38 bra 	BB4_29;

	add.u64 	%rd30, %SP, 0;
	cvta.to.local.u64 	%rd31, %rd30;
	ld.local.u32 	%r99, [%rd31];
	cvt.rn.f64.u32	%fd78, %r99;
	sub.f64 	%fd79, %fd78, %fd18;
	fma.rn.f64 	%fd101, %fd79, %fd79, 0d0000000000000000;
	mov.u32 	%r122, 1;

BB4_29:
	add.u64 	%rd32, %SP, 0;
	cvta.to.local.u64 	%rd33, %rd32;
	mul.wide.u32 	%rd34, %r122, 4;
	add.s64 	%rd35, %rd33, %rd34;
	ld.local.u32 	%r100, [%rd35];
	cvt.rn.f64.u32	%fd80, %r100;
	sub.f64 	%fd81, %fd80, %fd18;
	fma.rn.f64 	%fd102, %fd81, %fd81, %fd101;
	add.s32 	%r123, %r122, 1;

BB4_30:
	add.u64 	%rd36, %SP, 0;
	cvta.to.local.u64 	%rd37, %rd36;
	mul.wide.u32 	%rd38, %r123, 4;
	add.s64 	%rd39, %rd37, %rd38;
	ld.local.u32 	%r101, [%rd39];
	cvt.rn.f64.u32	%fd82, %r101;
	sub.f64 	%fd83, %fd82, %fd18;
	fma.rn.f64 	%fd105, %fd83, %fd83, %fd102;
	add.s32 	%r125, %r123, 1;

BB4_31:
	setp.lt.u32	%p39, %r119, 4;
	@%p39 bra 	BB4_33;

BB4_32:
	add.u64 	%rd40, %SP, 0;
	cvta.to.local.u64 	%rd41, %rd40;
	mul.wide.u32 	%rd42, %r125, 4;
	add.s64 	%rd43, %rd41, %rd42;
	ld.local.u32 	%r102, [%rd43];
	cvt.rn.f64.u32	%fd84, %r102;
	sub.f64 	%fd85, %fd84, %fd18;
	fma.rn.f64 	%fd86, %fd85, %fd85, %fd105;
	add.s32 	%r103, %r125, 1;
	mul.wide.u32 	%rd44, %r103, 4;
	add.s64 	%rd45, %rd41, %rd44;
	ld.local.u32 	%r104, [%rd45];
	cvt.rn.f64.u32	%fd87, %r104;
	sub.f64 	%fd88, %fd87, %fd18;
	fma.rn.f64 	%fd89, %fd88, %fd88, %fd86;
	add.s32 	%r105, %r125, 2;
	mul.wide.u32 	%rd46, %r105, 4;
	add.s64 	%rd47, %rd41, %rd46;
	ld.local.u32 	%r106, [%rd47];
	cvt.rn.f64.u32	%fd90, %r106;
	sub.f64 	%fd91, %fd90, %fd18;
	fma.rn.f64 	%fd92, %fd91, %fd91, %fd89;
	add.s32 	%r107, %r125, 3;
	mul.wide.u32 	%rd48, %r107, 4;
	add.s64 	%rd49, %rd41, %rd48;
	ld.local.u32 	%r108, [%rd49];
	cvt.rn.f64.u32	%fd93, %r108;
	sub.f64 	%fd94, %fd93, %fd18;
	fma.rn.f64 	%fd105, %fd94, %fd94, %fd92;
	add.s32 	%r125, %r125, 4;
	setp.lt.u32	%p40, %r125, %r119;
	@%p40 bra 	BB4_32;

BB4_33:
	add.s32 	%r110, %r119, -1;
	cvt.rn.f64.u32	%fd95, %r110;
	div.rn.f64 	%fd96, %fd105, %fd95;
	div.rn.f64 	%fd97, %fd96, %fd18;
	setp.eq.s32	%p41, %r119, 2;
	selp.f64	%fd98, 0d3F847AE140000000, 0d3FB99999A0000000, %p41;
	// inline asm
	activemask.b32 %r109;
	// inline asm
	setp.le.f64	%p42, %fd97, %fd98;
	vote.sync.all.pred 	%p43, %p42, %r109;
	selp.b32	%r126, %r19, %r126, %p43;

BB4_34:
	setp.lt.u32	%p44, %r19, %r126;
	mov.u32 	%r119, %r19;
	@%p44 bra 	BB4_21;

BB4_35:
	div.u32 	%r129, %r127, %r126;
	setp.ne.s16	%p45, %rs5, 0;
	setp.ne.s32	%p46, %r126, 0;
	or.pred  	%p47, %p46, %p45;
	@%p47 bra 	BB4_37;

	mov.u64 	%rd50, $str7;
	cvta.global.u64 	%rd51, %rd50;
	mov.u64 	%rd52, $str2;
	cvta.global.u64 	%rd53, %rd52;
	mov.u32 	%r112, 264;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd55, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd51;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd53;
	.param .b32 param2;
	st.param.b32	[param2+0], %r112;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd54;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd55;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB4_37:
	@%p25 bra 	BB4_41;

	setp.eq.s32	%p49, %r126, 0;
	@%p49 bra 	BB4_39;

	and.b32  	%r113, %r38, 16;
	setp.eq.s32	%p50, %r113, 0;
	mul.f32 	%f49, %f56, 0f3B808081;
	selp.f32	%f50, %f56, %f49, %p50;
	cvt.rn.f32.u32	%f51, %r126;
	add.f32 	%f56, %f50, %f51;
	cvt.rn.f32.u32	%f52, %r117;
	mul.lo.s32 	%r114, %r129, %r126;
	cvt.rn.f32.u32	%f53, %r114;
	fma.rn.f32 	%f54, %f52, %f50, %f53;
	div.rn.f32 	%f55, %f54, %f56;
	cvt.rzi.u32.f32	%r129, %f55;
	bra.uni 	BB4_42;

BB4_41:
	cvt.rn.f32.u32	%f56, %r126;
	bra.uni 	BB4_42;

BB4_39:
	mov.u32 	%r129, %r117;

BB4_42:
	mul.lo.s32 	%r115, %r5, %r34;
	cvt.u64.u32	%rd56, %r115;
	cvta.to.global.u64 	%rd57, %rd1;
	add.s64 	%rd58, %rd57, %rd56;
	mul.wide.u32 	%rd59, %r4, 8;
	add.s64 	%rd60, %rd58, %rd59;
	st.global.u32 	[%rd60], %r129;
	st.global.f32 	[%rd60+4], %f56;
	setp.gt.f32	%p51, %f56, 0f00000000;
	@%p51 bra 	BB4_44;

	mov.u64 	%rd61, $str8;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str2;
	cvta.global.u64 	%rd64, %rd63;
	mov.u32 	%r116, 287;
	mov.u64 	%rd65, 0;
	mov.u64 	%rd66, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r116;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd65;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd66;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_44:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd1, [compose_param_0];
	ld.param.u32 	%r4, [compose_param_1];
	ld.param.u64 	%rd2, [compose_param_4];
	ld.param.u32 	%r6, [compose_param_5];
	ld.param.u32 	%r7, [compose_param_6];
	ld.param.u64 	%rd3, [compose_param_7];
	ld.param.u32 	%r5, [compose_param_8];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r9, %r8, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	setp.ge.u32	%p1, %r2, %r7;
	setp.ge.u32	%p2, %r1, %r6;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_4;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.lo.s32 	%r14, %r2, %r4;
	cvt.u64.u32	%rd5, %r14;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u32 	%r15, [%rd8];
	shl.b32 	%r16, %r15, 7;
	rem.u32 	%r17, %r16, %r5;
	sub.s32 	%r18, %r5, %r17;
	add.s32 	%r3, %r18, -1;
	setp.lt.u32	%p4, %r3, %r5;
	@%p4 bra 	BB5_3;

	mov.u64 	%rd9, $str10;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str11;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r19, 19;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r19;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB5_3:
	shl.b32 	%r20, %r3, 2;
	mov.u32 	%r21, 0;
	suld.b.2d.b32.trap {%r22}, [%rd3, {%r20, %r21}];
	shl.b32 	%r23, %r1, 2;
	sust.b.2d.b32.trap 	[%rd2, {%r23, %r2}], {%r22};

BB5_4:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<23>;
	.reg .b32 	%r<35>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r10, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r11, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f2, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f3, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f4, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f5, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r13, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r17, %r15, %r14, %r16;
	mul.lo.s32 	%r1, %r17, %r13;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %tid.y;
	mad.lo.s32 	%r21, %r18, %r19, %r20;
	mul.lo.s32 	%r2, %r21, %r13;
	sub.s32 	%r22, %r12, %r13;
	setp.ge.u32	%p1, %r2, %r22;
	sub.s32 	%r23, %r11, %r13;
	setp.ge.u32	%p2, %r1, %r23;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_10;

	sub.f32 	%f6, %f4, %f2;
	cvt.rn.f32.u32	%f7, %r11;
	div.rn.f32 	%f8, %f6, %f7;
	cvt.rn.f32.u32	%f9, %r12;
	sub.f32 	%f10, %f5, %f3;
	div.rn.f32 	%f11, %f10, %f9;
	cvt.rn.f32.u32	%f12, %r1;
	fma.rn.f32 	%f13, %f12, %f8, %f2;
	cvt.rn.f32.u32	%f14, %r2;
	mul.f32 	%f15, %f14, %f11;
	sub.f32 	%f16, %f5, %f15;
	abs.f32 	%f17, %f13;
	abs.f32 	%f18, %f16;
	add.f32 	%f19, %f17, %f18;
	ld.const.u32 	%r24, [amplifier];
	cvt.rn.f32.s32	%f20, %r24;
	mul.f32 	%f21, %f19, %f20;
	cvt.rzi.s32.f32	%r3, %f21;
	setp.eq.s32	%p4, %r13, 0;
	@%p4 bra 	BB6_10;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.lo.s32 	%r29, %r2, %r10;
	cvt.u64.u32	%rd4, %r29;
	add.s64 	%rd5, %rd3, %rd4;
	cvt.rn.f32.u32	%f22, %r13;
	rcp.rn.f32 	%f1, %f22;
	mul.wide.u32 	%rd6, %r1, 8;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r28, %r13, 3;
	mov.u32 	%r31, 1;
	mov.u32 	%r34, 0;
	setp.eq.s32	%p5, %r28, 0;
	@%p5 bra 	BB6_8;

	setp.eq.s32	%p6, %r28, 1;
	@%p6 bra 	BB6_7;

	setp.eq.s32	%p7, %r28, 2;
	@%p7 bra 	BB6_6;

	st.global.u32 	[%rd1], %r3;
	st.global.f32 	[%rd1+4], %f1;
	mov.u32 	%r31, 2;

BB6_6:
	st.global.u32 	[%rd1], %r3;
	st.global.f32 	[%rd1+4], %f1;
	mov.u32 	%r34, %r31;

BB6_7:
	st.global.u32 	[%rd1], %r3;
	st.global.f32 	[%rd1+4], %f1;
	add.s32 	%r34, %r34, 1;

BB6_8:
	setp.lt.u32	%p8, %r13, 4;
	@%p8 bra 	BB6_10;

BB6_9:
	st.global.u32 	[%rd1], %r3;
	st.global.f32 	[%rd1+4], %f1;
	add.s32 	%r34, %r34, 4;
	setp.lt.u32	%p9, %r34, %r13;
	@%p9 bra 	BB6_9;

BB6_10:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 17

BB7_2:
	ret;
}


