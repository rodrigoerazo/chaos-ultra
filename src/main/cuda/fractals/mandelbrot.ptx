//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[23] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 109, 97, 110, 100, 101, 108, 98, 114, 111, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[66] = {114, 0, 101, 0, 117, 0, 115, 0, 105, 0, 110, 0, 103, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 32, 0, 124, 0, 124, 0, 32, 0, 115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[56] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 16 .b8 $str10[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str11[132] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .f32 	%f<80>;
	.reg .b32 	%r<101>;
	.reg .b64 	%rd<48>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r29, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r28, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f33, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f32, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f31, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r30, [fractalRenderMainFloat_param_4];
	ld.param.u32 	%r98, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r32, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r33, 65;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r33;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r34, %tid.x;
	mov.u32 	%r35, %tid.y;
	mad.lo.s32 	%r36, %r1, %r35, %r34;
	shl.b32 	%r37, %r1, 2;
	and.b32  	%r38, %r36, 15;
	rem.u32 	%r39, %r36, %r37;
	sub.s32 	%r40, %r39, %r38;
	shr.u32 	%r41, %r40, 2;
	and.b32  	%r42, %r36, 3;
	add.s32 	%r43, %r41, %r42;
	div.u32 	%r44, %r36, %r37;
	shl.b32 	%r45, %r44, 2;
	bfe.u32 	%r46, %r36, 2, 2;
	add.s32 	%r47, %r45, %r46;
	mov.u32 	%r48, %ctaid.x;
	mad.lo.s32 	%r4, %r48, %r1, %r43;
	mov.u32 	%r49, %ctaid.y;
	mov.u32 	%r50, %ntid.y;
	mad.lo.s32 	%r5, %r49, %r50, %r47;
	setp.lt.u32	%p2, %r4, %r28;
	setp.lt.u32	%p3, %r5, %r29;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_30;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r98, 257;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd10, $str9;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str2;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r51, 110;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r51;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r98, 0;
	cvt.rn.f32.u32	%f79, %r98;
	mov.u32 	%r99, 0;
	@%p6 bra 	BB1_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	cvt.rn.f32.u32	%f34, %r28;
	sub.f32 	%f35, %f32, %f30;
	div.rn.f32 	%f6, %f35, %f34;
	cvt.rn.f32.u32	%f36, %r29;
	sub.f32 	%f37, %f33, %f31;
	div.rn.f32 	%f7, %f37, %f36;
	mov.u32 	%r55, 0;
	and.b32  	%r58, %r32, 1;
	mov.u32 	%r89, %r55;
	mov.u32 	%r99, %r55;

BB1_8:
	mov.u32 	%r8, %r98;
	mov.u32 	%r6, %r89;
	cvt.rn.f32.u32	%f40, %r6;
	div.rn.f32 	%f41, %f40, %f79;
	add.f32 	%f42, %f4, %f41;
	add.f32 	%f43, %f5, %f41;
	neg.f32 	%f44, %f43;
	fma.rn.f32 	%f9, %f6, %f42, %f30;
	fma.rn.f32 	%f10, %f7, %f44, %f33;
	setp.eq.s32	%p7, %r30, 0;
	mov.f32 	%f72, 0f00000000;
	mov.u32 	%r93, %r55;
	mov.f32 	%f73, %f72;
	@%p7 bra 	BB1_11;

BB1_9:
	mul.f32 	%f13, %f72, %f72;
	mul.f32 	%f14, %f73, %f73;
	add.f32 	%f45, %f14, %f13;
	setp.geu.f32	%p8, %f45, 0f40800000;
	@%p8 bra 	BB1_11;

	sub.f32 	%f46, %f14, %f13;
	add.f32 	%f15, %f9, %f46;
	add.f32 	%f47, %f73, %f73;
	fma.rn.f32 	%f72, %f47, %f72, %f10;
	add.s32 	%r93, %r93, 1;
	setp.lt.u32	%p9, %r93, %r30;
	mov.f32 	%f73, %f15;
	@%p9 bra 	BB1_9;

BB1_11:
	add.s32 	%r99, %r93, %r99;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB1_13;

	add.u64 	%rd16, %SP, 0;
	cvta.to.local.u64 	%rd17, %rd16;
	mul.wide.u32 	%rd18, %r6, 4;
	add.s64 	%rd19, %rd17, %rd18;
	st.local.u32 	[%rd19], %r93;

BB1_13:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r58, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r13, %r8, 1;
	setp.eq.s32	%p16, %r6, %r13;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r89, %r6, 1;
	mov.u32 	%r98, %r8;
	@!%p17 bra 	BB1_27;
	bra.uni 	BB1_14;

BB1_14:
	div.u32 	%r59, %r99, %r89;
	cvt.rn.f32.u32	%f17, %r59;
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd20;
	setp.eq.s32	%p18, %r6, 0;
	mov.f32 	%f78, 0f00000000;
	@%p18 bra 	BB1_23;

	and.b32  	%r15, %r6, 3;
	setp.eq.s32	%p19, %r15, 0;
	mov.f32 	%f78, 0f00000000;
	mov.u32 	%r97, 0;
	@%p19 bra 	BB1_21;

	setp.eq.s32	%p20, %r15, 1;
	mov.f32 	%f75, 0f00000000;
	mov.u32 	%r95, 0;
	@%p20 bra 	BB1_20;

	setp.eq.s32	%p21, %r15, 2;
	mov.f32 	%f74, 0f00000000;
	mov.u32 	%r94, 0;
	@%p21 bra 	BB1_19;

	ld.local.u32 	%r64, [%rd1];
	cvt.rn.f32.u32	%f52, %r64;
	sub.f32 	%f53, %f52, %f17;
	fma.rn.f32 	%f74, %f53, %f53, 0f00000000;
	mov.u32 	%r94, 1;

BB1_19:
	mul.wide.u32 	%rd23, %r94, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.local.u32 	%r65, [%rd24];
	cvt.rn.f32.u32	%f54, %r65;
	sub.f32 	%f55, %f54, %f17;
	fma.rn.f32 	%f75, %f55, %f55, %f74;
	add.s32 	%r95, %r94, 1;

BB1_20:
	mul.wide.u32 	%rd27, %r95, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.local.u32 	%r66, [%rd28];
	cvt.rn.f32.u32	%f56, %r66;
	sub.f32 	%f57, %f56, %f17;
	fma.rn.f32 	%f78, %f57, %f57, %f75;
	add.s32 	%r97, %r95, 1;

BB1_21:
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB1_23;

BB1_22:
	mul.wide.u32 	%rd29, %r97, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.local.u32 	%r67, [%rd30];
	cvt.rn.f32.u32	%f58, %r67;
	sub.f32 	%f59, %f58, %f17;
	fma.rn.f32 	%f60, %f59, %f59, %f78;
	add.s32 	%r68, %r97, 1;
	mul.wide.u32 	%rd31, %r68, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.local.u32 	%r69, [%rd32];
	cvt.rn.f32.u32	%f61, %r69;
	sub.f32 	%f62, %f61, %f17;
	fma.rn.f32 	%f63, %f62, %f62, %f60;
	add.s32 	%r70, %r97, 2;
	mul.wide.u32 	%rd33, %r70, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.local.u32 	%r71, [%rd34];
	cvt.rn.f32.u32	%f64, %r71;
	sub.f32 	%f65, %f64, %f17;
	fma.rn.f32 	%f66, %f65, %f65, %f63;
	add.s32 	%r72, %r97, 3;
	mul.wide.u32 	%rd35, %r72, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r73, [%rd36];
	cvt.rn.f32.u32	%f67, %r73;
	sub.f32 	%f68, %f67, %f17;
	fma.rn.f32 	%f78, %f68, %f68, %f66;
	add.s32 	%r97, %r97, 4;
	setp.lt.u32	%p23, %r97, %r6;
	@%p23 bra 	BB1_22;

BB1_23:
	add.s32 	%r74, %r6, -1;
	cvt.rn.f32.u32	%f69, %r74;
	div.rn.f32 	%f70, %f78, %f69;
	div.rn.f32 	%f27, %f70, %f17;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB1_25;

	// inline asm
	activemask.b32 %r75;
	// inline asm
	ld.local.v2.u32 	{%r77, %r78}, [%rd1];
	setp.eq.s32	%p25, %r77, %r78;
	vote.sync.all.pred 	%p26, %p25, %r75;
	mov.u32 	%r98, 2;
	@%p26 bra 	BB1_27;

BB1_25:
	// inline asm
	activemask.b32 %r82;
	// inline asm
	setp.lt.f32	%p27, %f27, 0f3C23D70A;
	vote.sync.all.pred 	%p28, %p27, %r82;
	mov.u32 	%r98, %r89;
	@%p28 bra 	BB1_27;

	// inline asm
	activemask.b32 %r84;
	// inline asm
	setp.le.f32	%p29, %f27, 0f3F800000;
	vote.sync.all.pred 	%p30, %p29, %r84;
	setp.ge.u32	%p31, %r6, %r13;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r98, %r89, %r8, %p32;

BB1_27:
	cvt.rn.f32.u32	%f79, %r98;
	setp.lt.u32	%p33, %r89, %r98;
	@%p33 bra 	BB1_8;
	bra.uni 	BB1_28;

BB1_6:
	mov.u32 	%r98, %r99;

BB1_28:
	mul.lo.s32 	%r86, %r5, %r27;
	cvt.u64.u32	%rd37, %r86;
	cvta.to.global.u64 	%rd38, %rd3;
	add.s64 	%rd39, %rd38, %rd37;
	mul.wide.u32 	%rd40, %r4, 8;
	add.s64 	%rd41, %rd39, %rd40;
	div.u32 	%r87, %r99, %r98;
	st.global.u32 	[%rd41], %r87;
	st.global.f32 	[%rd41+4], %f79;
	setp.gt.f32	%p34, %f79, 0f00000000;
	@%p34 bra 	BB1_30;

	mov.u64 	%rd42, $str3;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, $str2;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r88, 192;
	mov.u64 	%rd46, 0;
	mov.u64 	%rd47, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd43;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd45;
	.param .b32 param2;
	st.param.b32	[param2+0], %r88;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd46;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd47;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_30:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<101>;
	.reg .f64 	%fd<75>;
	.reg .b64 	%rd<48>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r29, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd29, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd28, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd27, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd26, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r30, [fractalRenderMainDouble_param_4];
	ld.param.u32 	%r31, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r32, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r33, 65;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r33;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r34, %tid.x;
	mov.u32 	%r35, %tid.y;
	mad.lo.s32 	%r36, %r1, %r35, %r34;
	shl.b32 	%r37, %r1, 2;
	and.b32  	%r38, %r36, 15;
	rem.u32 	%r39, %r36, %r37;
	sub.s32 	%r40, %r39, %r38;
	shr.u32 	%r41, %r40, 2;
	and.b32  	%r42, %r36, 3;
	add.s32 	%r43, %r41, %r42;
	div.u32 	%r44, %r36, %r37;
	shl.b32 	%r45, %r44, 2;
	bfe.u32 	%r46, %r36, 2, 2;
	add.s32 	%r47, %r45, %r46;
	mov.u32 	%r48, %ctaid.x;
	mad.lo.s32 	%r4, %r48, %r1, %r43;
	mov.u32 	%r49, %ctaid.y;
	mov.u32 	%r50, %ntid.y;
	mad.lo.s32 	%r5, %r49, %r50, %r47;
	setp.lt.u32	%p2, %r4, %r28;
	setp.lt.u32	%p3, %r5, %r29;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_29;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r31, 257;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd10, $str9;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str2;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r51, 110;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r51;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r31, 0;
	mov.u32 	%r99, 0;
	mov.u32 	%r98, %r99;
	@%p6 bra 	BB2_27;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	cvt.rn.f64.u32	%fd30, %r28;
	sub.f64 	%fd31, %fd28, %fd26;
	div.rn.f64 	%fd5, %fd31, %fd30;
	cvt.rn.f64.u32	%fd32, %r29;
	sub.f64 	%fd33, %fd29, %fd27;
	div.rn.f64 	%fd6, %fd33, %fd32;
	mov.u32 	%r55, 0;
	and.b32  	%r58, %r32, 1;
	mov.u32 	%r89, %r55;
	mov.u32 	%r99, %r55;
	mov.u32 	%r98, %r31;

BB2_7:
	mov.u32 	%r8, %r98;
	mov.u32 	%r6, %r89;
	cvt.rn.f64.u32	%fd36, %r8;
	cvt.rn.f64.u32	%fd37, %r6;
	div.rn.f64 	%fd38, %fd37, %fd36;
	add.f64 	%fd39, %fd3, %fd38;
	add.f64 	%fd40, %fd4, %fd38;
	neg.f64 	%fd41, %fd40;
	fma.rn.f64 	%fd7, %fd5, %fd39, %fd26;
	fma.rn.f64 	%fd8, %fd6, %fd41, %fd29;
	setp.eq.s32	%p7, %r30, 0;
	mov.f64 	%fd68, 0d0000000000000000;
	mov.u32 	%r93, %r55;
	mov.f64 	%fd69, %fd68;
	@%p7 bra 	BB2_10;

BB2_8:
	mul.f64 	%fd11, %fd68, %fd68;
	mul.f64 	%fd12, %fd69, %fd69;
	add.f64 	%fd42, %fd12, %fd11;
	setp.geu.f64	%p8, %fd42, 0d4010000000000000;
	@%p8 bra 	BB2_10;

	sub.f64 	%fd43, %fd12, %fd11;
	add.f64 	%fd13, %fd7, %fd43;
	add.f64 	%fd44, %fd69, %fd69;
	fma.rn.f64 	%fd68, %fd44, %fd68, %fd8;
	add.s32 	%r93, %r93, 1;
	setp.lt.u32	%p9, %r93, %r30;
	mov.f64 	%fd69, %fd13;
	@%p9 bra 	BB2_8;

BB2_10:
	add.s32 	%r99, %r93, %r99;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB2_12;

	add.u64 	%rd16, %SP, 0;
	cvta.to.local.u64 	%rd17, %rd16;
	mul.wide.u32 	%rd18, %r6, 4;
	add.s64 	%rd19, %rd17, %rd18;
	st.local.u32 	[%rd19], %r93;

BB2_12:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r58, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r13, %r8, 1;
	setp.eq.s32	%p16, %r6, %r13;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r89, %r6, 1;
	mov.u32 	%r98, %r8;
	@!%p17 bra 	BB2_26;
	bra.uni 	BB2_13;

BB2_13:
	div.u32 	%r59, %r99, %r89;
	cvt.rn.f64.u32	%fd15, %r59;
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd20;
	setp.eq.s32	%p18, %r6, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	@%p18 bra 	BB2_22;

	and.b32  	%r15, %r6, 3;
	setp.eq.s32	%p19, %r15, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	mov.u32 	%r97, 0;
	@%p19 bra 	BB2_20;

	setp.eq.s32	%p20, %r15, 1;
	mov.f64 	%fd71, 0d0000000000000000;
	mov.u32 	%r95, 0;
	@%p20 bra 	BB2_19;

	setp.eq.s32	%p21, %r15, 2;
	mov.f64 	%fd70, 0d0000000000000000;
	mov.u32 	%r94, 0;
	@%p21 bra 	BB2_18;

	ld.local.u32 	%r64, [%rd1];
	cvt.rn.f64.u32	%fd49, %r64;
	sub.f64 	%fd50, %fd49, %fd15;
	fma.rn.f64 	%fd70, %fd50, %fd50, 0d0000000000000000;
	mov.u32 	%r94, 1;

BB2_18:
	mul.wide.u32 	%rd23, %r94, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.local.u32 	%r65, [%rd24];
	cvt.rn.f64.u32	%fd51, %r65;
	sub.f64 	%fd52, %fd51, %fd15;
	fma.rn.f64 	%fd71, %fd52, %fd52, %fd70;
	add.s32 	%r95, %r94, 1;

BB2_19:
	mul.wide.u32 	%rd27, %r95, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.local.u32 	%r66, [%rd28];
	cvt.rn.f64.u32	%fd53, %r66;
	sub.f64 	%fd54, %fd53, %fd15;
	fma.rn.f64 	%fd74, %fd54, %fd54, %fd71;
	add.s32 	%r97, %r95, 1;

BB2_20:
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB2_22;

BB2_21:
	mul.wide.u32 	%rd29, %r97, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.local.u32 	%r67, [%rd30];
	cvt.rn.f64.u32	%fd55, %r67;
	sub.f64 	%fd56, %fd55, %fd15;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd74;
	add.s32 	%r68, %r97, 1;
	mul.wide.u32 	%rd31, %r68, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.local.u32 	%r69, [%rd32];
	cvt.rn.f64.u32	%fd58, %r69;
	sub.f64 	%fd59, %fd58, %fd15;
	fma.rn.f64 	%fd60, %fd59, %fd59, %fd57;
	add.s32 	%r70, %r97, 2;
	mul.wide.u32 	%rd33, %r70, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.local.u32 	%r71, [%rd34];
	cvt.rn.f64.u32	%fd61, %r71;
	sub.f64 	%fd62, %fd61, %fd15;
	fma.rn.f64 	%fd63, %fd62, %fd62, %fd60;
	add.s32 	%r72, %r97, 3;
	mul.wide.u32 	%rd35, %r72, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r73, [%rd36];
	cvt.rn.f64.u32	%fd64, %r73;
	sub.f64 	%fd65, %fd64, %fd15;
	fma.rn.f64 	%fd74, %fd65, %fd65, %fd63;
	add.s32 	%r97, %r97, 4;
	setp.lt.u32	%p23, %r97, %r6;
	@%p23 bra 	BB2_21;

BB2_22:
	add.s32 	%r74, %r6, -1;
	cvt.rn.f64.u32	%fd66, %r74;
	div.rn.f64 	%fd67, %fd74, %fd66;
	div.rn.f64 	%fd25, %fd67, %fd15;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB2_24;

	// inline asm
	activemask.b32 %r75;
	// inline asm
	ld.local.v2.u32 	{%r77, %r78}, [%rd1];
	setp.eq.s32	%p25, %r77, %r78;
	vote.sync.all.pred 	%p26, %p25, %r75;
	mov.u32 	%r98, 2;
	@%p26 bra 	BB2_26;

BB2_24:
	// inline asm
	activemask.b32 %r82;
	// inline asm
	setp.lt.f64	%p27, %fd25, 0d3F847AE140000000;
	vote.sync.all.pred 	%p28, %p27, %r82;
	mov.u32 	%r98, %r89;
	@%p28 bra 	BB2_26;

	// inline asm
	activemask.b32 %r84;
	// inline asm
	setp.le.f64	%p29, %fd25, 0d3FF0000000000000;
	vote.sync.all.pred 	%p30, %p29, %r84;
	setp.ge.u32	%p31, %r6, %r13;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r98, %r89, %r8, %p32;

BB2_26:
	setp.lt.u32	%p33, %r89, %r98;
	@%p33 bra 	BB2_7;

BB2_27:
	mul.lo.s32 	%r86, %r5, %r27;
	cvt.u64.u32	%rd37, %r86;
	cvta.to.global.u64 	%rd38, %rd3;
	add.s64 	%rd39, %rd38, %rd37;
	mul.wide.u32 	%rd40, %r4, 8;
	add.s64 	%rd41, %rd39, %rd40;
	div.u32 	%r87, %r99, %r98;
	st.global.u32 	[%rd41], %r87;
	cvt.rn.f32.u32	%f1, %r98;
	st.global.f32 	[%rd41+4], %f1;
	setp.gt.f32	%p34, %f1, 0f00000000;
	@%p34 bra 	BB2_29;

	mov.u64 	%rd42, $str3;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, $str2;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r88, 192;
	mov.u64 	%rd46, 0;
	mov.u64 	%rd47, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd43;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd45;
	.param .b32 param2;
	st.param.b32	[param2+0], %r88;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd46;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd47;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_29:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<65>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<173>;
	.reg .b32 	%r<139>;
	.reg .b64 	%rd<66>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r38, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r40, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r39, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f49, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f48, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f47, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f46, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r41, [fractalRenderAdvancedFloat_param_4];
	ld.param.u32 	%r125, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r43, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f53, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f52, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f51, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f50, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd4, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r44, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r46, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r45, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, $str2;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r47, 65;
	mov.u64 	%rd9, 0;
	mov.u64 	%rd10, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r48, %tid.x;
	mov.u32 	%r49, %tid.y;
	mad.lo.s32 	%r50, %r1, %r49, %r48;
	shl.b32 	%r51, %r1, 2;
	and.b32  	%r52, %r50, 15;
	rem.u32 	%r53, %r50, %r51;
	sub.s32 	%r54, %r53, %r52;
	shr.u32 	%r55, %r54, 2;
	and.b32  	%r56, %r50, 3;
	add.s32 	%r57, %r55, %r56;
	div.u32 	%r58, %r50, %r51;
	shl.b32 	%r59, %r58, 2;
	bfe.u32 	%r60, %r50, 2, 2;
	add.s32 	%r61, %r59, %r60;
	mov.u32 	%r62, %ctaid.x;
	mad.lo.s32 	%r4, %r62, %r1, %r57;
	mov.u32 	%r63, %ctaid.y;
	mov.u32 	%r64, %ntid.y;
	mad.lo.s32 	%r5, %r63, %r64, %r61;
	setp.lt.u32	%p2, %r4, %r39;
	setp.lt.u32	%p3, %r5, %r40;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB3_50;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r66, %r43, 8;
	setp.eq.s32	%p5, %r66, 0;
	mov.u16 	%rs5, 0;
	@%p5 bra 	BB3_10;

	cvt.rn.f32.u32	%f55, %r4;
	sub.f32 	%f56, %f52, %f50;
	sub.f32 	%f57, %f48, %f46;
	div.rn.f32 	%f58, %f57, %f56;
	sub.f32 	%f59, %f53, %f51;
	sub.f32 	%f60, %f49, %f47;
	div.rn.f32 	%f61, %f60, %f59;
	sub.f32 	%f62, %f46, %f50;
	div.rn.f32 	%f63, %f62, %f57;
	sub.f32 	%f64, %f53, %f49;
	div.rn.f32 	%f65, %f64, %f60;
	cvt.rn.f32.u32	%f66, %r39;
	mul.f32 	%f67, %f66, %f63;
	cvt.rn.f32.u32	%f68, %r40;
	mul.f32 	%f69, %f68, %f65;
	cvt.rn.f32.u32	%f70, %r5;
	fma.rn.f32 	%f5, %f55, %f58, %f67;
	fma.rn.f32 	%f6, %f70, %f61, %f69;
	abs.f32 	%f71, %f5;
	mov.b32 	 %r67, %f5;
	and.b32  	%r68, %r67, -2147483648;
	or.b32  	%r69, %r68, 1056964608;
	mov.b32 	 %f72, %r69;
	add.f32 	%f73, %f5, %f72;
	cvt.rzi.f32.f32	%f74, %f73;
	setp.gt.f32	%p6, %f71, 0f4B000000;
	selp.f32	%f161, %f5, %f74, %p6;
	setp.geu.f32	%p7, %f71, 0f3F000000;
	@%p7 bra 	BB3_6;

	cvt.rzi.f32.f32	%f161, %f5;

BB3_6:
	cvt.rzi.s32.f32	%r6, %f161;
	mov.b32 	 %r70, %f6;
	and.b32  	%r71, %r70, -2147483648;
	or.b32  	%r72, %r71, 1056964608;
	mov.b32 	 %f75, %r72;
	add.f32 	%f76, %f6, %f75;
	cvt.rzi.f32.f32	%f77, %f76;
	abs.f32 	%f78, %f6;
	setp.gt.f32	%p8, %f78, 0f4B000000;
	selp.f32	%f162, %f6, %f77, %p8;
	setp.geu.f32	%p9, %f78, 0f3F000000;
	@%p9 bra 	BB3_8;

	cvt.rzi.f32.f32	%f162, %f6;

BB3_8:
	setp.lt.u32	%p10, %r6, %r39;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f32	%r7, %f162;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r40;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB3_10;
	bra.uni 	BB3_9;

BB3_9:
	cvta.to.global.u64 	%rd11, %rd4;
	mul.lo.s32 	%r74, %r7, %r44;
	cvt.u64.u32	%rd12, %r74;
	add.s64 	%rd13, %rd11, %rd12;
	mul.wide.u32 	%rd14, %r6, 8;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r124, [%rd15];
	ld.global.f32 	%f163, [%rd15+4];
	mov.u16 	%rs5, 1;

BB3_10:
	and.b32  	%r75, %r43, 4;
	setp.eq.s32	%p17, %r75, 0;
	@%p17 bra 	BB3_17;

	and.b32  	%r76, %r4, -8;
	cvt.rn.f32.u32	%f80, %r76;
	and.b32  	%r77, %r5, -4;
	cvt.rn.f32.u32	%f81, %r77;
	cvt.rn.f32.u32	%f82, %r45;
	sub.f32 	%f83, %f82, %f80;
	cvt.rn.f32.u32	%f84, %r46;
	sub.f32 	%f85, %f84, %f81;
	mul.f32 	%f86, %f85, %f85;
	fma.rn.f32 	%f87, %f83, %f83, %f86;
	sqrt.rn.f32 	%f88, %f87;
	mul.f32 	%f89, %f88, 0f3CD94079;
	ld.global.f32 	%f90, [screenDistance];
	div.rn.f32 	%f15, %f89, %f90;
	abs.f32 	%f16, %f15;
	setp.leu.f32	%p18, %f16, 0f3F800000;
	mov.f32 	%f164, %f16;
	@%p18 bra 	BB3_13;

	rcp.rn.f32 	%f164, %f16;

BB3_13:
	mul.rn.f32 	%f91, %f164, %f164;
	mov.f32 	%f92, 0fC0B59883;
	mov.f32 	%f93, 0fBF52C7EA;
	fma.rn.f32 	%f94, %f91, %f93, %f92;
	mov.f32 	%f95, 0fC0D21907;
	fma.rn.f32 	%f96, %f94, %f91, %f95;
	mul.f32 	%f97, %f91, %f96;
	mul.f32 	%f98, %f164, %f97;
	add.f32 	%f99, %f91, 0f41355DC0;
	mov.f32 	%f100, 0f41E6BD60;
	fma.rn.f32 	%f101, %f99, %f91, %f100;
	mov.f32 	%f102, 0f419D92C8;
	fma.rn.f32 	%f103, %f101, %f91, %f102;
	rcp.rn.f32 	%f104, %f103;
	fma.rn.f32 	%f105, %f98, %f104, %f164;
	mov.f32 	%f106, 0f3FC90FDB;
	sub.f32 	%f107, %f106, %f105;
	setp.gt.f32	%p19, %f16, 0f3F800000;
	selp.f32	%f108, %f107, %f105, %p19;
	mov.b32 	 %r78, %f108;
	mov.b32 	 %r79, %f15;
	and.b32  	%r80, %r79, -2147483648;
	or.b32  	%r81, %r78, %r80;
	mov.b32 	 %f109, %r81;
	setp.gtu.f32	%p20, %f16, 0f7F800000;
	selp.f32	%f110, %f108, %f109, %p20;
	mul.f32 	%f111, %f110, 0f43340000;
	div.rn.f32 	%f19, %f111, 0f40490FDB;
	setp.ge.f32	%p21, %f19, 0f00000000;
	@%p21 bra 	BB3_15;

	mov.u64 	%rd16, $str6;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, $str2;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r82, 233;
	mov.u64 	%rd20, 0;
	mov.u64 	%rd21, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r82;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd20;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd21;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_15:
	fma.rn.f32 	%f112, %f19, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f19, 0f40B00000;
	selp.f32	%f113, %f112, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f114, %r125;
	mul.f32 	%f115, %f114, %f113;
	cvt.rzi.u32.f32	%r125, %f115;
	setp.gtu.f32	%p23, %f19, 0f42700000;
	@%p23 bra 	BB3_17;

	mov.u32 	%r83, 1;
	max.u32 	%r125, %r83, %r125;

BB3_17:
	setp.eq.f32	%p24, %f163, 0f00000000;
	setp.eq.s16	%p25, %rs5, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r125, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r125, %p28;
	cvt.rn.f32.u32	%f116, %r39;
	sub.f32 	%f117, %f48, %f46;
	div.rn.f32 	%f20, %f117, %f116;
	cvt.rn.f32.u32	%f118, %r40;
	sub.f32 	%f119, %f49, %f47;
	div.rn.f32 	%f21, %f119, %f118;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB3_19;

	mov.u64 	%rd22, $str9;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, $str2;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r84, 110;
	mov.u64 	%rd26, 0;
	mov.u64 	%rd27, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd25;
	.param .b32 param2;
	st.param.b32	[param2+0], %r84;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r136, 0;
	mov.u32 	%r135, %r136;
	@%p30 bra 	BB3_41;

	cvt.rn.f32.u32	%f22, %r4;
	cvt.rn.f32.u32	%f23, %r5;
	mov.u32 	%r88, 0;
	mov.u32 	%r126, %r88;
	mov.u32 	%r136, %r88;
	mov.u32 	%r135, %r13;

BB3_21:
	mov.u32 	%r16, %r135;
	mov.u32 	%r14, %r126;
	cvt.rn.f32.u32	%f122, %r16;
	cvt.rn.f32.u32	%f123, %r14;
	div.rn.f32 	%f124, %f123, %f122;
	add.f32 	%f125, %f22, %f124;
	add.f32 	%f126, %f23, %f124;
	neg.f32 	%f127, %f126;
	fma.rn.f32 	%f24, %f20, %f125, %f46;
	fma.rn.f32 	%f25, %f21, %f127, %f49;
	setp.eq.s32	%p31, %r41, 0;
	mov.f32 	%f165, 0f00000000;
	mov.u32 	%r130, %r88;
	mov.f32 	%f166, %f165;
	@%p31 bra 	BB3_24;

BB3_22:
	mul.f32 	%f28, %f165, %f165;
	mul.f32 	%f29, %f166, %f166;
	add.f32 	%f128, %f29, %f28;
	setp.geu.f32	%p32, %f128, 0f40800000;
	@%p32 bra 	BB3_24;

	sub.f32 	%f129, %f29, %f28;
	add.f32 	%f30, %f24, %f129;
	add.f32 	%f130, %f166, %f166;
	fma.rn.f32 	%f165, %f130, %f165, %f25;
	add.s32 	%r130, %r130, 1;
	setp.lt.u32	%p33, %r130, %r41;
	mov.f32 	%f166, %f30;
	@%p33 bra 	BB3_22;

BB3_24:
	add.s32 	%r136, %r130, %r136;
	setp.gt.u32	%p34, %r14, 9;
	@%p34 bra 	BB3_26;

	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r14, 4;
	add.s64 	%rd31, %rd29, %rd30;
	st.local.u32 	[%rd31], %r130;

BB3_26:
	setp.lt.u32	%p35, %r14, 10;
	and.b32  	%r91, %r43, 1;
	setp.eq.b32	%p36, %r91, 1;
	setp.ne.s32	%p37, %r14, 0;
	and.pred  	%p38, %p35, %p37;
	and.pred  	%p39, %p38, %p36;
	shr.u32 	%r21, %r16, 1;
	setp.eq.s32	%p40, %r14, %r21;
	or.pred  	%p41, %p39, %p40;
	add.s32 	%r126, %r14, 1;
	mov.u32 	%r135, %r16;
	@!%p41 bra 	BB3_40;
	bra.uni 	BB3_27;

BB3_27:
	div.u32 	%r92, %r136, %r126;
	cvt.rn.f32.u32	%f32, %r92;
	add.u64 	%rd32, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd32;
	setp.eq.s32	%p42, %r14, 0;
	mov.f32 	%f171, 0f00000000;
	@%p42 bra 	BB3_36;

	and.b32  	%r23, %r14, 3;
	setp.eq.s32	%p43, %r23, 0;
	mov.f32 	%f171, 0f00000000;
	mov.u32 	%r134, 0;
	@%p43 bra 	BB3_34;

	setp.eq.s32	%p44, %r23, 1;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r132, 0;
	@%p44 bra 	BB3_33;

	setp.eq.s32	%p45, %r23, 2;
	mov.f32 	%f167, 0f00000000;
	mov.u32 	%r131, 0;
	@%p45 bra 	BB3_32;

	ld.local.u32 	%r97, [%rd1];
	cvt.rn.f32.u32	%f135, %r97;
	sub.f32 	%f136, %f135, %f32;
	fma.rn.f32 	%f167, %f136, %f136, 0f00000000;
	mov.u32 	%r131, 1;

BB3_32:
	mul.wide.u32 	%rd35, %r131, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r98, [%rd36];
	cvt.rn.f32.u32	%f137, %r98;
	sub.f32 	%f138, %f137, %f32;
	fma.rn.f32 	%f168, %f138, %f138, %f167;
	add.s32 	%r132, %r131, 1;

BB3_33:
	mul.wide.u32 	%rd39, %r132, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.local.u32 	%r99, [%rd40];
	cvt.rn.f32.u32	%f139, %r99;
	sub.f32 	%f140, %f139, %f32;
	fma.rn.f32 	%f171, %f140, %f140, %f168;
	add.s32 	%r134, %r132, 1;

BB3_34:
	setp.lt.u32	%p46, %r14, 4;
	@%p46 bra 	BB3_36;

BB3_35:
	mul.wide.u32 	%rd41, %r134, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.local.u32 	%r100, [%rd42];
	cvt.rn.f32.u32	%f141, %r100;
	sub.f32 	%f142, %f141, %f32;
	fma.rn.f32 	%f143, %f142, %f142, %f171;
	add.s32 	%r101, %r134, 1;
	mul.wide.u32 	%rd43, %r101, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.local.u32 	%r102, [%rd44];
	cvt.rn.f32.u32	%f144, %r102;
	sub.f32 	%f145, %f144, %f32;
	fma.rn.f32 	%f146, %f145, %f145, %f143;
	add.s32 	%r103, %r134, 2;
	mul.wide.u32 	%rd45, %r103, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.local.u32 	%r104, [%rd46];
	cvt.rn.f32.u32	%f147, %r104;
	sub.f32 	%f148, %f147, %f32;
	fma.rn.f32 	%f149, %f148, %f148, %f146;
	add.s32 	%r105, %r134, 3;
	mul.wide.u32 	%rd47, %r105, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.local.u32 	%r106, [%rd48];
	cvt.rn.f32.u32	%f150, %r106;
	sub.f32 	%f151, %f150, %f32;
	fma.rn.f32 	%f171, %f151, %f151, %f149;
	add.s32 	%r134, %r134, 4;
	setp.lt.u32	%p47, %r134, %r14;
	@%p47 bra 	BB3_35;

BB3_36:
	add.s32 	%r107, %r14, -1;
	cvt.rn.f32.u32	%f152, %r107;
	div.rn.f32 	%f153, %f171, %f152;
	div.rn.f32 	%f42, %f153, %f32;
	setp.ne.s32	%p48, %r14, 1;
	@%p48 bra 	BB3_38;

	// inline asm
	activemask.b32 %r108;
	// inline asm
	ld.local.v2.u32 	{%r110, %r111}, [%rd1];
	setp.eq.s32	%p49, %r110, %r111;
	vote.sync.all.pred 	%p50, %p49, %r108;
	mov.u32 	%r135, 2;
	@%p50 bra 	BB3_40;

BB3_38:
	// inline asm
	activemask.b32 %r115;
	// inline asm
	setp.lt.f32	%p51, %f42, 0f3C23D70A;
	vote.sync.all.pred 	%p52, %p51, %r115;
	mov.u32 	%r135, %r126;
	@%p52 bra 	BB3_40;

	// inline asm
	activemask.b32 %r117;
	// inline asm
	setp.le.f32	%p53, %f42, 0f3F800000;
	vote.sync.all.pred 	%p54, %p53, %r117;
	setp.ge.u32	%p55, %r14, %r21;
	and.pred  	%p56, %p54, %p55;
	selp.b32	%r135, %r126, %r16, %p56;

BB3_40:
	setp.lt.u32	%p57, %r126, %r135;
	@%p57 bra 	BB3_21;

BB3_41:
	div.u32 	%r138, %r136, %r135;
	setp.ne.s16	%p58, %rs5, 0;
	setp.ne.s32	%p59, %r135, 0;
	or.pred  	%p60, %p59, %p58;
	@%p60 bra 	BB3_43;

	mov.u64 	%rd49, $str7;
	cvta.global.u64 	%rd50, %rd49;
	mov.u64 	%rd51, $str2;
	cvta.global.u64 	%rd52, %rd51;
	mov.u32 	%r119, 287;
	mov.u64 	%rd53, 0;
	mov.u64 	%rd54, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd50;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd52;
	.param .b32 param2;
	st.param.b32	[param2+0], %r119;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd53;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd54;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_43:
	@%p25 bra 	BB3_47;

	setp.eq.s32	%p62, %r135, 0;
	@%p62 bra 	BB3_45;

	and.b32  	%r120, %r43, 16;
	setp.eq.s32	%p63, %r120, 0;
	mul.f32 	%f154, %f163, 0f3B808081;
	selp.f32	%f155, %f163, %f154, %p63;
	cvt.rn.f32.u32	%f156, %r135;
	add.f32 	%f163, %f155, %f156;
	cvt.rn.f32.u32	%f157, %r124;
	mul.lo.s32 	%r121, %r138, %r135;
	cvt.rn.f32.u32	%f158, %r121;
	fma.rn.f32 	%f159, %f157, %f155, %f158;
	div.rn.f32 	%f160, %f159, %f163;
	cvt.rzi.u32.f32	%r138, %f160;
	bra.uni 	BB3_48;

BB3_47:
	cvt.rn.f32.u32	%f163, %r135;
	bra.uni 	BB3_48;

BB3_45:
	mov.u32 	%r138, %r124;

BB3_48:
	mul.lo.s32 	%r122, %r5, %r38;
	cvt.u64.u32	%rd55, %r122;
	cvta.to.global.u64 	%rd56, %rd3;
	add.s64 	%rd57, %rd56, %rd55;
	mul.wide.u32 	%rd58, %r4, 8;
	add.s64 	%rd59, %rd57, %rd58;
	st.global.u32 	[%rd59], %r138;
	st.global.f32 	[%rd59+4], %f163;
	setp.gt.f32	%p64, %f163, 0f00000000;
	@%p64 bra 	BB3_50;

	mov.u64 	%rd60, $str8;
	cvta.global.u64 	%rd61, %rd60;
	mov.u64 	%rd62, $str2;
	cvta.global.u64 	%rd63, %rd62;
	mov.u32 	%r123, 309;
	mov.u64 	%rd64, 0;
	mov.u64 	%rd65, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd61;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd63;
	.param .b32 param2;
	st.param.b32	[param2+0], %r123;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd64;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd65;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_50:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<65>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<59>;
	.reg .b32 	%r<143>;
	.reg .f64 	%fd<113>;
	.reg .b64 	%rd<66>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r38, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r40, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r39, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd39, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd38, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd37, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd36, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r41, [fractalRenderAdvancedDouble_param_4];
	ld.param.u32 	%r129, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r43, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd43, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd40, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd4, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r44, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r46, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r45, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, $str2;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r47, 65;
	mov.u64 	%rd9, 0;
	mov.u64 	%rd10, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r47;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_2:
	mov.u32 	%r48, %tid.x;
	mov.u32 	%r49, %tid.y;
	mad.lo.s32 	%r50, %r1, %r49, %r48;
	shl.b32 	%r51, %r1, 2;
	and.b32  	%r52, %r50, 15;
	rem.u32 	%r53, %r50, %r51;
	sub.s32 	%r54, %r53, %r52;
	shr.u32 	%r55, %r54, 2;
	and.b32  	%r56, %r50, 3;
	add.s32 	%r57, %r55, %r56;
	div.u32 	%r58, %r50, %r51;
	shl.b32 	%r59, %r58, 2;
	bfe.u32 	%r60, %r50, 2, 2;
	add.s32 	%r61, %r59, %r60;
	mov.u32 	%r62, %ctaid.x;
	mad.lo.s32 	%r4, %r62, %r1, %r57;
	mov.u32 	%r63, %ctaid.y;
	mov.u32 	%r64, %ntid.y;
	mad.lo.s32 	%r5, %r63, %r64, %r61;
	setp.lt.u32	%p2, %r4, %r39;
	setp.lt.u32	%p3, %r5, %r40;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_50;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r66, %r43, 8;
	setp.eq.s32	%p5, %r66, 0;
	mov.u16 	%rs5, 0;
	@%p5 bra 	BB4_10;

	cvt.rn.f64.u32	%fd44, %r4;
	sub.f64 	%fd45, %fd42, %fd40;
	sub.f64 	%fd46, %fd38, %fd36;
	div.rn.f64 	%fd47, %fd46, %fd45;
	sub.f64 	%fd48, %fd43, %fd41;
	sub.f64 	%fd49, %fd39, %fd37;
	div.rn.f64 	%fd50, %fd49, %fd48;
	sub.f64 	%fd51, %fd36, %fd40;
	div.rn.f64 	%fd52, %fd51, %fd46;
	sub.f64 	%fd53, %fd43, %fd39;
	div.rn.f64 	%fd54, %fd53, %fd49;
	cvt.rn.f64.u32	%fd55, %r39;
	mul.f64 	%fd56, %fd55, %fd52;
	cvt.rn.f64.u32	%fd57, %r40;
	mul.f64 	%fd58, %fd57, %fd54;
	cvt.rn.f64.u32	%fd59, %r5;
	fma.rn.f64 	%fd104, %fd44, %fd47, %fd56;
	fma.rn.f64 	%fd105, %fd59, %fd50, %fd58;
	abs.f64 	%fd7, %fd104;
	setp.ge.f64	%p6, %fd7, 0d4330000000000000;
	@%p6 bra 	BB4_6;

	add.f64 	%fd60, %fd7, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd61, %fd60;
	setp.lt.f64	%p7, %fd7, 0d3FE0000000000000;
	selp.f64	%fd62, 0d0000000000000000, %fd61, %p7;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r67, %temp}, %fd62;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r68}, %fd62;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r69}, %fd104;
	}
	and.b32  	%r70, %r69, -2147483648;
	or.b32  	%r71, %r68, %r70;
	mov.b64 	%fd104, {%r67, %r71};

BB4_6:
	cvt.rzi.s32.f64	%r6, %fd104;
	abs.f64 	%fd10, %fd105;
	setp.ge.f64	%p8, %fd10, 0d4330000000000000;
	@%p8 bra 	BB4_8;

	add.f64 	%fd63, %fd10, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd64, %fd63;
	setp.lt.f64	%p9, %fd10, 0d3FE0000000000000;
	selp.f64	%fd65, 0d0000000000000000, %fd64, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r72, %temp}, %fd65;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r73}, %fd65;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r74}, %fd105;
	}
	and.b32  	%r75, %r74, -2147483648;
	or.b32  	%r76, %r73, %r75;
	mov.b64 	%fd105, {%r72, %r76};

BB4_8:
	setp.lt.u32	%p10, %r6, %r39;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f64	%r7, %fd105;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r40;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB4_10;
	bra.uni 	BB4_9;

BB4_9:
	cvta.to.global.u64 	%rd11, %rd4;
	mul.lo.s32 	%r78, %r7, %r44;
	cvt.u64.u32	%rd12, %r78;
	add.s64 	%rd13, %rd11, %rd12;
	mul.wide.u32 	%rd14, %r6, 8;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r128, [%rd15];
	ld.global.f32 	%f56, [%rd15+4];
	mov.u16 	%rs5, 1;

BB4_10:
	and.b32  	%r79, %r43, 4;
	setp.eq.s32	%p17, %r79, 0;
	@%p17 bra 	BB4_17;

	and.b32  	%r80, %r4, -8;
	cvt.rn.f32.u32	%f13, %r80;
	and.b32  	%r81, %r5, -4;
	cvt.rn.f32.u32	%f14, %r81;
	cvt.rn.f32.u32	%f15, %r45;
	sub.f32 	%f16, %f15, %f13;
	cvt.rn.f32.u32	%f17, %r46;
	sub.f32 	%f18, %f17, %f14;
	mul.f32 	%f19, %f18, %f18;
	fma.rn.f32 	%f20, %f16, %f16, %f19;
	sqrt.rn.f32 	%f21, %f20;
	mul.f32 	%f22, %f21, 0f3CD94079;
	ld.global.f32 	%f23, [screenDistance];
	div.rn.f32 	%f3, %f22, %f23;
	abs.f32 	%f4, %f3;
	setp.leu.f32	%p18, %f4, 0f3F800000;
	mov.f32 	%f57, %f4;
	@%p18 bra 	BB4_13;

	rcp.rn.f32 	%f57, %f4;

BB4_13:
	mul.rn.f32 	%f24, %f57, %f57;
	mov.f32 	%f25, 0fC0B59883;
	mov.f32 	%f26, 0fBF52C7EA;
	fma.rn.f32 	%f27, %f24, %f26, %f25;
	mov.f32 	%f28, 0fC0D21907;
	fma.rn.f32 	%f29, %f27, %f24, %f28;
	mul.f32 	%f30, %f24, %f29;
	mul.f32 	%f31, %f57, %f30;
	add.f32 	%f32, %f24, 0f41355DC0;
	mov.f32 	%f33, 0f41E6BD60;
	fma.rn.f32 	%f34, %f32, %f24, %f33;
	mov.f32 	%f35, 0f419D92C8;
	fma.rn.f32 	%f36, %f34, %f24, %f35;
	rcp.rn.f32 	%f37, %f36;
	fma.rn.f32 	%f38, %f31, %f37, %f57;
	mov.f32 	%f39, 0f3FC90FDB;
	sub.f32 	%f40, %f39, %f38;
	setp.gt.f32	%p19, %f4, 0f3F800000;
	selp.f32	%f41, %f40, %f38, %p19;
	mov.b32 	 %r82, %f41;
	mov.b32 	 %r83, %f3;
	and.b32  	%r84, %r83, -2147483648;
	or.b32  	%r85, %r82, %r84;
	mov.b32 	 %f42, %r85;
	setp.gtu.f32	%p20, %f4, 0f7F800000;
	selp.f32	%f43, %f41, %f42, %p20;
	mul.f32 	%f44, %f43, 0f43340000;
	div.rn.f32 	%f7, %f44, 0f40490FDB;
	setp.ge.f32	%p21, %f7, 0f00000000;
	@%p21 bra 	BB4_15;

	mov.u64 	%rd16, $str6;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, $str2;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r86, 233;
	mov.u64 	%rd20, 0;
	mov.u64 	%rd21, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r86;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd20;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd21;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_15:
	fma.rn.f32 	%f45, %f7, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f7, 0f40B00000;
	selp.f32	%f46, %f45, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f47, %r129;
	mul.f32 	%f48, %f47, %f46;
	cvt.rzi.u32.f32	%r129, %f48;
	setp.gtu.f32	%p23, %f7, 0f42700000;
	@%p23 bra 	BB4_17;

	mov.u32 	%r87, 1;
	max.u32 	%r129, %r87, %r129;

BB4_17:
	setp.eq.f32	%p24, %f56, 0f00000000;
	setp.eq.s16	%p25, %rs5, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r129, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r129, %p28;
	cvt.rn.f64.u32	%fd66, %r39;
	sub.f64 	%fd67, %fd38, %fd36;
	div.rn.f64 	%fd13, %fd67, %fd66;
	cvt.rn.f64.u32	%fd68, %r40;
	sub.f64 	%fd69, %fd39, %fd37;
	div.rn.f64 	%fd14, %fd69, %fd68;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB4_19;

	mov.u64 	%rd22, $str9;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, $str2;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r88, 110;
	mov.u64 	%rd26, 0;
	mov.u64 	%rd27, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd25;
	.param .b32 param2;
	st.param.b32	[param2+0], %r88;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r140, 0;
	mov.u32 	%r139, %r140;
	@%p30 bra 	BB4_41;

	cvt.rn.f64.u32	%fd15, %r4;
	cvt.rn.f64.u32	%fd16, %r5;
	mov.u32 	%r92, 0;
	mov.u32 	%r130, %r92;
	mov.u32 	%r140, %r92;
	mov.u32 	%r139, %r13;

BB4_21:
	mov.u32 	%r16, %r139;
	mov.u32 	%r14, %r130;
	cvt.rn.f64.u32	%fd72, %r16;
	cvt.rn.f64.u32	%fd73, %r14;
	div.rn.f64 	%fd74, %fd73, %fd72;
	add.f64 	%fd75, %fd15, %fd74;
	add.f64 	%fd76, %fd16, %fd74;
	neg.f64 	%fd77, %fd76;
	fma.rn.f64 	%fd17, %fd13, %fd75, %fd36;
	fma.rn.f64 	%fd18, %fd14, %fd77, %fd39;
	setp.eq.s32	%p31, %r41, 0;
	mov.f64 	%fd106, 0d0000000000000000;
	mov.u32 	%r134, %r92;
	mov.f64 	%fd107, %fd106;
	@%p31 bra 	BB4_24;

BB4_22:
	mul.f64 	%fd21, %fd106, %fd106;
	mul.f64 	%fd22, %fd107, %fd107;
	add.f64 	%fd78, %fd22, %fd21;
	setp.geu.f64	%p32, %fd78, 0d4010000000000000;
	@%p32 bra 	BB4_24;

	sub.f64 	%fd79, %fd22, %fd21;
	add.f64 	%fd23, %fd17, %fd79;
	add.f64 	%fd80, %fd107, %fd107;
	fma.rn.f64 	%fd106, %fd80, %fd106, %fd18;
	add.s32 	%r134, %r134, 1;
	setp.lt.u32	%p33, %r134, %r41;
	mov.f64 	%fd107, %fd23;
	@%p33 bra 	BB4_22;

BB4_24:
	add.s32 	%r140, %r134, %r140;
	setp.gt.u32	%p34, %r14, 9;
	@%p34 bra 	BB4_26;

	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r14, 4;
	add.s64 	%rd31, %rd29, %rd30;
	st.local.u32 	[%rd31], %r134;

BB4_26:
	setp.lt.u32	%p35, %r14, 10;
	and.b32  	%r95, %r43, 1;
	setp.eq.b32	%p36, %r95, 1;
	setp.ne.s32	%p37, %r14, 0;
	and.pred  	%p38, %p35, %p37;
	and.pred  	%p39, %p38, %p36;
	shr.u32 	%r21, %r16, 1;
	setp.eq.s32	%p40, %r14, %r21;
	or.pred  	%p41, %p39, %p40;
	add.s32 	%r130, %r14, 1;
	mov.u32 	%r139, %r16;
	@!%p41 bra 	BB4_40;
	bra.uni 	BB4_27;

BB4_27:
	div.u32 	%r96, %r140, %r130;
	cvt.rn.f64.u32	%fd25, %r96;
	add.u64 	%rd32, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd32;
	setp.eq.s32	%p42, %r14, 0;
	mov.f64 	%fd112, 0d0000000000000000;
	@%p42 bra 	BB4_36;

	and.b32  	%r23, %r14, 3;
	setp.eq.s32	%p43, %r23, 0;
	mov.f64 	%fd112, 0d0000000000000000;
	mov.u32 	%r138, 0;
	@%p43 bra 	BB4_34;

	setp.eq.s32	%p44, %r23, 1;
	mov.f64 	%fd109, 0d0000000000000000;
	mov.u32 	%r136, 0;
	@%p44 bra 	BB4_33;

	setp.eq.s32	%p45, %r23, 2;
	mov.f64 	%fd108, 0d0000000000000000;
	mov.u32 	%r135, 0;
	@%p45 bra 	BB4_32;

	ld.local.u32 	%r101, [%rd1];
	cvt.rn.f64.u32	%fd85, %r101;
	sub.f64 	%fd86, %fd85, %fd25;
	fma.rn.f64 	%fd108, %fd86, %fd86, 0d0000000000000000;
	mov.u32 	%r135, 1;

BB4_32:
	mul.wide.u32 	%rd35, %r135, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r102, [%rd36];
	cvt.rn.f64.u32	%fd87, %r102;
	sub.f64 	%fd88, %fd87, %fd25;
	fma.rn.f64 	%fd109, %fd88, %fd88, %fd108;
	add.s32 	%r136, %r135, 1;

BB4_33:
	mul.wide.u32 	%rd39, %r136, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.local.u32 	%r103, [%rd40];
	cvt.rn.f64.u32	%fd89, %r103;
	sub.f64 	%fd90, %fd89, %fd25;
	fma.rn.f64 	%fd112, %fd90, %fd90, %fd109;
	add.s32 	%r138, %r136, 1;

BB4_34:
	setp.lt.u32	%p46, %r14, 4;
	@%p46 bra 	BB4_36;

BB4_35:
	mul.wide.u32 	%rd41, %r138, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.local.u32 	%r104, [%rd42];
	cvt.rn.f64.u32	%fd91, %r104;
	sub.f64 	%fd92, %fd91, %fd25;
	fma.rn.f64 	%fd93, %fd92, %fd92, %fd112;
	add.s32 	%r105, %r138, 1;
	mul.wide.u32 	%rd43, %r105, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.local.u32 	%r106, [%rd44];
	cvt.rn.f64.u32	%fd94, %r106;
	sub.f64 	%fd95, %fd94, %fd25;
	fma.rn.f64 	%fd96, %fd95, %fd95, %fd93;
	add.s32 	%r107, %r138, 2;
	mul.wide.u32 	%rd45, %r107, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.local.u32 	%r108, [%rd46];
	cvt.rn.f64.u32	%fd97, %r108;
	sub.f64 	%fd98, %fd97, %fd25;
	fma.rn.f64 	%fd99, %fd98, %fd98, %fd96;
	add.s32 	%r109, %r138, 3;
	mul.wide.u32 	%rd47, %r109, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.local.u32 	%r110, [%rd48];
	cvt.rn.f64.u32	%fd100, %r110;
	sub.f64 	%fd101, %fd100, %fd25;
	fma.rn.f64 	%fd112, %fd101, %fd101, %fd99;
	add.s32 	%r138, %r138, 4;
	setp.lt.u32	%p47, %r138, %r14;
	@%p47 bra 	BB4_35;

BB4_36:
	add.s32 	%r111, %r14, -1;
	cvt.rn.f64.u32	%fd102, %r111;
	div.rn.f64 	%fd103, %fd112, %fd102;
	div.rn.f64 	%fd35, %fd103, %fd25;
	setp.ne.s32	%p48, %r14, 1;
	@%p48 bra 	BB4_38;

	// inline asm
	activemask.b32 %r112;
	// inline asm
	ld.local.v2.u32 	{%r114, %r115}, [%rd1];
	setp.eq.s32	%p49, %r114, %r115;
	vote.sync.all.pred 	%p50, %p49, %r112;
	mov.u32 	%r139, 2;
	@%p50 bra 	BB4_40;

BB4_38:
	// inline asm
	activemask.b32 %r119;
	// inline asm
	setp.lt.f64	%p51, %fd35, 0d3F847AE140000000;
	vote.sync.all.pred 	%p52, %p51, %r119;
	mov.u32 	%r139, %r130;
	@%p52 bra 	BB4_40;

	// inline asm
	activemask.b32 %r121;
	// inline asm
	setp.le.f64	%p53, %fd35, 0d3FF0000000000000;
	vote.sync.all.pred 	%p54, %p53, %r121;
	setp.ge.u32	%p55, %r14, %r21;
	and.pred  	%p56, %p54, %p55;
	selp.b32	%r139, %r130, %r16, %p56;

BB4_40:
	setp.lt.u32	%p57, %r130, %r139;
	@%p57 bra 	BB4_21;

BB4_41:
	div.u32 	%r142, %r140, %r139;
	setp.ne.s16	%p58, %rs5, 0;
	setp.ne.s32	%p59, %r139, 0;
	or.pred  	%p60, %p59, %p58;
	@%p60 bra 	BB4_43;

	mov.u64 	%rd49, $str7;
	cvta.global.u64 	%rd50, %rd49;
	mov.u64 	%rd51, $str2;
	cvta.global.u64 	%rd52, %rd51;
	mov.u32 	%r123, 287;
	mov.u64 	%rd53, 0;
	mov.u64 	%rd54, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd50;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd52;
	.param .b32 param2;
	st.param.b32	[param2+0], %r123;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd53;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd54;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB4_43:
	@%p25 bra 	BB4_47;

	setp.eq.s32	%p62, %r139, 0;
	@%p62 bra 	BB4_45;

	and.b32  	%r124, %r43, 16;
	setp.eq.s32	%p63, %r124, 0;
	mul.f32 	%f49, %f56, 0f3B808081;
	selp.f32	%f50, %f56, %f49, %p63;
	cvt.rn.f32.u32	%f51, %r139;
	add.f32 	%f56, %f50, %f51;
	cvt.rn.f32.u32	%f52, %r128;
	mul.lo.s32 	%r125, %r142, %r139;
	cvt.rn.f32.u32	%f53, %r125;
	fma.rn.f32 	%f54, %f52, %f50, %f53;
	div.rn.f32 	%f55, %f54, %f56;
	cvt.rzi.u32.f32	%r142, %f55;
	bra.uni 	BB4_48;

BB4_47:
	cvt.rn.f32.u32	%f56, %r139;
	bra.uni 	BB4_48;

BB4_45:
	mov.u32 	%r142, %r128;

BB4_48:
	mul.lo.s32 	%r126, %r5, %r38;
	cvt.u64.u32	%rd55, %r126;
	cvta.to.global.u64 	%rd56, %rd3;
	add.s64 	%rd57, %rd56, %rd55;
	mul.wide.u32 	%rd58, %r4, 8;
	add.s64 	%rd59, %rd57, %rd58;
	st.global.u32 	[%rd59], %r142;
	st.global.f32 	[%rd59+4], %f56;
	setp.gt.f32	%p64, %f56, 0f00000000;
	@%p64 bra 	BB4_50;

	mov.u64 	%rd60, $str8;
	cvta.global.u64 	%rd61, %rd60;
	mov.u64 	%rd62, $str2;
	cvta.global.u64 	%rd63, %rd62;
	mov.u32 	%r127, 309;
	mov.u64 	%rd64, 0;
	mov.u64 	%rd65, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd61;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd63;
	.param .b32 param2;
	st.param.b32	[param2+0], %r127;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd64;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd65;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_50:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r7, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r10, [compose_param_5];
	ld.param.u32 	%r11, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.u32 	%r9, [compose_param_9];
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r13, %r12, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.u32	%p1, %r2, %r11;
	setp.ge.u32	%p2, %r1, %r10;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_7;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r18, %r2, %r7;
	cvt.u64.u32	%rd6, %r18;
	add.s64 	%rd7, %rd5, %rd6;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	mul.wide.u32 	%rd8, %r1, 8;
	add.s64 	%rd1, %rd7, %rd8;
	@%p4 bra 	BB5_3;

	ld.global.f32 	%f1, [%rd1+4];
	cvt.rzi.u32.f32	%r19, %f1;
	min.u32 	%r20, %r19, %r9;
	cvt.rn.f32.u32	%f2, %r20;
	cvt.rn.f32.u32	%f3, %r9;
	div.rn.f32 	%f4, %f2, %f3;
	mul.f32 	%f5, %f4, 0f437F0000;
	cvt.rzi.s32.f32	%r21, %f5;
	and.b32  	%r22, %r21, 255;
	prmt.b32 	%r23, %r22, %r22, 30212;
	prmt.b32 	%r24, %r22, %r23, 28756;
	or.b32  	%r32, %r24, -16777216;
	bra.uni 	BB5_6;

BB5_3:
	ld.global.u32 	%r25, [%rd1];
	rem.u32 	%r26, %r25, %r8;
	sub.s32 	%r27, %r8, %r26;
	add.s32 	%r4, %r27, -1;
	setp.lt.u32	%p5, %r4, %r8;
	@%p5 bra 	BB5_5;

	mov.u64 	%rd9, $str10;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str11;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r28, 28;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB5_5:
	shl.b32 	%r29, %r4, 2;
	mov.u32 	%r30, 0;
	suld.b.2d.b32.trap {%r32}, [%rd4, {%r29, %r30}];

BB5_6:
	shl.b32 	%r31, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r31, %r2}], {%r32};

BB5_7:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<46>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r13, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r14, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f10, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r15, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r16, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r20, %r18, %r17, %r19;
	mul.lo.s32 	%r1, %r20, %r16;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.u32 	%r23, %tid.y;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r2, %r24, %r16;
	sub.s32 	%r25, %r14, %r16;
	setp.ge.u32	%p1, %r2, %r25;
	sub.s32 	%r26, %r13, %r16;
	setp.ge.u32	%p2, %r1, %r26;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_14;

	sub.f32 	%f16, %f12, %f10;
	cvt.rn.f32.u32	%f17, %r13;
	div.rn.f32 	%f18, %f16, %f17;
	cvt.rn.f32.u32	%f19, %r14;
	sub.f32 	%f20, %f13, %f11;
	div.rn.f32 	%f21, %f20, %f19;
	cvt.rn.f32.u32	%f22, %r1;
	fma.rn.f32 	%f1, %f22, %f18, %f10;
	cvt.rn.f32.u32	%f23, %r2;
	mul.f32 	%f24, %f23, %f21;
	sub.f32 	%f2, %f13, %f24;
	setp.eq.s32	%p4, %r15, 0;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r41, 0;
	@%p4 bra 	BB6_5;

	mov.f32 	%f30, %f29;

BB6_3:
	mul.f32 	%f5, %f29, %f29;
	mul.f32 	%f6, %f30, %f30;
	add.f32 	%f25, %f6, %f5;
	setp.geu.f32	%p5, %f25, 0f40800000;
	@%p5 bra 	BB6_5;

	sub.f32 	%f26, %f6, %f5;
	add.f32 	%f7, %f1, %f26;
	add.f32 	%f27, %f30, %f30;
	fma.rn.f32 	%f29, %f27, %f29, %f2;
	add.s32 	%r41, %r41, 1;
	setp.lt.u32	%p6, %r41, %r15;
	mov.f32 	%f30, %f7;
	@%p6 bra 	BB6_3;

BB6_5:
	setp.eq.s32	%p7, %r16, 0;
	@%p7 bra 	BB6_14;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.lo.s32 	%r33, %r2, %r12;
	cvt.u64.u32	%rd4, %r33;
	add.s64 	%rd5, %rd3, %rd4;
	cvt.rn.f32.u32	%f28, %r16;
	rcp.rn.f32 	%f9, %f28;
	mul.wide.u32 	%rd6, %r1, 8;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r32, %r16, 3;
	mov.u32 	%r42, 1;
	mov.u32 	%r45, 0;
	setp.eq.s32	%p8, %r32, 0;
	@%p8 bra 	BB6_12;

	setp.eq.s32	%p9, %r32, 1;
	@%p9 bra 	BB6_11;

	setp.eq.s32	%p10, %r32, 2;
	@%p10 bra 	BB6_10;

	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r42, 2;

BB6_10:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r45, %r42;

BB6_11:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	add.s32 	%r45, %r45, 1;

BB6_12:
	setp.lt.u32	%p11, %r16, 4;
	@%p11 bra 	BB6_14;

BB6_13:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	add.s32 	%r45, %r45, 4;
	setp.lt.u32	%p12, %r45, %r16;
	@%p12 bra 	BB6_13;

BB6_14:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 17

BB7_2:
	ret;
}


