//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 4 .f32 PI_F = 0f40490FDB;
.global .align 4 .u32 MAX_SS_LEVEL = 256;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 VISUALISE_SAMPLE_COUNT_FLAG_MASK = 2;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[23] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 109, 97, 110, 100, 101, 108, 98, 114, 111, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[66] = {114, 0, 101, 0, 117, 0, 115, 0, 105, 0, 110, 0, 103, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 32, 0, 124, 0, 124, 0, 32, 0, 115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[56] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 83, 0, 95, 0, 76, 0, 69, 0, 86, 0, 69, 0, 76, 0, 0, 0};
.global .align 16 .b8 $str10[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str11[132] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<26>;
	.reg .f32 	%f<81>;
	.reg .b32 	%r<95>;
	.reg .b64 	%rd<49>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r28, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f32, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f31, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f29, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r29, [fractalRenderMainFloat_param_4];
	ld.param.u32 	%r92, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r31, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r32, 64;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r33, %tid.x;
	mov.u32 	%r34, %tid.y;
	mad.lo.s32 	%r35, %r1, %r34, %r33;
	shl.b32 	%r36, %r1, 2;
	and.b32  	%r37, %r35, 15;
	rem.u32 	%r38, %r35, %r36;
	sub.s32 	%r39, %r38, %r37;
	shr.u32 	%r40, %r39, 2;
	and.b32  	%r41, %r35, 3;
	add.s32 	%r42, %r40, %r41;
	div.u32 	%r43, %r35, %r36;
	shl.b32 	%r44, %r43, 2;
	bfe.u32 	%r45, %r35, 2, 2;
	add.s32 	%r46, %r44, %r45;
	mov.u32 	%r47, %ctaid.x;
	mad.lo.s32 	%r4, %r47, %r1, %r42;
	mov.u32 	%r48, %ctaid.y;
	mov.u32 	%r49, %ntid.y;
	mad.lo.s32 	%r5, %r48, %r49, %r46;
	setp.lt.u32	%p2, %r4, %r27;
	setp.lt.u32	%p3, %r5, %r28;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_27;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r92, 257;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r50, 99;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r50;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r92, 0;
	cvt.rn.f32.u32	%f80, %r92;
	mov.u32 	%r93, 0;
	@%p6 bra 	BB1_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	cvt.rn.f32.u32	%f33, %r27;
	sub.f32 	%f34, %f31, %f29;
	div.rn.f32 	%f6, %f34, %f33;
	cvt.rn.f32.u32	%f35, %r28;
	sub.f32 	%f36, %f32, %f30;
	div.rn.f32 	%f7, %f36, %f35;
	mov.u32 	%r54, 0;
	mov.u32 	%r83, %r54;
	mov.u32 	%r93, %r54;

BB1_8:
	cvt.rn.f32.u32	%f39, %r83;
	div.rn.f32 	%f40, %f39, %f80;
	add.f32 	%f41, %f4, %f40;
	add.f32 	%f42, %f5, %f40;
	neg.f32 	%f43, %f42;
	fma.rn.f32 	%f9, %f6, %f41, %f29;
	fma.rn.f32 	%f10, %f7, %f43, %f32;
	setp.eq.s32	%p7, %r29, 0;
	mov.f32 	%f73, 0f00000000;
	mov.u32 	%r87, %r54;
	mov.f32 	%f74, %f73;
	@%p7 bra 	BB1_11;

BB1_9:
	mul.f32 	%f13, %f73, %f73;
	mul.f32 	%f14, %f74, %f74;
	add.f32 	%f44, %f14, %f13;
	setp.geu.f32	%p8, %f44, 0f40800000;
	@%p8 bra 	BB1_11;

	sub.f32 	%f45, %f14, %f13;
	add.f32 	%f15, %f9, %f45;
	add.f32 	%f46, %f74, %f74;
	fma.rn.f32 	%f73, %f46, %f73, %f10;
	add.s32 	%r87, %r87, 1;
	setp.lt.u32	%p9, %r87, %r29;
	mov.f32 	%f74, %f15;
	@%p9 bra 	BB1_9;

BB1_11:
	add.s32 	%r93, %r87, %r93;
	setp.gt.u32	%p10, %r83, 9;
	@%p10 bra 	BB1_13;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r83, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r87;

BB1_13:
	and.b32  	%r57, %r31, 1;
	setp.eq.b32	%p11, %r57, 1;
	and.b32  	%r58, %r83, -9;
	setp.eq.s32	%p12, %r58, 2;
	and.pred  	%p13, %p12, %p11;
	add.s32 	%r13, %r83, 1;
	@!%p13 bra 	BB1_24;
	bra.uni 	BB1_14;

BB1_14:
	div.u32 	%r59, %r93, %r13;
	cvt.rn.f32.u32	%f17, %r59;
	setp.eq.s32	%p14, %r83, 0;
	mov.f32 	%f79, 0f00000000;
	@%p14 bra 	BB1_23;

	and.b32  	%r14, %r83, 3;
	setp.eq.s32	%p15, %r14, 0;
	mov.f32 	%f79, 0f00000000;
	mov.u32 	%r91, 0;
	@%p15 bra 	BB1_21;

	setp.eq.s32	%p16, %r14, 1;
	mov.f32 	%f76, 0f00000000;
	mov.u32 	%r89, 0;
	@%p16 bra 	BB1_20;

	setp.eq.s32	%p17, %r14, 2;
	mov.f32 	%f75, 0f00000000;
	mov.u32 	%r88, 0;
	@%p17 bra 	BB1_19;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r64, [%rd20];
	cvt.rn.f32.u32	%f51, %r64;
	sub.f32 	%f52, %f51, %f17;
	fma.rn.f32 	%f75, %f52, %f52, 0f00000000;
	mov.u32 	%r88, 1;

BB1_19:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r88, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r65, [%rd24];
	cvt.rn.f32.u32	%f53, %r65;
	sub.f32 	%f54, %f53, %f17;
	fma.rn.f32 	%f76, %f54, %f54, %f75;
	add.s32 	%r89, %r88, 1;

BB1_20:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r89, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r66, [%rd28];
	cvt.rn.f32.u32	%f55, %r66;
	sub.f32 	%f56, %f55, %f17;
	fma.rn.f32 	%f79, %f56, %f56, %f76;
	add.s32 	%r91, %r89, 1;

BB1_21:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p18, %r83, 4;
	@%p18 bra 	BB1_23;

BB1_22:
	mul.wide.u32 	%rd30, %r91, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r67, [%rd31];
	cvt.rn.f32.u32	%f57, %r67;
	sub.f32 	%f58, %f57, %f17;
	fma.rn.f32 	%f59, %f58, %f58, %f79;
	add.s32 	%r68, %r91, 1;
	mul.wide.u32 	%rd32, %r68, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r69, [%rd33];
	cvt.rn.f32.u32	%f60, %r69;
	sub.f32 	%f61, %f60, %f17;
	fma.rn.f32 	%f62, %f61, %f61, %f59;
	add.s32 	%r70, %r91, 2;
	mul.wide.u32 	%rd34, %r70, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r71, [%rd35];
	cvt.rn.f32.u32	%f63, %r71;
	sub.f32 	%f64, %f63, %f17;
	fma.rn.f32 	%f65, %f64, %f64, %f62;
	add.s32 	%r72, %r91, 3;
	mul.wide.u32 	%rd36, %r72, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r73, [%rd37];
	cvt.rn.f32.u32	%f66, %r73;
	sub.f32 	%f67, %f66, %f17;
	fma.rn.f32 	%f79, %f67, %f67, %f65;
	add.s32 	%r91, %r91, 4;
	setp.lt.u32	%p19, %r91, %r83;
	@%p19 bra 	BB1_22;

BB1_23:
	add.s32 	%r75, %r83, -1;
	cvt.rn.f32.u32	%f68, %r75;
	div.rn.f32 	%f69, %f79, %f68;
	div.rn.f32 	%f70, %f69, %f17;
	setp.eq.s32	%p20, %r83, 2;
	selp.f32	%f71, 0f3C23D70A, 0f3DCCCCCD, %p20;
	// inline asm
	activemask.b32 %r74;
	// inline asm
	setp.le.f32	%p21, %f70, %f71;
	vote.sync.all.pred 	%p22, %p21, %r74;
	selp.b32	%r92, %r13, %r92, %p22;

BB1_24:
	cvt.rn.f32.u32	%f80, %r92;
	setp.lt.u32	%p23, %r13, %r92;
	mov.u32 	%r83, %r13;
	@%p23 bra 	BB1_8;
	bra.uni 	BB1_25;

BB1_6:
	mov.u32 	%r92, %r93;

BB1_25:
	and.b32  	%r77, %r31, 2;
	setp.eq.s32	%p24, %r77, 0;
	mul.lo.s32 	%r78, %r92, 10;
	div.u32 	%r79, %r93, %r92;
	selp.b32	%r80, %r79, %r78, %p24;
	mul.lo.s32 	%r81, %r5, %r26;
	cvt.u64.u32	%rd38, %r81;
	cvta.to.global.u64 	%rd39, %rd2;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r4, 8;
	add.s64 	%rd42, %rd40, %rd41;
	st.global.u32 	[%rd42], %r80;
	st.global.f32 	[%rd42+4], %f80;
	setp.gt.f32	%p25, %f80, 0f00000000;
	@%p25 bra 	BB1_27;

	mov.u64 	%rd43, $str3;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str2;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r82, 169;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r82;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_27:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<26>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<95>;
	.reg .f64 	%fd<76>;
	.reg .b64 	%rd<49>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd28, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd27, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd26, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd25, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r29, [fractalRenderMainDouble_param_4];
	ld.param.u32 	%r30, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r31, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r32, 64;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r33, %tid.x;
	mov.u32 	%r34, %tid.y;
	mad.lo.s32 	%r35, %r1, %r34, %r33;
	shl.b32 	%r36, %r1, 2;
	and.b32  	%r37, %r35, 15;
	rem.u32 	%r38, %r35, %r36;
	sub.s32 	%r39, %r38, %r37;
	shr.u32 	%r40, %r39, 2;
	and.b32  	%r41, %r35, 3;
	add.s32 	%r42, %r40, %r41;
	div.u32 	%r43, %r35, %r36;
	shl.b32 	%r44, %r43, 2;
	bfe.u32 	%r45, %r35, 2, 2;
	add.s32 	%r46, %r44, %r45;
	mov.u32 	%r47, %ctaid.x;
	mad.lo.s32 	%r4, %r47, %r1, %r42;
	mov.u32 	%r48, %ctaid.y;
	mov.u32 	%r49, %ntid.y;
	mad.lo.s32 	%r5, %r48, %r49, %r46;
	setp.lt.u32	%p2, %r4, %r27;
	setp.lt.u32	%p3, %r5, %r28;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_26;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r30, 257;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r50, 99;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r50;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r30, 0;
	mov.u32 	%r93, 0;
	mov.u32 	%r92, %r93;
	@%p6 bra 	BB2_24;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	cvt.rn.f64.u32	%fd29, %r27;
	sub.f64 	%fd30, %fd27, %fd25;
	div.rn.f64 	%fd5, %fd30, %fd29;
	cvt.rn.f64.u32	%fd31, %r28;
	sub.f64 	%fd32, %fd28, %fd26;
	div.rn.f64 	%fd6, %fd32, %fd31;
	mov.u32 	%r54, 0;
	mov.u32 	%r83, %r54;
	mov.u32 	%r93, %r54;
	mov.u32 	%r92, %r30;

BB2_7:
	cvt.rn.f64.u32	%fd35, %r92;
	cvt.rn.f64.u32	%fd36, %r83;
	div.rn.f64 	%fd37, %fd36, %fd35;
	add.f64 	%fd38, %fd3, %fd37;
	add.f64 	%fd39, %fd4, %fd37;
	neg.f64 	%fd40, %fd39;
	fma.rn.f64 	%fd7, %fd5, %fd38, %fd25;
	fma.rn.f64 	%fd8, %fd6, %fd40, %fd28;
	setp.eq.s32	%p7, %r29, 0;
	mov.f64 	%fd69, 0d0000000000000000;
	mov.u32 	%r87, %r54;
	mov.f64 	%fd70, %fd69;
	@%p7 bra 	BB2_10;

BB2_8:
	mul.f64 	%fd11, %fd69, %fd69;
	mul.f64 	%fd12, %fd70, %fd70;
	add.f64 	%fd41, %fd12, %fd11;
	setp.geu.f64	%p8, %fd41, 0d4010000000000000;
	@%p8 bra 	BB2_10;

	sub.f64 	%fd42, %fd12, %fd11;
	add.f64 	%fd13, %fd7, %fd42;
	add.f64 	%fd43, %fd70, %fd70;
	fma.rn.f64 	%fd69, %fd43, %fd69, %fd8;
	add.s32 	%r87, %r87, 1;
	setp.lt.u32	%p9, %r87, %r29;
	mov.f64 	%fd70, %fd13;
	@%p9 bra 	BB2_8;

BB2_10:
	add.s32 	%r93, %r87, %r93;
	setp.gt.u32	%p10, %r83, 9;
	@%p10 bra 	BB2_12;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r83, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r87;

BB2_12:
	and.b32  	%r57, %r31, 1;
	setp.eq.b32	%p11, %r57, 1;
	and.b32  	%r58, %r83, -9;
	setp.eq.s32	%p12, %r58, 2;
	and.pred  	%p13, %p12, %p11;
	add.s32 	%r13, %r83, 1;
	@!%p13 bra 	BB2_23;
	bra.uni 	BB2_13;

BB2_13:
	div.u32 	%r59, %r93, %r13;
	cvt.rn.f64.u32	%fd15, %r59;
	setp.eq.s32	%p14, %r83, 0;
	mov.f64 	%fd75, 0d0000000000000000;
	@%p14 bra 	BB2_22;

	and.b32  	%r14, %r83, 3;
	setp.eq.s32	%p15, %r14, 0;
	mov.f64 	%fd75, 0d0000000000000000;
	mov.u32 	%r91, 0;
	@%p15 bra 	BB2_20;

	setp.eq.s32	%p16, %r14, 1;
	mov.f64 	%fd72, 0d0000000000000000;
	mov.u32 	%r89, 0;
	@%p16 bra 	BB2_19;

	setp.eq.s32	%p17, %r14, 2;
	mov.f64 	%fd71, 0d0000000000000000;
	mov.u32 	%r88, 0;
	@%p17 bra 	BB2_18;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r64, [%rd20];
	cvt.rn.f64.u32	%fd48, %r64;
	sub.f64 	%fd49, %fd48, %fd15;
	fma.rn.f64 	%fd71, %fd49, %fd49, 0d0000000000000000;
	mov.u32 	%r88, 1;

BB2_18:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r88, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r65, [%rd24];
	cvt.rn.f64.u32	%fd50, %r65;
	sub.f64 	%fd51, %fd50, %fd15;
	fma.rn.f64 	%fd72, %fd51, %fd51, %fd71;
	add.s32 	%r89, %r88, 1;

BB2_19:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r89, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r66, [%rd28];
	cvt.rn.f64.u32	%fd52, %r66;
	sub.f64 	%fd53, %fd52, %fd15;
	fma.rn.f64 	%fd75, %fd53, %fd53, %fd72;
	add.s32 	%r91, %r89, 1;

BB2_20:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p18, %r83, 4;
	@%p18 bra 	BB2_22;

BB2_21:
	mul.wide.u32 	%rd30, %r91, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r67, [%rd31];
	cvt.rn.f64.u32	%fd54, %r67;
	sub.f64 	%fd55, %fd54, %fd15;
	fma.rn.f64 	%fd56, %fd55, %fd55, %fd75;
	add.s32 	%r68, %r91, 1;
	mul.wide.u32 	%rd32, %r68, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r69, [%rd33];
	cvt.rn.f64.u32	%fd57, %r69;
	sub.f64 	%fd58, %fd57, %fd15;
	fma.rn.f64 	%fd59, %fd58, %fd58, %fd56;
	add.s32 	%r70, %r91, 2;
	mul.wide.u32 	%rd34, %r70, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r71, [%rd35];
	cvt.rn.f64.u32	%fd60, %r71;
	sub.f64 	%fd61, %fd60, %fd15;
	fma.rn.f64 	%fd62, %fd61, %fd61, %fd59;
	add.s32 	%r72, %r91, 3;
	mul.wide.u32 	%rd36, %r72, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r73, [%rd37];
	cvt.rn.f64.u32	%fd63, %r73;
	sub.f64 	%fd64, %fd63, %fd15;
	fma.rn.f64 	%fd75, %fd64, %fd64, %fd62;
	add.s32 	%r91, %r91, 4;
	setp.lt.u32	%p19, %r91, %r83;
	@%p19 bra 	BB2_21;

BB2_22:
	add.s32 	%r75, %r83, -1;
	cvt.rn.f64.u32	%fd65, %r75;
	div.rn.f64 	%fd66, %fd75, %fd65;
	div.rn.f64 	%fd67, %fd66, %fd15;
	setp.eq.s32	%p20, %r83, 2;
	selp.f64	%fd68, 0d3F847AE140000000, 0d3FB99999A0000000, %p20;
	// inline asm
	activemask.b32 %r74;
	// inline asm
	setp.le.f64	%p21, %fd67, %fd68;
	vote.sync.all.pred 	%p22, %p21, %r74;
	selp.b32	%r92, %r13, %r92, %p22;

BB2_23:
	setp.lt.u32	%p23, %r13, %r92;
	mov.u32 	%r83, %r13;
	@%p23 bra 	BB2_7;

BB2_24:
	and.b32  	%r77, %r31, 2;
	setp.eq.s32	%p24, %r77, 0;
	mul.lo.s32 	%r78, %r92, 10;
	div.u32 	%r79, %r93, %r92;
	selp.b32	%r80, %r79, %r78, %p24;
	mul.lo.s32 	%r81, %r5, %r26;
	cvt.u64.u32	%rd38, %r81;
	cvta.to.global.u64 	%rd39, %rd2;
	add.s64 	%rd40, %rd39, %rd38;
	mul.wide.u32 	%rd41, %r4, 8;
	add.s64 	%rd42, %rd40, %rd41;
	st.global.u32 	[%rd42], %r80;
	cvt.rn.f32.u32	%f1, %r92;
	st.global.f32 	[%rd42+4], %f1;
	setp.gt.f32	%p25, %f1, 0f00000000;
	@%p25 bra 	BB2_26;

	mov.u64 	%rd43, $str3;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, $str2;
	cvta.global.u64 	%rd46, %rd45;
	mov.u32 	%r82, 169;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32	[param2+0], %r82;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd47;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd48;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_26:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<55>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<174>;
	.reg .b32 	%r<130>;
	.reg .b64 	%rd<67>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r37, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r39, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r38, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f48, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f47, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f46, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f45, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r40, [fractalRenderAdvancedFloat_param_4];
	ld.param.u32 	%r116, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r42, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f52, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f51, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f50, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f49, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r43, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r45, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r44, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r46, 64;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r47, %tid.x;
	mov.u32 	%r48, %tid.y;
	mad.lo.s32 	%r49, %r1, %r48, %r47;
	shl.b32 	%r50, %r1, 2;
	and.b32  	%r51, %r49, 15;
	rem.u32 	%r52, %r49, %r50;
	sub.s32 	%r53, %r52, %r51;
	shr.u32 	%r54, %r53, 2;
	and.b32  	%r55, %r49, 3;
	add.s32 	%r56, %r54, %r55;
	div.u32 	%r57, %r49, %r50;
	shl.b32 	%r58, %r57, 2;
	bfe.u32 	%r59, %r49, 2, 2;
	add.s32 	%r60, %r58, %r59;
	mov.u32 	%r61, %ctaid.x;
	mad.lo.s32 	%r4, %r61, %r1, %r56;
	mov.u32 	%r62, %ctaid.y;
	mov.u32 	%r63, %ntid.y;
	mad.lo.s32 	%r5, %r62, %r63, %r60;
	setp.lt.u32	%p2, %r4, %r38;
	setp.lt.u32	%p3, %r5, %r39;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB3_47;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r65, %r42, 8;
	setp.eq.s32	%p5, %r65, 0;
	mov.u16 	%rs5, 0;
	@%p5 bra 	BB3_10;

	cvt.rn.f32.u32	%f54, %r4;
	sub.f32 	%f55, %f51, %f49;
	sub.f32 	%f56, %f47, %f45;
	div.rn.f32 	%f57, %f56, %f55;
	sub.f32 	%f58, %f52, %f50;
	sub.f32 	%f59, %f48, %f46;
	div.rn.f32 	%f60, %f59, %f58;
	sub.f32 	%f61, %f45, %f49;
	div.rn.f32 	%f62, %f61, %f56;
	sub.f32 	%f63, %f52, %f48;
	div.rn.f32 	%f64, %f63, %f59;
	cvt.rn.f32.u32	%f65, %r38;
	mul.f32 	%f66, %f65, %f62;
	cvt.rn.f32.u32	%f67, %r39;
	mul.f32 	%f68, %f67, %f64;
	cvt.rn.f32.u32	%f69, %r5;
	fma.rn.f32 	%f5, %f54, %f57, %f66;
	fma.rn.f32 	%f6, %f69, %f60, %f68;
	abs.f32 	%f70, %f5;
	mov.b32 	 %r66, %f5;
	and.b32  	%r67, %r66, -2147483648;
	or.b32  	%r68, %r67, 1056964608;
	mov.b32 	 %f71, %r68;
	add.f32 	%f72, %f5, %f71;
	cvt.rzi.f32.f32	%f73, %f72;
	setp.gt.f32	%p6, %f70, 0f4B000000;
	selp.f32	%f162, %f5, %f73, %p6;
	setp.geu.f32	%p7, %f70, 0f3F000000;
	@%p7 bra 	BB3_6;

	cvt.rzi.f32.f32	%f162, %f5;

BB3_6:
	cvt.rzi.s32.f32	%r6, %f162;
	mov.b32 	 %r69, %f6;
	and.b32  	%r70, %r69, -2147483648;
	or.b32  	%r71, %r70, 1056964608;
	mov.b32 	 %f74, %r71;
	add.f32 	%f75, %f6, %f74;
	cvt.rzi.f32.f32	%f76, %f75;
	abs.f32 	%f77, %f6;
	setp.gt.f32	%p8, %f77, 0f4B000000;
	selp.f32	%f163, %f6, %f76, %p8;
	setp.geu.f32	%p9, %f77, 0f3F000000;
	@%p9 bra 	BB3_8;

	cvt.rzi.f32.f32	%f163, %f6;

BB3_8:
	setp.lt.u32	%p10, %r6, %r38;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f32	%r7, %f163;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r39;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB3_10;
	bra.uni 	BB3_9;

BB3_9:
	cvta.to.global.u64 	%rd10, %rd3;
	mul.lo.s32 	%r73, %r7, %r43;
	cvt.u64.u32	%rd11, %r73;
	add.s64 	%rd12, %rd10, %rd11;
	mul.wide.u32 	%rd13, %r6, 8;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u32 	%r115, [%rd14];
	ld.global.f32 	%f164, [%rd14+4];
	mov.u16 	%rs5, 1;

BB3_10:
	and.b32  	%r74, %r42, 4;
	setp.eq.s32	%p17, %r74, 0;
	@%p17 bra 	BB3_17;

	and.b32  	%r75, %r4, -8;
	cvt.rn.f32.u32	%f79, %r75;
	and.b32  	%r76, %r5, -4;
	cvt.rn.f32.u32	%f80, %r76;
	cvt.rn.f32.u32	%f81, %r44;
	sub.f32 	%f82, %f81, %f79;
	cvt.rn.f32.u32	%f83, %r45;
	sub.f32 	%f84, %f83, %f80;
	mul.f32 	%f85, %f84, %f84;
	fma.rn.f32 	%f86, %f82, %f82, %f85;
	sqrt.rn.f32 	%f87, %f86;
	mul.f32 	%f88, %f87, 0f3CD94079;
	ld.global.f32 	%f89, [screenDistance];
	div.rn.f32 	%f15, %f88, %f89;
	abs.f32 	%f16, %f15;
	setp.leu.f32	%p18, %f16, 0f3F800000;
	mov.f32 	%f165, %f16;
	@%p18 bra 	BB3_13;

	rcp.rn.f32 	%f165, %f16;

BB3_13:
	mul.rn.f32 	%f90, %f165, %f165;
	mov.f32 	%f91, 0fC0B59883;
	mov.f32 	%f92, 0fBF52C7EA;
	fma.rn.f32 	%f93, %f90, %f92, %f91;
	mov.f32 	%f94, 0fC0D21907;
	fma.rn.f32 	%f95, %f93, %f90, %f94;
	mul.f32 	%f96, %f90, %f95;
	mul.f32 	%f97, %f165, %f96;
	add.f32 	%f98, %f90, 0f41355DC0;
	mov.f32 	%f99, 0f41E6BD60;
	fma.rn.f32 	%f100, %f98, %f90, %f99;
	mov.f32 	%f101, 0f419D92C8;
	fma.rn.f32 	%f102, %f100, %f90, %f101;
	rcp.rn.f32 	%f103, %f102;
	fma.rn.f32 	%f104, %f97, %f103, %f165;
	mov.f32 	%f105, 0f3FC90FDB;
	sub.f32 	%f106, %f105, %f104;
	setp.gt.f32	%p19, %f16, 0f3F800000;
	selp.f32	%f107, %f106, %f104, %p19;
	mov.b32 	 %r77, %f107;
	mov.b32 	 %r78, %f15;
	and.b32  	%r79, %r78, -2147483648;
	or.b32  	%r80, %r77, %r79;
	mov.b32 	 %f108, %r80;
	setp.gtu.f32	%p20, %f16, 0f7F800000;
	selp.f32	%f109, %f107, %f108, %p20;
	mul.f32 	%f110, %f109, 0f43340000;
	div.rn.f32 	%f19, %f110, 0f40490FDB;
	setp.ge.f32	%p21, %f19, 0f00000000;
	@%p21 bra 	BB3_15;

	mov.u64 	%rd15, $str6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str2;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r81, 210;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_15:
	fma.rn.f32 	%f111, %f19, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f19, 0f40B00000;
	selp.f32	%f112, %f111, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f113, %r116;
	mul.f32 	%f114, %f113, %f112;
	cvt.rzi.u32.f32	%r116, %f114;
	setp.gtu.f32	%p23, %f19, 0f42700000;
	@%p23 bra 	BB3_17;

	mov.u32 	%r82, 1;
	max.u32 	%r116, %r82, %r116;

BB3_17:
	setp.eq.f32	%p24, %f164, 0f00000000;
	setp.eq.s16	%p25, %rs5, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r116, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r116, %p28;
	cvt.rn.f32.u32	%f115, %r38;
	sub.f32 	%f116, %f47, %f45;
	div.rn.f32 	%f20, %f116, %f115;
	cvt.rn.f32.u32	%f117, %r39;
	sub.f32 	%f118, %f48, %f46;
	div.rn.f32 	%f21, %f118, %f117;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB3_19;

	mov.u64 	%rd21, $str9;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r83, 99;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r83;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r127, 0;
	mov.u32 	%r126, %r127;
	@%p30 bra 	BB3_38;

	cvt.rn.f32.u32	%f22, %r4;
	cvt.rn.f32.u32	%f23, %r5;
	mov.u32 	%r87, 0;
	mov.u32 	%r117, %r87;
	mov.u32 	%r127, %r87;
	mov.u32 	%r126, %r13;

BB3_21:
	cvt.rn.f32.u32	%f121, %r126;
	cvt.rn.f32.u32	%f122, %r117;
	div.rn.f32 	%f123, %f122, %f121;
	add.f32 	%f124, %f22, %f123;
	add.f32 	%f125, %f23, %f123;
	neg.f32 	%f126, %f125;
	fma.rn.f32 	%f24, %f20, %f124, %f45;
	fma.rn.f32 	%f25, %f21, %f126, %f48;
	setp.eq.s32	%p31, %r40, 0;
	mov.f32 	%f166, 0f00000000;
	mov.u32 	%r121, %r87;
	mov.f32 	%f167, %f166;
	@%p31 bra 	BB3_24;

BB3_22:
	mul.f32 	%f28, %f166, %f166;
	mul.f32 	%f29, %f167, %f167;
	add.f32 	%f127, %f29, %f28;
	setp.geu.f32	%p32, %f127, 0f40800000;
	@%p32 bra 	BB3_24;

	sub.f32 	%f128, %f29, %f28;
	add.f32 	%f30, %f24, %f128;
	add.f32 	%f129, %f167, %f167;
	fma.rn.f32 	%f166, %f129, %f166, %f25;
	add.s32 	%r121, %r121, 1;
	setp.lt.u32	%p33, %r121, %r40;
	mov.f32 	%f167, %f30;
	@%p33 bra 	BB3_22;

BB3_24:
	add.s32 	%r127, %r121, %r127;
	setp.gt.u32	%p34, %r117, 9;
	@%p34 bra 	BB3_26;

	add.u64 	%rd27, %SP, 0;
	cvta.to.local.u64 	%rd28, %rd27;
	mul.wide.u32 	%rd29, %r117, 4;
	add.s64 	%rd30, %rd28, %rd29;
	st.local.u32 	[%rd30], %r121;

BB3_26:
	and.b32  	%r90, %r42, 1;
	setp.eq.b32	%p35, %r90, 1;
	and.b32  	%r91, %r117, -9;
	setp.eq.s32	%p36, %r91, 2;
	and.pred  	%p37, %p36, %p35;
	add.s32 	%r21, %r117, 1;
	@!%p37 bra 	BB3_37;
	bra.uni 	BB3_27;

BB3_27:
	div.u32 	%r92, %r127, %r21;
	cvt.rn.f32.u32	%f32, %r92;
	setp.eq.s32	%p38, %r117, 0;
	mov.f32 	%f172, 0f00000000;
	@%p38 bra 	BB3_36;

	and.b32  	%r22, %r117, 3;
	setp.eq.s32	%p39, %r22, 0;
	mov.f32 	%f172, 0f00000000;
	mov.u32 	%r125, 0;
	@%p39 bra 	BB3_34;

	setp.eq.s32	%p40, %r22, 1;
	mov.f32 	%f169, 0f00000000;
	mov.u32 	%r123, 0;
	@%p40 bra 	BB3_33;

	setp.eq.s32	%p41, %r22, 2;
	mov.f32 	%f168, 0f00000000;
	mov.u32 	%r122, 0;
	@%p41 bra 	BB3_32;

	add.u64 	%rd31, %SP, 0;
	cvta.to.local.u64 	%rd32, %rd31;
	ld.local.u32 	%r97, [%rd32];
	cvt.rn.f32.u32	%f134, %r97;
	sub.f32 	%f135, %f134, %f32;
	fma.rn.f32 	%f168, %f135, %f135, 0f00000000;
	mov.u32 	%r122, 1;

BB3_32:
	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r122, 4;
	add.s64 	%rd36, %rd34, %rd35;
	ld.local.u32 	%r98, [%rd36];
	cvt.rn.f32.u32	%f136, %r98;
	sub.f32 	%f137, %f136, %f32;
	fma.rn.f32 	%f169, %f137, %f137, %f168;
	add.s32 	%r123, %r122, 1;

BB3_33:
	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	mul.wide.u32 	%rd39, %r123, 4;
	add.s64 	%rd40, %rd38, %rd39;
	ld.local.u32 	%r99, [%rd40];
	cvt.rn.f32.u32	%f138, %r99;
	sub.f32 	%f139, %f138, %f32;
	fma.rn.f32 	%f172, %f139, %f139, %f169;
	add.s32 	%r125, %r123, 1;

BB3_34:
	add.u64 	%rd41, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd41;
	setp.lt.u32	%p42, %r117, 4;
	@%p42 bra 	BB3_36;

BB3_35:
	mul.wide.u32 	%rd42, %r125, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.local.u32 	%r100, [%rd43];
	cvt.rn.f32.u32	%f140, %r100;
	sub.f32 	%f141, %f140, %f32;
	fma.rn.f32 	%f142, %f141, %f141, %f172;
	add.s32 	%r101, %r125, 1;
	mul.wide.u32 	%rd44, %r101, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.local.u32 	%r102, [%rd45];
	cvt.rn.f32.u32	%f143, %r102;
	sub.f32 	%f144, %f143, %f32;
	fma.rn.f32 	%f145, %f144, %f144, %f142;
	add.s32 	%r103, %r125, 2;
	mul.wide.u32 	%rd46, %r103, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.local.u32 	%r104, [%rd47];
	cvt.rn.f32.u32	%f146, %r104;
	sub.f32 	%f147, %f146, %f32;
	fma.rn.f32 	%f148, %f147, %f147, %f145;
	add.s32 	%r105, %r125, 3;
	mul.wide.u32 	%rd48, %r105, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r106, [%rd49];
	cvt.rn.f32.u32	%f149, %r106;
	sub.f32 	%f150, %f149, %f32;
	fma.rn.f32 	%f172, %f150, %f150, %f148;
	add.s32 	%r125, %r125, 4;
	setp.lt.u32	%p43, %r125, %r117;
	@%p43 bra 	BB3_35;

BB3_36:
	add.s32 	%r108, %r117, -1;
	cvt.rn.f32.u32	%f151, %r108;
	div.rn.f32 	%f152, %f172, %f151;
	div.rn.f32 	%f153, %f152, %f32;
	setp.eq.s32	%p44, %r117, 2;
	selp.f32	%f154, 0f3C23D70A, 0f3DCCCCCD, %p44;
	// inline asm
	activemask.b32 %r107;
	// inline asm
	setp.le.f32	%p45, %f153, %f154;
	vote.sync.all.pred 	%p46, %p45, %r107;
	selp.b32	%r126, %r21, %r126, %p46;

BB3_37:
	setp.lt.u32	%p47, %r21, %r126;
	mov.u32 	%r117, %r21;
	@%p47 bra 	BB3_21;

BB3_38:
	div.u32 	%r129, %r127, %r126;
	setp.ne.s16	%p48, %rs5, 0;
	setp.ne.s32	%p49, %r126, 0;
	or.pred  	%p50, %p49, %p48;
	@%p50 bra 	BB3_40;

	mov.u64 	%rd50, $str7;
	cvta.global.u64 	%rd51, %rd50;
	mov.u64 	%rd52, $str2;
	cvta.global.u64 	%rd53, %rd52;
	mov.u32 	%r110, 264;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd55, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd51;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd53;
	.param .b32 param2;
	st.param.b32	[param2+0], %r110;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd54;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd55;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_40:
	@%p25 bra 	BB3_44;

	setp.eq.s32	%p52, %r126, 0;
	@%p52 bra 	BB3_42;

	and.b32  	%r111, %r42, 16;
	setp.eq.s32	%p53, %r111, 0;
	mul.f32 	%f155, %f164, 0f3B808081;
	selp.f32	%f156, %f164, %f155, %p53;
	cvt.rn.f32.u32	%f157, %r126;
	add.f32 	%f164, %f156, %f157;
	cvt.rn.f32.u32	%f158, %r115;
	mul.lo.s32 	%r112, %r129, %r126;
	cvt.rn.f32.u32	%f159, %r112;
	fma.rn.f32 	%f160, %f158, %f156, %f159;
	div.rn.f32 	%f161, %f160, %f164;
	cvt.rzi.u32.f32	%r129, %f161;
	bra.uni 	BB3_45;

BB3_44:
	cvt.rn.f32.u32	%f164, %r126;
	bra.uni 	BB3_45;

BB3_42:
	mov.u32 	%r129, %r115;

BB3_45:
	mul.lo.s32 	%r113, %r5, %r37;
	cvt.u64.u32	%rd56, %r113;
	cvta.to.global.u64 	%rd57, %rd2;
	add.s64 	%rd58, %rd57, %rd56;
	mul.wide.u32 	%rd59, %r4, 8;
	add.s64 	%rd60, %rd58, %rd59;
	st.global.u32 	[%rd60], %r129;
	st.global.f32 	[%rd60+4], %f164;
	setp.gt.f32	%p54, %f164, 0f00000000;
	@%p54 bra 	BB3_47;

	mov.u64 	%rd61, $str8;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str2;
	cvta.global.u64 	%rd64, %rd63;
	mov.u32 	%r114, 286;
	mov.u64 	%rd65, 0;
	mov.u64 	%rd66, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r114;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd65;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd66;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_47:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<55>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<59>;
	.reg .b32 	%r<134>;
	.reg .f64 	%fd<114>;
	.reg .b64 	%rd<67>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r37, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r39, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r38, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd38, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd37, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd36, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd35, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r40, [fractalRenderAdvancedDouble_param_4];
	ld.param.u32 	%r120, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r42, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd40, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd39, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r43, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r45, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r44, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r46, 64;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_2:
	mov.u32 	%r47, %tid.x;
	mov.u32 	%r48, %tid.y;
	mad.lo.s32 	%r49, %r1, %r48, %r47;
	shl.b32 	%r50, %r1, 2;
	and.b32  	%r51, %r49, 15;
	rem.u32 	%r52, %r49, %r50;
	sub.s32 	%r53, %r52, %r51;
	shr.u32 	%r54, %r53, 2;
	and.b32  	%r55, %r49, 3;
	add.s32 	%r56, %r54, %r55;
	div.u32 	%r57, %r49, %r50;
	shl.b32 	%r58, %r57, 2;
	bfe.u32 	%r59, %r49, 2, 2;
	add.s32 	%r60, %r58, %r59;
	mov.u32 	%r61, %ctaid.x;
	mad.lo.s32 	%r4, %r61, %r1, %r56;
	mov.u32 	%r62, %ctaid.y;
	mov.u32 	%r63, %ntid.y;
	mad.lo.s32 	%r5, %r62, %r63, %r60;
	setp.lt.u32	%p2, %r4, %r38;
	setp.lt.u32	%p3, %r5, %r39;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_47;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r65, %r42, 8;
	setp.eq.s32	%p5, %r65, 0;
	mov.u16 	%rs5, 0;
	@%p5 bra 	BB4_10;

	cvt.rn.f64.u32	%fd43, %r4;
	sub.f64 	%fd44, %fd41, %fd39;
	sub.f64 	%fd45, %fd37, %fd35;
	div.rn.f64 	%fd46, %fd45, %fd44;
	sub.f64 	%fd47, %fd42, %fd40;
	sub.f64 	%fd48, %fd38, %fd36;
	div.rn.f64 	%fd49, %fd48, %fd47;
	sub.f64 	%fd50, %fd35, %fd39;
	div.rn.f64 	%fd51, %fd50, %fd45;
	sub.f64 	%fd52, %fd42, %fd38;
	div.rn.f64 	%fd53, %fd52, %fd48;
	cvt.rn.f64.u32	%fd54, %r38;
	mul.f64 	%fd55, %fd54, %fd51;
	cvt.rn.f64.u32	%fd56, %r39;
	mul.f64 	%fd57, %fd56, %fd53;
	cvt.rn.f64.u32	%fd58, %r5;
	fma.rn.f64 	%fd105, %fd43, %fd46, %fd55;
	fma.rn.f64 	%fd106, %fd58, %fd49, %fd57;
	abs.f64 	%fd7, %fd105;
	setp.ge.f64	%p6, %fd7, 0d4330000000000000;
	@%p6 bra 	BB4_6;

	add.f64 	%fd59, %fd7, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd60, %fd59;
	setp.lt.f64	%p7, %fd7, 0d3FE0000000000000;
	selp.f64	%fd61, 0d0000000000000000, %fd60, %p7;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r66, %temp}, %fd61;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r67}, %fd61;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r68}, %fd105;
	}
	and.b32  	%r69, %r68, -2147483648;
	or.b32  	%r70, %r67, %r69;
	mov.b64 	%fd105, {%r66, %r70};

BB4_6:
	cvt.rzi.s32.f64	%r6, %fd105;
	abs.f64 	%fd10, %fd106;
	setp.ge.f64	%p8, %fd10, 0d4330000000000000;
	@%p8 bra 	BB4_8;

	add.f64 	%fd62, %fd10, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd63, %fd62;
	setp.lt.f64	%p9, %fd10, 0d3FE0000000000000;
	selp.f64	%fd64, 0d0000000000000000, %fd63, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r71, %temp}, %fd64;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r72}, %fd64;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r73}, %fd106;
	}
	and.b32  	%r74, %r73, -2147483648;
	or.b32  	%r75, %r72, %r74;
	mov.b64 	%fd106, {%r71, %r75};

BB4_8:
	setp.lt.u32	%p10, %r6, %r38;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f64	%r7, %fd106;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r39;
	and.pred  	%p16, %p15, %p14;
	@!%p16 bra 	BB4_10;
	bra.uni 	BB4_9;

BB4_9:
	cvta.to.global.u64 	%rd10, %rd3;
	mul.lo.s32 	%r77, %r7, %r43;
	cvt.u64.u32	%rd11, %r77;
	add.s64 	%rd12, %rd10, %rd11;
	mul.wide.u32 	%rd13, %r6, 8;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u32 	%r119, [%rd14];
	ld.global.f32 	%f56, [%rd14+4];
	mov.u16 	%rs5, 1;

BB4_10:
	and.b32  	%r78, %r42, 4;
	setp.eq.s32	%p17, %r78, 0;
	@%p17 bra 	BB4_17;

	and.b32  	%r79, %r4, -8;
	cvt.rn.f32.u32	%f13, %r79;
	and.b32  	%r80, %r5, -4;
	cvt.rn.f32.u32	%f14, %r80;
	cvt.rn.f32.u32	%f15, %r44;
	sub.f32 	%f16, %f15, %f13;
	cvt.rn.f32.u32	%f17, %r45;
	sub.f32 	%f18, %f17, %f14;
	mul.f32 	%f19, %f18, %f18;
	fma.rn.f32 	%f20, %f16, %f16, %f19;
	sqrt.rn.f32 	%f21, %f20;
	mul.f32 	%f22, %f21, 0f3CD94079;
	ld.global.f32 	%f23, [screenDistance];
	div.rn.f32 	%f3, %f22, %f23;
	abs.f32 	%f4, %f3;
	setp.leu.f32	%p18, %f4, 0f3F800000;
	mov.f32 	%f57, %f4;
	@%p18 bra 	BB4_13;

	rcp.rn.f32 	%f57, %f4;

BB4_13:
	mul.rn.f32 	%f24, %f57, %f57;
	mov.f32 	%f25, 0fC0B59883;
	mov.f32 	%f26, 0fBF52C7EA;
	fma.rn.f32 	%f27, %f24, %f26, %f25;
	mov.f32 	%f28, 0fC0D21907;
	fma.rn.f32 	%f29, %f27, %f24, %f28;
	mul.f32 	%f30, %f24, %f29;
	mul.f32 	%f31, %f57, %f30;
	add.f32 	%f32, %f24, 0f41355DC0;
	mov.f32 	%f33, 0f41E6BD60;
	fma.rn.f32 	%f34, %f32, %f24, %f33;
	mov.f32 	%f35, 0f419D92C8;
	fma.rn.f32 	%f36, %f34, %f24, %f35;
	rcp.rn.f32 	%f37, %f36;
	fma.rn.f32 	%f38, %f31, %f37, %f57;
	mov.f32 	%f39, 0f3FC90FDB;
	sub.f32 	%f40, %f39, %f38;
	setp.gt.f32	%p19, %f4, 0f3F800000;
	selp.f32	%f41, %f40, %f38, %p19;
	mov.b32 	 %r81, %f41;
	mov.b32 	 %r82, %f3;
	and.b32  	%r83, %r82, -2147483648;
	or.b32  	%r84, %r81, %r83;
	mov.b32 	 %f42, %r84;
	setp.gtu.f32	%p20, %f4, 0f7F800000;
	selp.f32	%f43, %f41, %f42, %p20;
	mul.f32 	%f44, %f43, 0f43340000;
	div.rn.f32 	%f7, %f44, 0f40490FDB;
	setp.ge.f32	%p21, %f7, 0f00000000;
	@%p21 bra 	BB4_15;

	mov.u64 	%rd15, $str6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str2;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r85, 210;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r85;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_15:
	fma.rn.f32 	%f45, %f7, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p22, %f7, 0f40B00000;
	selp.f32	%f46, %f45, 0f3F800000, %p22;
	cvt.rn.f32.u32	%f47, %r120;
	mul.f32 	%f48, %f47, %f46;
	cvt.rzi.u32.f32	%r120, %f48;
	setp.gtu.f32	%p23, %f7, 0f42700000;
	@%p23 bra 	BB4_17;

	mov.u32 	%r86, 1;
	max.u32 	%r120, %r86, %r120;

BB4_17:
	setp.eq.f32	%p24, %f56, 0f00000000;
	setp.eq.s16	%p25, %rs5, 0;
	or.pred  	%p26, %p25, %p24;
	setp.eq.s32	%p27, %r120, 0;
	and.pred  	%p28, %p26, %p27;
	selp.b32	%r13, 1, %r120, %p28;
	cvt.rn.f64.u32	%fd65, %r38;
	sub.f64 	%fd66, %fd37, %fd35;
	div.rn.f64 	%fd13, %fd66, %fd65;
	cvt.rn.f64.u32	%fd67, %r39;
	sub.f64 	%fd68, %fd38, %fd36;
	div.rn.f64 	%fd14, %fd68, %fd67;
	setp.lt.u32	%p29, %r13, 257;
	@%p29 bra 	BB4_19;

	mov.u64 	%rd21, $str9;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r87, 99;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r87;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_19:
	setp.eq.s32	%p30, %r13, 0;
	mov.u32 	%r131, 0;
	mov.u32 	%r130, %r131;
	@%p30 bra 	BB4_38;

	cvt.rn.f64.u32	%fd15, %r4;
	cvt.rn.f64.u32	%fd16, %r5;
	mov.u32 	%r91, 0;
	mov.u32 	%r121, %r91;
	mov.u32 	%r131, %r91;
	mov.u32 	%r130, %r13;

BB4_21:
	cvt.rn.f64.u32	%fd71, %r130;
	cvt.rn.f64.u32	%fd72, %r121;
	div.rn.f64 	%fd73, %fd72, %fd71;
	add.f64 	%fd74, %fd15, %fd73;
	add.f64 	%fd75, %fd16, %fd73;
	neg.f64 	%fd76, %fd75;
	fma.rn.f64 	%fd17, %fd13, %fd74, %fd35;
	fma.rn.f64 	%fd18, %fd14, %fd76, %fd38;
	setp.eq.s32	%p31, %r40, 0;
	mov.f64 	%fd107, 0d0000000000000000;
	mov.u32 	%r125, %r91;
	mov.f64 	%fd108, %fd107;
	@%p31 bra 	BB4_24;

BB4_22:
	mul.f64 	%fd21, %fd107, %fd107;
	mul.f64 	%fd22, %fd108, %fd108;
	add.f64 	%fd77, %fd22, %fd21;
	setp.geu.f64	%p32, %fd77, 0d4010000000000000;
	@%p32 bra 	BB4_24;

	sub.f64 	%fd78, %fd22, %fd21;
	add.f64 	%fd23, %fd17, %fd78;
	add.f64 	%fd79, %fd108, %fd108;
	fma.rn.f64 	%fd107, %fd79, %fd107, %fd18;
	add.s32 	%r125, %r125, 1;
	setp.lt.u32	%p33, %r125, %r40;
	mov.f64 	%fd108, %fd23;
	@%p33 bra 	BB4_22;

BB4_24:
	add.s32 	%r131, %r125, %r131;
	setp.gt.u32	%p34, %r121, 9;
	@%p34 bra 	BB4_26;

	add.u64 	%rd27, %SP, 0;
	cvta.to.local.u64 	%rd28, %rd27;
	mul.wide.u32 	%rd29, %r121, 4;
	add.s64 	%rd30, %rd28, %rd29;
	st.local.u32 	[%rd30], %r125;

BB4_26:
	and.b32  	%r94, %r42, 1;
	setp.eq.b32	%p35, %r94, 1;
	and.b32  	%r95, %r121, -9;
	setp.eq.s32	%p36, %r95, 2;
	and.pred  	%p37, %p36, %p35;
	add.s32 	%r21, %r121, 1;
	@!%p37 bra 	BB4_37;
	bra.uni 	BB4_27;

BB4_27:
	div.u32 	%r96, %r131, %r21;
	cvt.rn.f64.u32	%fd25, %r96;
	setp.eq.s32	%p38, %r121, 0;
	mov.f64 	%fd113, 0d0000000000000000;
	@%p38 bra 	BB4_36;

	and.b32  	%r22, %r121, 3;
	setp.eq.s32	%p39, %r22, 0;
	mov.f64 	%fd113, 0d0000000000000000;
	mov.u32 	%r129, 0;
	@%p39 bra 	BB4_34;

	setp.eq.s32	%p40, %r22, 1;
	mov.f64 	%fd110, 0d0000000000000000;
	mov.u32 	%r127, 0;
	@%p40 bra 	BB4_33;

	setp.eq.s32	%p41, %r22, 2;
	mov.f64 	%fd109, 0d0000000000000000;
	mov.u32 	%r126, 0;
	@%p41 bra 	BB4_32;

	add.u64 	%rd31, %SP, 0;
	cvta.to.local.u64 	%rd32, %rd31;
	ld.local.u32 	%r101, [%rd32];
	cvt.rn.f64.u32	%fd84, %r101;
	sub.f64 	%fd85, %fd84, %fd25;
	fma.rn.f64 	%fd109, %fd85, %fd85, 0d0000000000000000;
	mov.u32 	%r126, 1;

BB4_32:
	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r126, 4;
	add.s64 	%rd36, %rd34, %rd35;
	ld.local.u32 	%r102, [%rd36];
	cvt.rn.f64.u32	%fd86, %r102;
	sub.f64 	%fd87, %fd86, %fd25;
	fma.rn.f64 	%fd110, %fd87, %fd87, %fd109;
	add.s32 	%r127, %r126, 1;

BB4_33:
	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	mul.wide.u32 	%rd39, %r127, 4;
	add.s64 	%rd40, %rd38, %rd39;
	ld.local.u32 	%r103, [%rd40];
	cvt.rn.f64.u32	%fd88, %r103;
	sub.f64 	%fd89, %fd88, %fd25;
	fma.rn.f64 	%fd113, %fd89, %fd89, %fd110;
	add.s32 	%r129, %r127, 1;

BB4_34:
	add.u64 	%rd41, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd41;
	setp.lt.u32	%p42, %r121, 4;
	@%p42 bra 	BB4_36;

BB4_35:
	mul.wide.u32 	%rd42, %r129, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.local.u32 	%r104, [%rd43];
	cvt.rn.f64.u32	%fd90, %r104;
	sub.f64 	%fd91, %fd90, %fd25;
	fma.rn.f64 	%fd92, %fd91, %fd91, %fd113;
	add.s32 	%r105, %r129, 1;
	mul.wide.u32 	%rd44, %r105, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.local.u32 	%r106, [%rd45];
	cvt.rn.f64.u32	%fd93, %r106;
	sub.f64 	%fd94, %fd93, %fd25;
	fma.rn.f64 	%fd95, %fd94, %fd94, %fd92;
	add.s32 	%r107, %r129, 2;
	mul.wide.u32 	%rd46, %r107, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.local.u32 	%r108, [%rd47];
	cvt.rn.f64.u32	%fd96, %r108;
	sub.f64 	%fd97, %fd96, %fd25;
	fma.rn.f64 	%fd98, %fd97, %fd97, %fd95;
	add.s32 	%r109, %r129, 3;
	mul.wide.u32 	%rd48, %r109, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r110, [%rd49];
	cvt.rn.f64.u32	%fd99, %r110;
	sub.f64 	%fd100, %fd99, %fd25;
	fma.rn.f64 	%fd113, %fd100, %fd100, %fd98;
	add.s32 	%r129, %r129, 4;
	setp.lt.u32	%p43, %r129, %r121;
	@%p43 bra 	BB4_35;

BB4_36:
	add.s32 	%r112, %r121, -1;
	cvt.rn.f64.u32	%fd101, %r112;
	div.rn.f64 	%fd102, %fd113, %fd101;
	div.rn.f64 	%fd103, %fd102, %fd25;
	setp.eq.s32	%p44, %r121, 2;
	selp.f64	%fd104, 0d3F847AE140000000, 0d3FB99999A0000000, %p44;
	// inline asm
	activemask.b32 %r111;
	// inline asm
	setp.le.f64	%p45, %fd103, %fd104;
	vote.sync.all.pred 	%p46, %p45, %r111;
	selp.b32	%r130, %r21, %r130, %p46;

BB4_37:
	setp.lt.u32	%p47, %r21, %r130;
	mov.u32 	%r121, %r21;
	@%p47 bra 	BB4_21;

BB4_38:
	div.u32 	%r133, %r131, %r130;
	setp.ne.s16	%p48, %rs5, 0;
	setp.ne.s32	%p49, %r130, 0;
	or.pred  	%p50, %p49, %p48;
	@%p50 bra 	BB4_40;

	mov.u64 	%rd50, $str7;
	cvta.global.u64 	%rd51, %rd50;
	mov.u64 	%rd52, $str2;
	cvta.global.u64 	%rd53, %rd52;
	mov.u32 	%r114, 264;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd55, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd51;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd53;
	.param .b32 param2;
	st.param.b32	[param2+0], %r114;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd54;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd55;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB4_40:
	@%p25 bra 	BB4_44;

	setp.eq.s32	%p52, %r130, 0;
	@%p52 bra 	BB4_42;

	and.b32  	%r115, %r42, 16;
	setp.eq.s32	%p53, %r115, 0;
	mul.f32 	%f49, %f56, 0f3B808081;
	selp.f32	%f50, %f56, %f49, %p53;
	cvt.rn.f32.u32	%f51, %r130;
	add.f32 	%f56, %f50, %f51;
	cvt.rn.f32.u32	%f52, %r119;
	mul.lo.s32 	%r116, %r133, %r130;
	cvt.rn.f32.u32	%f53, %r116;
	fma.rn.f32 	%f54, %f52, %f50, %f53;
	div.rn.f32 	%f55, %f54, %f56;
	cvt.rzi.u32.f32	%r133, %f55;
	bra.uni 	BB4_45;

BB4_44:
	cvt.rn.f32.u32	%f56, %r130;
	bra.uni 	BB4_45;

BB4_42:
	mov.u32 	%r133, %r119;

BB4_45:
	mul.lo.s32 	%r117, %r5, %r37;
	cvt.u64.u32	%rd56, %r117;
	cvta.to.global.u64 	%rd57, %rd2;
	add.s64 	%rd58, %rd57, %rd56;
	mul.wide.u32 	%rd59, %r4, 8;
	add.s64 	%rd60, %rd58, %rd59;
	st.global.u32 	[%rd60], %r133;
	st.global.f32 	[%rd60+4], %f56;
	setp.gt.f32	%p54, %f56, 0f00000000;
	@%p54 bra 	BB4_47;

	mov.u64 	%rd61, $str8;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str2;
	cvta.global.u64 	%rd64, %rd63;
	mov.u32 	%r118, 286;
	mov.u64 	%rd65, 0;
	mov.u64 	%rd66, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r118;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd65;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd66;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_47:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd1, [compose_param_0];
	ld.param.u32 	%r4, [compose_param_1];
	ld.param.u64 	%rd2, [compose_param_4];
	ld.param.u32 	%r6, [compose_param_5];
	ld.param.u32 	%r7, [compose_param_6];
	ld.param.u64 	%rd3, [compose_param_7];
	ld.param.u32 	%r5, [compose_param_8];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r9, %r8, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	setp.ge.u32	%p1, %r2, %r7;
	setp.ge.u32	%p2, %r1, %r6;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_4;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.lo.s32 	%r14, %r2, %r4;
	cvt.u64.u32	%rd5, %r14;
	add.s64 	%rd6, %rd4, %rd5;
	mul.wide.u32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u32 	%r15, [%rd8];
	rem.u32 	%r16, %r15, %r5;
	sub.s32 	%r17, %r5, %r16;
	add.s32 	%r3, %r17, -1;
	setp.lt.u32	%p4, %r3, %r5;
	@%p4 bra 	BB5_3;

	mov.u64 	%rd9, $str10;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str11;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r18, 28;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r18;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB5_3:
	shl.b32 	%r19, %r3, 2;
	mov.u32 	%r20, 0;
	suld.b.2d.b32.trap {%r21}, [%rd3, {%r19, %r20}];
	shl.b32 	%r22, %r1, 2;
	sust.b.2d.b32.trap 	[%rd2, {%r22, %r2}], {%r21};

BB5_4:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<46>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r13, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r14, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f10, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r15, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r16, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r20, %r18, %r17, %r19;
	mul.lo.s32 	%r1, %r20, %r16;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.u32 	%r23, %tid.y;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r2, %r24, %r16;
	sub.s32 	%r25, %r14, %r16;
	setp.ge.u32	%p1, %r2, %r25;
	sub.s32 	%r26, %r13, %r16;
	setp.ge.u32	%p2, %r1, %r26;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_14;

	sub.f32 	%f16, %f12, %f10;
	cvt.rn.f32.u32	%f17, %r13;
	div.rn.f32 	%f18, %f16, %f17;
	cvt.rn.f32.u32	%f19, %r14;
	sub.f32 	%f20, %f13, %f11;
	div.rn.f32 	%f21, %f20, %f19;
	cvt.rn.f32.u32	%f22, %r1;
	fma.rn.f32 	%f1, %f22, %f18, %f10;
	cvt.rn.f32.u32	%f23, %r2;
	mul.f32 	%f24, %f23, %f21;
	sub.f32 	%f2, %f13, %f24;
	setp.eq.s32	%p4, %r15, 0;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r41, 0;
	@%p4 bra 	BB6_5;

	mov.f32 	%f30, %f29;

BB6_3:
	mul.f32 	%f5, %f29, %f29;
	mul.f32 	%f6, %f30, %f30;
	add.f32 	%f25, %f6, %f5;
	setp.geu.f32	%p5, %f25, 0f40800000;
	@%p5 bra 	BB6_5;

	sub.f32 	%f26, %f6, %f5;
	add.f32 	%f7, %f1, %f26;
	add.f32 	%f27, %f30, %f30;
	fma.rn.f32 	%f29, %f27, %f29, %f2;
	add.s32 	%r41, %r41, 1;
	setp.lt.u32	%p6, %r41, %r15;
	mov.f32 	%f30, %f7;
	@%p6 bra 	BB6_3;

BB6_5:
	setp.eq.s32	%p7, %r16, 0;
	@%p7 bra 	BB6_14;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.lo.s32 	%r33, %r2, %r12;
	cvt.u64.u32	%rd4, %r33;
	add.s64 	%rd5, %rd3, %rd4;
	cvt.rn.f32.u32	%f28, %r16;
	rcp.rn.f32 	%f9, %f28;
	mul.wide.u32 	%rd6, %r1, 8;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r32, %r16, 3;
	mov.u32 	%r42, 1;
	mov.u32 	%r45, 0;
	setp.eq.s32	%p8, %r32, 0;
	@%p8 bra 	BB6_12;

	setp.eq.s32	%p9, %r32, 1;
	@%p9 bra 	BB6_11;

	setp.eq.s32	%p10, %r32, 2;
	@%p10 bra 	BB6_10;

	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r42, 2;

BB6_10:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r45, %r42;

BB6_11:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	add.s32 	%r45, %r45, 1;

BB6_12:
	setp.lt.u32	%p11, %r16, 4;
	@%p11 bra 	BB6_14;

BB6_13:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f9;
	add.s32 	%r45, %r45, 4;
	setp.lt.u32	%p12, %r45, %r16;
	@%p12 bra 	BB6_13;

BB6_14:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 17

BB7_2:
	ret;
}


