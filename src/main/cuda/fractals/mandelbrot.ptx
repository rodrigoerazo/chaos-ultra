//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[23] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 109, 97, 110, 100, 101, 108, 98, 114, 111, 116, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str7[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str9[32] = {119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 95, 0, 115, 0, 117, 0, 109, 0, 32, 0, 33, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str10[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str11[132] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 109, 0, 97, 0, 110, 0, 100, 0, 101, 0, 108, 0, 98, 0, 114, 0, 111, 0, 116, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<82>;
	.reg .b32 	%r<103>;
	.reg .b64 	%rd<48>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r28, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r30, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r29, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f33, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f32, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f31, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f30, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r31, [fractalRenderMainFloat_param_4];
	ld.param.u32 	%r100, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r33, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r34, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r34;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r35, %tid.x;
	mov.u32 	%r36, %tid.y;
	mad.lo.s32 	%r37, %r1, %r36, %r35;
	shl.b32 	%r38, %r1, 2;
	and.b32  	%r39, %r37, 15;
	rem.u32 	%r40, %r37, %r38;
	sub.s32 	%r41, %r40, %r39;
	shr.u32 	%r42, %r41, 2;
	and.b32  	%r43, %r37, 3;
	add.s32 	%r44, %r42, %r43;
	div.u32 	%r45, %r37, %r38;
	shl.b32 	%r46, %r45, 2;
	bfe.u32 	%r47, %r37, 2, 2;
	add.s32 	%r48, %r46, %r47;
	mov.u32 	%r49, %ctaid.x;
	mad.lo.s32 	%r4, %r49, %r1, %r44;
	mov.u32 	%r50, %ctaid.y;
	mov.u32 	%r51, %ntid.y;
	mad.lo.s32 	%r5, %r50, %r51, %r48;
	setp.lt.u32	%p2, %r4, %r29;
	setp.lt.u32	%p3, %r5, %r30;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_30;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r100, 65;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd10, $str8;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str2;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r52, 119;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r100, 0;
	cvt.rn.f32.u32	%f81, %r100;
	mov.u32 	%r54, 0;
	@%p6 bra 	BB1_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	cvt.rn.f32.u32	%f34, %r29;
	sub.f32 	%f35, %f32, %f30;
	div.rn.f32 	%f6, %f35, %f34;
	cvt.rn.f32.u32	%f36, %r30;
	sub.f32 	%f37, %f33, %f31;
	div.rn.f32 	%f7, %f37, %f36;
	mov.u32 	%r56, 0;
	and.b32  	%r59, %r33, 1;
	mov.u32 	%r91, %r56;
	mov.u32 	%r101, %r56;

BB1_8:
	mov.u32 	%r8, %r100;
	mov.u32 	%r6, %r91;
	cvt.rn.f32.u32	%f40, %r6;
	div.rn.f32 	%f41, %f40, %f81;
	add.f32 	%f42, %f4, %f41;
	add.f32 	%f43, %f5, %f41;
	neg.f32 	%f44, %f43;
	fma.rn.f32 	%f9, %f6, %f42, %f30;
	fma.rn.f32 	%f10, %f7, %f44, %f33;
	setp.eq.s32	%p7, %r31, 0;
	mov.f32 	%f74, 0f00000000;
	mov.u32 	%r95, %r56;
	mov.f32 	%f75, %f74;
	@%p7 bra 	BB1_11;

BB1_9:
	mul.f32 	%f13, %f74, %f74;
	mul.f32 	%f14, %f75, %f75;
	add.f32 	%f45, %f14, %f13;
	setp.geu.f32	%p8, %f45, 0f40800000;
	@%p8 bra 	BB1_11;

	sub.f32 	%f46, %f14, %f13;
	add.f32 	%f15, %f9, %f46;
	add.f32 	%f47, %f75, %f75;
	fma.rn.f32 	%f74, %f47, %f74, %f10;
	add.s32 	%r95, %r95, 1;
	setp.lt.u32	%p9, %r95, %r31;
	mov.f32 	%f75, %f15;
	@%p9 bra 	BB1_9;

BB1_11:
	cvt.rn.f32.u32	%f48, %r95;
	cvt.rzi.u32.f32	%r12, %f48;
	add.s32 	%r101, %r12, %r101;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB1_13;

	add.u64 	%rd16, %SP, 0;
	cvta.to.local.u64 	%rd17, %rd16;
	mul.wide.u32 	%rd18, %r6, 4;
	add.s64 	%rd19, %rd17, %rd18;
	st.local.u32 	[%rd19], %r12;

BB1_13:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r59, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r14, %r8, 1;
	setp.eq.s32	%p16, %r6, %r14;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r91, %r6, 1;
	mov.u32 	%r100, %r8;
	@!%p17 bra 	BB1_27;
	bra.uni 	BB1_14;

BB1_14:
	div.u32 	%r60, %r101, %r91;
	cvt.rn.f32.u32	%f17, %r60;
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd20;
	setp.eq.s32	%p18, %r6, 0;
	mov.f32 	%f80, 0f00000000;
	@%p18 bra 	BB1_23;

	and.b32  	%r16, %r6, 3;
	setp.eq.s32	%p19, %r16, 0;
	mov.f32 	%f80, 0f00000000;
	mov.u32 	%r99, 0;
	@%p19 bra 	BB1_21;

	setp.eq.s32	%p20, %r16, 1;
	mov.f32 	%f77, 0f00000000;
	mov.u32 	%r97, 0;
	@%p20 bra 	BB1_20;

	setp.eq.s32	%p21, %r16, 2;
	mov.f32 	%f76, 0f00000000;
	mov.u32 	%r96, 0;
	@%p21 bra 	BB1_19;

	ld.local.u32 	%r65, [%rd1];
	cvt.rn.f32.u32	%f53, %r65;
	sub.f32 	%f54, %f53, %f17;
	fma.rn.f32 	%f76, %f54, %f54, 0f00000000;
	mov.u32 	%r96, 1;

BB1_19:
	mul.wide.u32 	%rd23, %r96, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.local.u32 	%r66, [%rd24];
	cvt.rn.f32.u32	%f55, %r66;
	sub.f32 	%f56, %f55, %f17;
	fma.rn.f32 	%f77, %f56, %f56, %f76;
	add.s32 	%r97, %r96, 1;

BB1_20:
	mul.wide.u32 	%rd27, %r97, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.local.u32 	%r67, [%rd28];
	cvt.rn.f32.u32	%f57, %r67;
	sub.f32 	%f58, %f57, %f17;
	fma.rn.f32 	%f80, %f58, %f58, %f77;
	add.s32 	%r99, %r97, 1;

BB1_21:
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB1_23;

BB1_22:
	mul.wide.u32 	%rd29, %r99, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.local.u32 	%r68, [%rd30];
	cvt.rn.f32.u32	%f59, %r68;
	sub.f32 	%f60, %f59, %f17;
	fma.rn.f32 	%f61, %f60, %f60, %f80;
	add.s32 	%r69, %r99, 1;
	mul.wide.u32 	%rd31, %r69, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.local.u32 	%r70, [%rd32];
	cvt.rn.f32.u32	%f62, %r70;
	sub.f32 	%f63, %f62, %f17;
	fma.rn.f32 	%f64, %f63, %f63, %f61;
	add.s32 	%r71, %r99, 2;
	mul.wide.u32 	%rd33, %r71, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.local.u32 	%r72, [%rd34];
	cvt.rn.f32.u32	%f65, %r72;
	sub.f32 	%f66, %f65, %f17;
	fma.rn.f32 	%f67, %f66, %f66, %f64;
	add.s32 	%r73, %r99, 3;
	mul.wide.u32 	%rd35, %r73, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r74, [%rd36];
	cvt.rn.f32.u32	%f68, %r74;
	sub.f32 	%f69, %f68, %f17;
	fma.rn.f32 	%f80, %f69, %f69, %f67;
	add.s32 	%r99, %r99, 4;
	setp.lt.u32	%p23, %r99, %r6;
	@%p23 bra 	BB1_22;

BB1_23:
	add.s32 	%r75, %r6, -1;
	cvt.rn.f32.u32	%f70, %r75;
	div.rn.f32 	%f71, %f80, %f70;
	div.rn.f32 	%f27, %f71, %f17;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB1_25;

	// inline asm
	activemask.b32 %r76;
	// inline asm
	ld.local.v2.u32 	{%r78, %r79}, [%rd1];
	setp.eq.s32	%p25, %r78, %r79;
	vote.sync.all.pred 	%p26, %p25, %r76;
	mov.u32 	%r100, 2;
	@%p26 bra 	BB1_27;

BB1_25:
	// inline asm
	activemask.b32 %r83;
	// inline asm
	setp.lt.f32	%p27, %f27, 0f3C23D70A;
	vote.sync.all.pred 	%p28, %p27, %r83;
	mov.u32 	%r100, %r91;
	@%p28 bra 	BB1_27;

	// inline asm
	activemask.b32 %r85;
	// inline asm
	setp.le.f32	%p29, %f27, 0f3F800000;
	vote.sync.all.pred 	%p30, %p29, %r85;
	setp.ge.u32	%p31, %r6, %r14;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r100, %r91, %r8, %p32;

BB1_27:
	cvt.rn.f32.u32	%f81, %r100;
	setp.lt.u32	%p33, %r91, %r100;
	@%p33 bra 	BB1_8;
	bra.uni 	BB1_28;

BB1_6:
	mov.u32 	%r101, %r54;
	mov.u32 	%r100, %r54;

BB1_28:
	mul.lo.s32 	%r87, %r5, %r28;
	cvt.u64.u32	%rd37, %r87;
	cvta.to.global.u64 	%rd38, %rd3;
	add.s64 	%rd39, %rd38, %rd37;
	div.u32 	%r88, %r101, %r100;
	cvt.rn.f32.u32	%f72, %r88;
	mul.wide.u32 	%rd40, %r4, 16;
	add.s64 	%rd41, %rd39, %rd40;
	st.global.f32 	[%rd41], %f72;
	st.global.f32 	[%rd41+4], %f81;
	st.global.u32 	[%rd41+12], %r54;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd41+8], %rs1;
	setp.gt.f32	%p34, %f81, 0f00000000;
	@%p34 bra 	BB1_30;

	mov.u64 	%rd42, $str3;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, $str2;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r90, 206;
	mov.u64 	%rd46, 0;
	mov.u64 	%rd47, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd43;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd45;
	.param .b32 param2;
	st.param.b32	[param2+0], %r90;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd46;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd47;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_30:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<103>;
	.reg .f64 	%fd<75>;
	.reg .b64 	%rd<48>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r30, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r29, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd29, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd28, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd27, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd26, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r31, [fractalRenderMainDouble_param_4];
	ld.param.u32 	%r32, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r33, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r34, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r34;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r35, %tid.x;
	mov.u32 	%r36, %tid.y;
	mad.lo.s32 	%r37, %r1, %r36, %r35;
	shl.b32 	%r38, %r1, 2;
	and.b32  	%r39, %r37, 15;
	rem.u32 	%r40, %r37, %r38;
	sub.s32 	%r41, %r40, %r39;
	shr.u32 	%r42, %r41, 2;
	and.b32  	%r43, %r37, 3;
	add.s32 	%r44, %r42, %r43;
	div.u32 	%r45, %r37, %r38;
	shl.b32 	%r46, %r45, 2;
	bfe.u32 	%r47, %r37, 2, 2;
	add.s32 	%r48, %r46, %r47;
	mov.u32 	%r49, %ctaid.x;
	mad.lo.s32 	%r4, %r49, %r1, %r44;
	mov.u32 	%r50, %ctaid.y;
	mov.u32 	%r51, %ntid.y;
	mad.lo.s32 	%r5, %r50, %r51, %r48;
	setp.lt.u32	%p2, %r4, %r29;
	setp.lt.u32	%p3, %r5, %r30;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_29;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r32, 65;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd10, $str8;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str2;
	cvta.global.u64 	%rd13, %rd12;
	mov.u32 	%r52, 119;
	mov.u64 	%rd14, 0;
	mov.u64 	%rd15, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r32, 0;
	mov.u32 	%r54, 0;
	mov.u32 	%r101, %r54;
	mov.u32 	%r100, %r54;
	@%p6 bra 	BB2_27;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	cvt.rn.f64.u32	%fd30, %r29;
	sub.f64 	%fd31, %fd28, %fd26;
	div.rn.f64 	%fd5, %fd31, %fd30;
	cvt.rn.f64.u32	%fd32, %r30;
	sub.f64 	%fd33, %fd29, %fd27;
	div.rn.f64 	%fd6, %fd33, %fd32;
	mov.u32 	%r56, 0;
	and.b32  	%r59, %r33, 1;
	mov.u32 	%r91, %r56;
	mov.u32 	%r101, %r56;
	mov.u32 	%r100, %r32;

BB2_7:
	mov.u32 	%r8, %r100;
	mov.u32 	%r6, %r91;
	cvt.rn.f64.u32	%fd36, %r8;
	cvt.rn.f64.u32	%fd37, %r6;
	div.rn.f64 	%fd38, %fd37, %fd36;
	add.f64 	%fd39, %fd3, %fd38;
	add.f64 	%fd40, %fd4, %fd38;
	neg.f64 	%fd41, %fd40;
	fma.rn.f64 	%fd7, %fd5, %fd39, %fd26;
	fma.rn.f64 	%fd8, %fd6, %fd41, %fd29;
	setp.eq.s32	%p7, %r31, 0;
	mov.f64 	%fd68, 0d0000000000000000;
	mov.u32 	%r95, %r56;
	mov.f64 	%fd69, %fd68;
	@%p7 bra 	BB2_10;

BB2_8:
	mul.f64 	%fd11, %fd68, %fd68;
	mul.f64 	%fd12, %fd69, %fd69;
	add.f64 	%fd42, %fd12, %fd11;
	setp.geu.f64	%p8, %fd42, 0d4010000000000000;
	@%p8 bra 	BB2_10;

	sub.f64 	%fd43, %fd12, %fd11;
	add.f64 	%fd13, %fd7, %fd43;
	add.f64 	%fd44, %fd69, %fd69;
	fma.rn.f64 	%fd68, %fd44, %fd68, %fd8;
	add.s32 	%r95, %r95, 1;
	setp.lt.u32	%p9, %r95, %r31;
	mov.f64 	%fd69, %fd13;
	@%p9 bra 	BB2_8;

BB2_10:
	cvt.rn.f32.u32	%f1, %r95;
	cvt.rzi.u32.f32	%r12, %f1;
	add.s32 	%r101, %r12, %r101;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB2_12;

	add.u64 	%rd16, %SP, 0;
	cvta.to.local.u64 	%rd17, %rd16;
	mul.wide.u32 	%rd18, %r6, 4;
	add.s64 	%rd19, %rd17, %rd18;
	st.local.u32 	[%rd19], %r12;

BB2_12:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r59, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r14, %r8, 1;
	setp.eq.s32	%p16, %r6, %r14;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r91, %r6, 1;
	mov.u32 	%r100, %r8;
	@!%p17 bra 	BB2_26;
	bra.uni 	BB2_13;

BB2_13:
	div.u32 	%r60, %r101, %r91;
	cvt.rn.f64.u32	%fd15, %r60;
	add.u64 	%rd20, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd20;
	setp.eq.s32	%p18, %r6, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	@%p18 bra 	BB2_22;

	and.b32  	%r16, %r6, 3;
	setp.eq.s32	%p19, %r16, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	mov.u32 	%r99, 0;
	@%p19 bra 	BB2_20;

	setp.eq.s32	%p20, %r16, 1;
	mov.f64 	%fd71, 0d0000000000000000;
	mov.u32 	%r97, 0;
	@%p20 bra 	BB2_19;

	setp.eq.s32	%p21, %r16, 2;
	mov.f64 	%fd70, 0d0000000000000000;
	mov.u32 	%r96, 0;
	@%p21 bra 	BB2_18;

	ld.local.u32 	%r65, [%rd1];
	cvt.rn.f64.u32	%fd49, %r65;
	sub.f64 	%fd50, %fd49, %fd15;
	fma.rn.f64 	%fd70, %fd50, %fd50, 0d0000000000000000;
	mov.u32 	%r96, 1;

BB2_18:
	mul.wide.u32 	%rd23, %r96, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.local.u32 	%r66, [%rd24];
	cvt.rn.f64.u32	%fd51, %r66;
	sub.f64 	%fd52, %fd51, %fd15;
	fma.rn.f64 	%fd71, %fd52, %fd52, %fd70;
	add.s32 	%r97, %r96, 1;

BB2_19:
	mul.wide.u32 	%rd27, %r97, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.local.u32 	%r67, [%rd28];
	cvt.rn.f64.u32	%fd53, %r67;
	sub.f64 	%fd54, %fd53, %fd15;
	fma.rn.f64 	%fd74, %fd54, %fd54, %fd71;
	add.s32 	%r99, %r97, 1;

BB2_20:
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB2_22;

BB2_21:
	mul.wide.u32 	%rd29, %r99, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.local.u32 	%r68, [%rd30];
	cvt.rn.f64.u32	%fd55, %r68;
	sub.f64 	%fd56, %fd55, %fd15;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd74;
	add.s32 	%r69, %r99, 1;
	mul.wide.u32 	%rd31, %r69, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.local.u32 	%r70, [%rd32];
	cvt.rn.f64.u32	%fd58, %r70;
	sub.f64 	%fd59, %fd58, %fd15;
	fma.rn.f64 	%fd60, %fd59, %fd59, %fd57;
	add.s32 	%r71, %r99, 2;
	mul.wide.u32 	%rd33, %r71, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.local.u32 	%r72, [%rd34];
	cvt.rn.f64.u32	%fd61, %r72;
	sub.f64 	%fd62, %fd61, %fd15;
	fma.rn.f64 	%fd63, %fd62, %fd62, %fd60;
	add.s32 	%r73, %r99, 3;
	mul.wide.u32 	%rd35, %r73, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r74, [%rd36];
	cvt.rn.f64.u32	%fd64, %r74;
	sub.f64 	%fd65, %fd64, %fd15;
	fma.rn.f64 	%fd74, %fd65, %fd65, %fd63;
	add.s32 	%r99, %r99, 4;
	setp.lt.u32	%p23, %r99, %r6;
	@%p23 bra 	BB2_21;

BB2_22:
	add.s32 	%r75, %r6, -1;
	cvt.rn.f64.u32	%fd66, %r75;
	div.rn.f64 	%fd67, %fd74, %fd66;
	div.rn.f64 	%fd25, %fd67, %fd15;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB2_24;

	// inline asm
	activemask.b32 %r76;
	// inline asm
	ld.local.v2.u32 	{%r78, %r79}, [%rd1];
	setp.eq.s32	%p25, %r78, %r79;
	vote.sync.all.pred 	%p26, %p25, %r76;
	mov.u32 	%r100, 2;
	@%p26 bra 	BB2_26;

BB2_24:
	// inline asm
	activemask.b32 %r83;
	// inline asm
	setp.lt.f64	%p27, %fd25, 0d3F847AE140000000;
	vote.sync.all.pred 	%p28, %p27, %r83;
	mov.u32 	%r100, %r91;
	@%p28 bra 	BB2_26;

	// inline asm
	activemask.b32 %r85;
	// inline asm
	setp.le.f64	%p29, %fd25, 0d3FF0000000000000;
	vote.sync.all.pred 	%p30, %p29, %r85;
	setp.ge.u32	%p31, %r6, %r14;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r100, %r91, %r8, %p32;

BB2_26:
	setp.lt.u32	%p33, %r91, %r100;
	@%p33 bra 	BB2_7;

BB2_27:
	mul.lo.s32 	%r87, %r5, %r28;
	cvt.u64.u32	%rd37, %r87;
	cvta.to.global.u64 	%rd38, %rd3;
	add.s64 	%rd39, %rd38, %rd37;
	div.u32 	%r88, %r101, %r100;
	cvt.rn.f32.u32	%f2, %r88;
	mul.wide.u32 	%rd40, %r4, 16;
	add.s64 	%rd41, %rd39, %rd40;
	st.global.f32 	[%rd41], %f2;
	cvt.rn.f32.u32	%f3, %r100;
	st.global.f32 	[%rd41+4], %f3;
	st.global.u32 	[%rd41+12], %r54;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd41+8], %rs1;
	setp.gt.f32	%p34, %f3, 0f00000000;
	@%p34 bra 	BB2_29;

	mov.u64 	%rd42, $str3;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, $str2;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r90, 206;
	mov.u64 	%rd46, 0;
	mov.u64 	%rd47, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd43;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd45;
	.param .b32 param2;
	st.param.b32	[param2+0], %r90;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd46;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd47;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_29:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<58>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<182>;
	.reg .b32 	%r<129>;
	.reg .b64 	%rd<72>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r31, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r33, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r32, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f61, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f60, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f59, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f58, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r34, [fractalRenderAdvancedFloat_param_4];
	ld.param.u32 	%r126, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r36, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f65, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f64, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f63, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f62, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd4, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r37, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r39, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r38, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p2, %r1, 32;
	@%p2 bra 	BB3_2;

	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, $str2;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r40, 71;
	mov.u64 	%rd9, 0;
	mov.u64 	%rd10, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r40;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r41, %tid.x;
	mov.u32 	%r42, %tid.y;
	mad.lo.s32 	%r43, %r1, %r42, %r41;
	shl.b32 	%r44, %r1, 2;
	and.b32  	%r45, %r43, 15;
	rem.u32 	%r46, %r43, %r44;
	sub.s32 	%r47, %r46, %r45;
	shr.u32 	%r48, %r47, 2;
	and.b32  	%r49, %r43, 3;
	add.s32 	%r50, %r48, %r49;
	div.u32 	%r51, %r43, %r44;
	shl.b32 	%r52, %r51, 2;
	bfe.u32 	%r53, %r43, 2, 2;
	add.s32 	%r54, %r52, %r53;
	mov.u32 	%r55, %ctaid.x;
	mad.lo.s32 	%r4, %r55, %r1, %r50;
	mov.u32 	%r56, %ctaid.y;
	mov.u32 	%r57, %ntid.y;
	mad.lo.s32 	%r5, %r56, %r57, %r54;
	setp.lt.u32	%p3, %r4, %r32;
	setp.lt.u32	%p4, %r5, %r33;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB3_47;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r58, %r36, 8;
	setp.eq.s32	%p7, %r58, 0;
	mov.pred 	%p57, -1;
	mov.f32 	%f169, 0f00000000;
	@%p7 bra 	BB3_4;

	cvt.rn.f32.u32	%f68, %r4;
	cvt.rn.f32.u32	%f69, %r33;
	cvt.rn.f32.u32	%f70, %r5;
	sub.f32 	%f71, %f69, %f70;
	cvt.rn.f32.u32	%f72, %r32;
	div.rn.f32 	%f73, %f68, %f72;
	div.rn.f32 	%f74, %f71, %f69;
	sub.f32 	%f75, %f60, %f58;
	sub.f32 	%f76, %f61, %f59;
	fma.rn.f32 	%f77, %f75, %f73, %f58;
	fma.rn.f32 	%f78, %f76, %f74, %f59;
	sub.f32 	%f79, %f77, %f62;
	sub.f32 	%f80, %f78, %f63;
	sub.f32 	%f81, %f64, %f62;
	div.rn.f32 	%f82, %f79, %f81;
	sub.f32 	%f83, %f65, %f63;
	div.rn.f32 	%f84, %f80, %f83;
	mul.f32 	%f5, %f72, %f82;
	mul.f32 	%f85, %f69, %f84;
	sub.f32 	%f6, %f69, %f85;
	abs.f32 	%f86, %f5;
	mov.b32 	 %r59, %f5;
	and.b32  	%r60, %r59, -2147483648;
	or.b32  	%r61, %r60, 1056964608;
	mov.b32 	 %f87, %r61;
	add.f32 	%f88, %f5, %f87;
	cvt.rzi.f32.f32	%f89, %f88;
	setp.gt.f32	%p8, %f86, 0f4B000000;
	selp.f32	%f167, %f5, %f89, %p8;
	setp.geu.f32	%p9, %f86, 0f3F000000;
	@%p9 bra 	BB3_7;

	cvt.rzi.f32.f32	%f167, %f5;

BB3_7:
	cvt.rzi.s32.f32	%r6, %f167;
	mov.b32 	 %r62, %f6;
	and.b32  	%r63, %r62, -2147483648;
	or.b32  	%r64, %r63, 1056964608;
	mov.b32 	 %f90, %r64;
	add.f32 	%f91, %f6, %f90;
	cvt.rzi.f32.f32	%f92, %f91;
	abs.f32 	%f93, %f6;
	setp.gt.f32	%p10, %f93, 0f4B000000;
	selp.f32	%f168, %f6, %f92, %p10;
	setp.geu.f32	%p11, %f93, 0f3F000000;
	@%p11 bra 	BB3_9;

	cvt.rzi.f32.f32	%f168, %f6;

BB3_9:
	add.s32 	%r65, %r32, -2;
	setp.lt.u32	%p13, %r6, %r65;
	setp.gt.s32	%p14, %r6, 1;
	and.pred  	%p15, %p14, %p13;
	cvt.rzi.s32.f32	%r7, %f168;
	setp.gt.s32	%p16, %r7, 1;
	and.pred  	%p17, %p15, %p16;
	add.s32 	%r66, %r33, -2;
	setp.lt.u32	%p18, %r7, %r66;
	and.pred  	%p19, %p18, %p17;
	mov.f32 	%f179, %f169;
	@!%p19 bra 	BB3_15;
	bra.uni 	BB3_10;

BB3_10:
	sub.s32 	%r67, %r6, %r38;
	abs.s32 	%r68, %r67;
	setp.gt.s32	%p20, %r68, 19;
	@%p20 bra 	BB3_12;

	sub.s32 	%r69, %r7, %r39;
	abs.s32 	%r70, %r69;
	setp.lt.s32	%p22, %r70, 20;
	mov.f32 	%f179, %f169;
	@%p22 bra 	BB3_15;

BB3_12:
	cvt.rmi.f32.f32	%f98, %f5;
	cvt.rzi.u32.f32	%r71, %f98;
	cvt.rmi.f32.f32	%f99, %f6;
	cvt.rzi.u32.f32	%r72, %f99;
	cvt.rn.f32.u32	%f100, %r71;
	sub.f32 	%f13, %f5, %f100;
	cvt.rn.f32.u32	%f101, %r72;
	sub.f32 	%f14, %f6, %f101;
	mul.lo.s32 	%r73, %r72, %r37;
	cvt.u64.u32	%rd11, %r73;
	cvta.to.global.u64 	%rd12, %rd4;
	add.s64 	%rd13, %rd12, %rd11;
	mul.wide.u32 	%rd14, %r71, 16;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.f32 	%f15, [%rd15];
	add.s32 	%r74, %r71, 1;
	mul.wide.u32 	%rd16, %r74, 16;
	add.s64 	%rd17, %rd13, %rd16;
	ld.global.f32 	%f16, [%rd17];
	add.s32 	%r75, %r72, 1;
	mul.lo.s32 	%r76, %r75, %r37;
	cvt.u64.u32	%rd18, %r76;
	add.s64 	%rd19, %rd12, %rd18;
	add.s64 	%rd20, %rd19, %rd14;
	ld.global.f32 	%f17, [%rd20];
	add.s64 	%rd21, %rd19, %rd16;
	ld.global.f32 	%f18, [%rd21];
	ld.global.f32 	%f19, [%rd17+4];
	ld.global.f32 	%f20, [%rd15+4];
	add.f32 	%f102, %f20, %f19;
	ld.global.f32 	%f21, [%rd20+4];
	add.f32 	%f103, %f102, %f21;
	ld.global.f32 	%f22, [%rd21+4];
	add.f32 	%f104, %f103, %f22;
	setp.neu.f32	%p23, %f104, 0f00000000;
	@%p23 bra 	BB3_14;

	mov.u64 	%rd22, $str9;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, $str2;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r77, 279;
	mov.u64 	%rd26, 0;
	mov.u64 	%rd27, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd25;
	.param .b32 param2;
	st.param.b32	[param2+0], %r77;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_14:
	mul.f32 	%f105, %f15, %f20;
	div.rn.f32 	%f109, %f105, %f104;
	mul.f32 	%f110, %f16, %f19;
	div.rn.f32 	%f111, %f110, %f104;
	mul.f32 	%f112, %f17, %f21;
	div.rn.f32 	%f113, %f112, %f104;
	mul.f32 	%f114, %f18, %f22;
	div.rn.f32 	%f115, %f114, %f104;
	mov.f32 	%f116, 0f3F800000;
	sub.f32 	%f117, %f116, %f13;
	mul.f32 	%f118, %f13, %f111;
	fma.rn.f32 	%f119, %f117, %f109, %f118;
	sub.f32 	%f120, %f116, %f14;
	mul.f32 	%f121, %f13, %f115;
	fma.rn.f32 	%f122, %f117, %f113, %f121;
	mul.f32 	%f123, %f14, %f122;
	fma.rn.f32 	%f169, %f120, %f119, %f123;
	mul.f32 	%f124, %f13, %f19;
	fma.rn.f32 	%f125, %f117, %f20, %f124;
	mul.f32 	%f126, %f13, %f22;
	fma.rn.f32 	%f127, %f117, %f21, %f126;
	mul.f32 	%f128, %f14, %f127;
	fma.rn.f32 	%f179, %f120, %f125, %f128;
	mov.pred 	%p57, 0;
	bra.uni 	BB3_15;

BB3_4:
	mov.f32 	%f179, %f169;

BB3_15:
	@%p57 bra 	BB3_17;
	bra.uni 	BB3_16;

BB3_17:
	setp.ne.s32	%p26, %r126, 0;
	@%p26 bra 	BB3_19;

	mov.u64 	%rd28, $str6;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, $str2;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r78, 347;
	mov.u64 	%rd32, 0;
	mov.u64 	%rd33, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd29;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd31;
	.param .b32 param2;
	st.param.b32	[param2+0], %r78;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd32;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd33;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_19:
	cvt.rn.f32.u32	%f129, %r32;
	sub.f32 	%f130, %f60, %f58;
	div.rn.f32 	%f28, %f130, %f129;
	cvt.rn.f32.u32	%f131, %r33;
	sub.f32 	%f132, %f61, %f59;
	div.rn.f32 	%f29, %f132, %f131;
	setp.lt.u32	%p27, %r126, 65;
	@%p27 bra 	BB3_21;

	mov.u64 	%rd34, $str8;
	cvta.global.u64 	%rd35, %rd34;
	mov.u64 	%rd36, $str2;
	cvta.global.u64 	%rd37, %rd36;
	mov.u32 	%r79, 119;
	mov.u64 	%rd38, 0;
	mov.u64 	%rd39, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd35;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd37;
	.param .b32 param2;
	st.param.b32	[param2+0], %r79;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd38;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd39;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_21:
	setp.eq.s32	%p28, %r126, 0;
	cvt.rn.f32.u32	%f179, %r126;
	mov.u32 	%r127, 0;
	@%p28 bra 	BB3_22;

	cvt.rn.f32.u32	%f31, %r4;
	cvt.rn.f32.u32	%f32, %r5;
	and.b32  	%r8, %r36, 1;
	mov.u32 	%r83, 0;
	mov.u32 	%r117, %r83;
	mov.u32 	%r127, %r83;

BB3_24:
	mov.u32 	%r11, %r126;
	mov.u32 	%r9, %r117;
	cvt.rn.f32.u32	%f135, %r9;
	div.rn.f32 	%f136, %f135, %f179;
	add.f32 	%f137, %f31, %f136;
	add.f32 	%f138, %f32, %f136;
	neg.f32 	%f139, %f138;
	fma.rn.f32 	%f34, %f28, %f137, %f58;
	fma.rn.f32 	%f35, %f29, %f139, %f61;
	setp.eq.s32	%p29, %r34, 0;
	mov.f32 	%f172, 0f00000000;
	mov.u32 	%r121, %r83;
	mov.f32 	%f173, %f172;
	@%p29 bra 	BB3_27;

BB3_25:
	mul.f32 	%f38, %f172, %f172;
	mul.f32 	%f39, %f173, %f173;
	add.f32 	%f140, %f39, %f38;
	setp.geu.f32	%p30, %f140, 0f40800000;
	@%p30 bra 	BB3_27;

	sub.f32 	%f141, %f39, %f38;
	add.f32 	%f40, %f34, %f141;
	add.f32 	%f142, %f173, %f173;
	fma.rn.f32 	%f172, %f142, %f172, %f35;
	add.s32 	%r121, %r121, 1;
	setp.lt.u32	%p31, %r121, %r34;
	mov.f32 	%f173, %f40;
	@%p31 bra 	BB3_25;

BB3_27:
	cvt.rn.f32.u32	%f143, %r121;
	cvt.rzi.u32.f32	%r15, %f143;
	add.s32 	%r127, %r15, %r127;
	setp.gt.u32	%p32, %r9, 9;
	@%p32 bra 	BB3_29;

	add.u64 	%rd40, %SP, 0;
	cvta.to.local.u64 	%rd41, %rd40;
	mul.wide.u32 	%rd42, %r9, 4;
	add.s64 	%rd43, %rd41, %rd42;
	st.local.u32 	[%rd43], %r15;

BB3_29:
	setp.lt.u32	%p33, %r9, 10;
	setp.ne.s32	%p34, %r9, 0;
	and.pred  	%p35, %p33, %p34;
	setp.ne.s32	%p36, %r8, 0;
	and.pred  	%p37, %p35, %p36;
	shr.u32 	%r17, %r11, 1;
	setp.eq.s32	%p38, %r9, %r17;
	or.pred  	%p39, %p37, %p38;
	add.s32 	%r117, %r9, 1;
	mov.u32 	%r126, %r11;
	@!%p39 bra 	BB3_43;
	bra.uni 	BB3_30;

BB3_30:
	div.u32 	%r86, %r127, %r117;
	cvt.rn.f32.u32	%f42, %r86;
	add.u64 	%rd44, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd44;
	setp.eq.s32	%p40, %r9, 0;
	mov.f32 	%f178, 0f00000000;
	@%p40 bra 	BB3_39;

	and.b32  	%r19, %r9, 3;
	setp.eq.s32	%p41, %r19, 0;
	mov.f32 	%f178, 0f00000000;
	mov.u32 	%r125, 0;
	@%p41 bra 	BB3_37;

	setp.eq.s32	%p42, %r19, 1;
	mov.f32 	%f175, 0f00000000;
	mov.u32 	%r123, 0;
	@%p42 bra 	BB3_36;

	setp.eq.s32	%p43, %r19, 2;
	mov.f32 	%f174, 0f00000000;
	mov.u32 	%r122, 0;
	@%p43 bra 	BB3_35;

	ld.local.u32 	%r91, [%rd1];
	cvt.rn.f32.u32	%f148, %r91;
	sub.f32 	%f149, %f148, %f42;
	fma.rn.f32 	%f174, %f149, %f149, 0f00000000;
	mov.u32 	%r122, 1;

BB3_35:
	mul.wide.u32 	%rd47, %r122, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.local.u32 	%r92, [%rd48];
	cvt.rn.f32.u32	%f150, %r92;
	sub.f32 	%f151, %f150, %f42;
	fma.rn.f32 	%f175, %f151, %f151, %f174;
	add.s32 	%r123, %r122, 1;

BB3_36:
	mul.wide.u32 	%rd51, %r123, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.local.u32 	%r93, [%rd52];
	cvt.rn.f32.u32	%f152, %r93;
	sub.f32 	%f153, %f152, %f42;
	fma.rn.f32 	%f178, %f153, %f153, %f175;
	add.s32 	%r125, %r123, 1;

BB3_37:
	setp.lt.u32	%p44, %r9, 4;
	@%p44 bra 	BB3_39;

BB3_38:
	mul.wide.u32 	%rd53, %r125, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.local.u32 	%r94, [%rd54];
	cvt.rn.f32.u32	%f154, %r94;
	sub.f32 	%f155, %f154, %f42;
	fma.rn.f32 	%f156, %f155, %f155, %f178;
	add.s32 	%r95, %r125, 1;
	mul.wide.u32 	%rd55, %r95, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.local.u32 	%r96, [%rd56];
	cvt.rn.f32.u32	%f157, %r96;
	sub.f32 	%f158, %f157, %f42;
	fma.rn.f32 	%f159, %f158, %f158, %f156;
	add.s32 	%r97, %r125, 2;
	mul.wide.u32 	%rd57, %r97, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.local.u32 	%r98, [%rd58];
	cvt.rn.f32.u32	%f160, %r98;
	sub.f32 	%f161, %f160, %f42;
	fma.rn.f32 	%f162, %f161, %f161, %f159;
	add.s32 	%r99, %r125, 3;
	mul.wide.u32 	%rd59, %r99, 4;
	add.s64 	%rd60, %rd1, %rd59;
	ld.local.u32 	%r100, [%rd60];
	cvt.rn.f32.u32	%f163, %r100;
	sub.f32 	%f164, %f163, %f42;
	fma.rn.f32 	%f178, %f164, %f164, %f162;
	add.s32 	%r125, %r125, 4;
	setp.lt.u32	%p45, %r125, %r9;
	@%p45 bra 	BB3_38;

BB3_39:
	add.s32 	%r101, %r9, -1;
	cvt.rn.f32.u32	%f165, %r101;
	div.rn.f32 	%f166, %f178, %f165;
	div.rn.f32 	%f52, %f166, %f42;
	setp.ne.s32	%p46, %r9, 1;
	@%p46 bra 	BB3_41;

	// inline asm
	activemask.b32 %r102;
	// inline asm
	ld.local.v2.u32 	{%r104, %r105}, [%rd1];
	setp.eq.s32	%p47, %r104, %r105;
	vote.sync.all.pred 	%p48, %p47, %r102;
	mov.u32 	%r126, 2;
	@%p48 bra 	BB3_43;

BB3_41:
	// inline asm
	activemask.b32 %r109;
	// inline asm
	setp.lt.f32	%p49, %f52, 0f3C23D70A;
	vote.sync.all.pred 	%p50, %p49, %r109;
	mov.u32 	%r126, %r117;
	@%p50 bra 	BB3_43;

	// inline asm
	activemask.b32 %r111;
	// inline asm
	setp.le.f32	%p51, %f52, 0f3F800000;
	vote.sync.all.pred 	%p52, %p51, %r111;
	setp.ge.u32	%p53, %r9, %r17;
	and.pred  	%p54, %p52, %p53;
	selp.b32	%r126, %r117, %r11, %p54;

BB3_43:
	cvt.rn.f32.u32	%f179, %r126;
	setp.lt.u32	%p55, %r117, %r126;
	@%p55 bra 	BB3_24;
	bra.uni 	BB3_44;

BB3_16:
	setp.lt.f32	%p25, %f179, 0f3F800000;
	selp.f32	%f180, 0f44800000, %f169, %p25;
	mov.u16 	%rs4, 1;
	bra.uni 	BB3_45;

BB3_22:
	mov.u32 	%r126, %r127;

BB3_44:
	div.u32 	%r113, %r127, %r126;
	cvt.rn.f32.u32	%f180, %r113;
	mov.u16 	%rs4, 0;

BB3_45:
	mul.lo.s32 	%r114, %r5, %r31;
	cvt.u64.u32	%rd61, %r114;
	cvta.to.global.u64 	%rd62, %rd3;
	add.s64 	%rd63, %rd62, %rd61;
	mul.wide.u32 	%rd64, %r4, 16;
	add.s64 	%rd65, %rd63, %rd64;
	st.global.f32 	[%rd65], %f180;
	st.global.f32 	[%rd65+4], %f179;
	mov.u32 	%r115, 0;
	st.global.u32 	[%rd65+12], %r115;
	st.global.u8 	[%rd65+8], %rs4;
	setp.gt.f32	%p56, %f179, 0f00000000;
	@%p56 bra 	BB3_47;

	mov.u64 	%rd66, $str7;
	cvta.global.u64 	%rd67, %rd66;
	mov.u64 	%rd68, $str2;
	cvta.global.u64 	%rd69, %rd68;
	mov.u32 	%r116, 354;
	mov.u64 	%rd70, 0;
	mov.u64 	%rd71, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd67;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd69;
	.param .b32 param2;
	st.param.b32	[param2+0], %r116;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd70;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd71;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_47:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<58>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<43>;
	.reg .b32 	%r<133>;
	.reg .f64 	%fd<144>;
	.reg .b64 	%rd<72>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r31, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r33, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r32, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd40, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd39, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd38, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r34, [fractalRenderAdvancedDouble_param_4];
	ld.param.u32 	%r35, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r36, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd45, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd44, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd43, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd4, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r37, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r39, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r38, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p2, %r1, 32;
	@%p2 bra 	BB4_2;

	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, $str2;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r40, 71;
	mov.u64 	%rd9, 0;
	mov.u64 	%rd10, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r40;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_2:
	mov.u32 	%r41, %tid.x;
	mov.u32 	%r42, %tid.y;
	mad.lo.s32 	%r43, %r1, %r42, %r41;
	shl.b32 	%r44, %r1, 2;
	and.b32  	%r45, %r43, 15;
	rem.u32 	%r46, %r43, %r44;
	sub.s32 	%r47, %r46, %r45;
	shr.u32 	%r48, %r47, 2;
	and.b32  	%r49, %r43, 3;
	add.s32 	%r50, %r48, %r49;
	div.u32 	%r51, %r43, %r44;
	shl.b32 	%r52, %r51, 2;
	bfe.u32 	%r53, %r43, 2, 2;
	add.s32 	%r54, %r52, %r53;
	mov.u32 	%r55, %ctaid.x;
	mad.lo.s32 	%r4, %r55, %r1, %r50;
	mov.u32 	%r56, %ctaid.y;
	mov.u32 	%r57, %ntid.y;
	mad.lo.s32 	%r5, %r56, %r57, %r54;
	setp.lt.u32	%p3, %r4, %r32;
	setp.lt.u32	%p4, %r5, %r33;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB4_46;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r58, %r36, 8;
	setp.eq.s32	%p7, %r58, 0;
	mov.pred 	%p57, -1;
	mov.f32 	%f39, 0f00000000;
	@%p7 bra 	BB4_4;

	cvt.rn.f64.u32	%fd46, %r4;
	cvt.rn.f64.u32	%fd47, %r33;
	cvt.rn.f64.u32	%fd48, %r5;
	sub.f64 	%fd49, %fd47, %fd48;
	cvt.rn.f64.u32	%fd50, %r32;
	div.rn.f64 	%fd51, %fd46, %fd50;
	div.rn.f64 	%fd52, %fd49, %fd47;
	sub.f64 	%fd53, %fd40, %fd38;
	sub.f64 	%fd54, %fd41, %fd39;
	fma.rn.f64 	%fd55, %fd53, %fd51, %fd38;
	fma.rn.f64 	%fd56, %fd54, %fd52, %fd39;
	sub.f64 	%fd57, %fd55, %fd42;
	sub.f64 	%fd58, %fd56, %fd43;
	sub.f64 	%fd59, %fd44, %fd42;
	div.rn.f64 	%fd60, %fd57, %fd59;
	sub.f64 	%fd61, %fd45, %fd43;
	div.rn.f64 	%fd62, %fd58, %fd61;
	mul.f64 	%fd5, %fd50, %fd60;
	mul.f64 	%fd63, %fd47, %fd62;
	sub.f64 	%fd6, %fd47, %fd63;
	abs.f64 	%fd7, %fd5;
	setp.ge.f64	%p8, %fd7, 0d4330000000000000;
	mov.f64 	%fd135, %fd5;
	@%p8 bra 	BB4_7;

	add.f64 	%fd64, %fd7, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd65, %fd64;
	setp.lt.f64	%p9, %fd7, 0d3FE0000000000000;
	selp.f64	%fd66, 0d0000000000000000, %fd65, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r59, %temp}, %fd66;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r60}, %fd66;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r61}, %fd5;
	}
	and.b32  	%r62, %r61, -2147483648;
	or.b32  	%r63, %r60, %r62;
	mov.b64 	%fd135, {%r59, %r63};

BB4_7:
	cvt.rzi.s32.f64	%r6, %fd135;
	abs.f64 	%fd10, %fd6;
	setp.ge.f64	%p10, %fd10, 0d4330000000000000;
	mov.f64 	%fd136, %fd6;
	@%p10 bra 	BB4_9;

	add.f64 	%fd67, %fd10, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd68, %fd67;
	setp.lt.f64	%p11, %fd10, 0d3FE0000000000000;
	selp.f64	%fd69, 0d0000000000000000, %fd68, %p11;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r64, %temp}, %fd69;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r65}, %fd69;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r66}, %fd6;
	}
	and.b32  	%r67, %r66, -2147483648;
	or.b32  	%r68, %r65, %r67;
	mov.b64 	%fd136, {%r64, %r68};

BB4_9:
	add.s32 	%r69, %r32, -2;
	setp.lt.u32	%p13, %r6, %r69;
	setp.gt.s32	%p14, %r6, 1;
	and.pred  	%p15, %p14, %p13;
	cvt.rzi.s32.f64	%r7, %fd136;
	setp.gt.s32	%p16, %r7, 1;
	and.pred  	%p17, %p15, %p16;
	add.s32 	%r70, %r33, -2;
	setp.lt.u32	%p18, %r7, %r70;
	and.pred  	%p19, %p18, %p17;
	mov.f32 	%f40, %f39;
	@!%p19 bra 	BB4_15;
	bra.uni 	BB4_10;

BB4_10:
	sub.s32 	%r71, %r6, %r38;
	abs.s32 	%r72, %r71;
	setp.gt.s32	%p20, %r72, 19;
	@%p20 bra 	BB4_12;

	sub.s32 	%r73, %r7, %r39;
	abs.s32 	%r74, %r73;
	setp.lt.s32	%p22, %r74, 20;
	mov.f32 	%f40, %f39;
	@%p22 bra 	BB4_15;

BB4_12:
	cvt.rmi.f64.f64	%fd70, %fd5;
	cvt.rzi.u32.f64	%r75, %fd70;
	cvt.rmi.f64.f64	%fd71, %fd6;
	cvt.rzi.u32.f64	%r76, %fd71;
	cvt.rn.f64.u32	%fd72, %r75;
	sub.f64 	%fd13, %fd5, %fd72;
	cvt.rn.f64.u32	%fd73, %r76;
	sub.f64 	%fd14, %fd6, %fd73;
	mul.lo.s32 	%r77, %r76, %r37;
	cvt.u64.u32	%rd11, %r77;
	cvta.to.global.u64 	%rd12, %rd4;
	add.s64 	%rd13, %rd12, %rd11;
	mul.wide.u32 	%rd14, %r75, 16;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.f32 	%f1, [%rd15];
	add.s32 	%r78, %r75, 1;
	mul.wide.u32 	%rd16, %r78, 16;
	add.s64 	%rd17, %rd13, %rd16;
	ld.global.f32 	%f2, [%rd17];
	add.s32 	%r79, %r76, 1;
	mul.lo.s32 	%r80, %r79, %r37;
	cvt.u64.u32	%rd18, %r80;
	add.s64 	%rd19, %rd12, %rd18;
	add.s64 	%rd20, %rd19, %rd14;
	ld.global.f32 	%f3, [%rd20];
	add.s64 	%rd21, %rd19, %rd16;
	ld.global.f32 	%f4, [%rd21];
	ld.global.f32 	%f5, [%rd17+4];
	ld.global.f32 	%f6, [%rd15+4];
	add.f32 	%f24, %f6, %f5;
	ld.global.f32 	%f7, [%rd20+4];
	add.f32 	%f25, %f24, %f7;
	ld.global.f32 	%f8, [%rd21+4];
	add.f32 	%f26, %f25, %f8;
	setp.neu.f32	%p23, %f26, 0f00000000;
	@%p23 bra 	BB4_14;

	mov.u64 	%rd22, $str9;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, $str2;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r81, 279;
	mov.u64 	%rd26, 0;
	mov.u64 	%rd27, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd25;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_14:
	mul.f32 	%f27, %f1, %f6;
	div.rn.f32 	%f31, %f27, %f26;
	mul.f32 	%f32, %f2, %f5;
	div.rn.f32 	%f33, %f32, %f26;
	mul.f32 	%f34, %f3, %f7;
	div.rn.f32 	%f35, %f34, %f26;
	mul.f32 	%f36, %f4, %f8;
	div.rn.f32 	%f37, %f36, %f26;
	cvt.f64.f32	%fd74, %f31;
	mov.f64 	%fd75, 0d3FF0000000000000;
	sub.f64 	%fd76, %fd75, %fd13;
	cvt.f64.f32	%fd77, %f33;
	mul.f64 	%fd78, %fd13, %fd77;
	fma.rn.f64 	%fd79, %fd76, %fd74, %fd78;
	sub.f64 	%fd80, %fd75, %fd14;
	cvt.f64.f32	%fd81, %f35;
	cvt.f64.f32	%fd82, %f37;
	mul.f64 	%fd83, %fd13, %fd82;
	fma.rn.f64 	%fd84, %fd76, %fd81, %fd83;
	mul.f64 	%fd85, %fd14, %fd84;
	fma.rn.f64 	%fd86, %fd80, %fd79, %fd85;
	cvt.f64.f32	%fd87, %f6;
	cvt.f64.f32	%fd88, %f5;
	mul.f64 	%fd89, %fd13, %fd88;
	fma.rn.f64 	%fd90, %fd76, %fd87, %fd89;
	cvt.f64.f32	%fd91, %f7;
	cvt.f64.f32	%fd92, %f8;
	mul.f64 	%fd93, %fd13, %fd92;
	fma.rn.f64 	%fd94, %fd76, %fd91, %fd93;
	mul.f64 	%fd95, %fd14, %fd94;
	fma.rn.f64 	%fd96, %fd80, %fd90, %fd95;
	cvt.rn.f32.f64	%f40, %fd96;
	cvt.rn.f32.f64	%f39, %fd86;
	mov.pred 	%p57, 0;
	bra.uni 	BB4_15;

BB4_4:
	mov.f32 	%f40, %f39;

BB4_15:
	@%p57 bra 	BB4_17;
	bra.uni 	BB4_16;

BB4_17:
	setp.ne.s32	%p26, %r35, 0;
	@%p26 bra 	BB4_19;

	mov.u64 	%rd28, $str6;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, $str2;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r82, 347;
	mov.u64 	%rd32, 0;
	mov.u64 	%rd33, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd29;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd31;
	.param .b32 param2;
	st.param.b32	[param2+0], %r82;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd32;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd33;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_19:
	cvt.rn.f64.u32	%fd97, %r32;
	sub.f64 	%fd98, %fd40, %fd38;
	div.rn.f64 	%fd15, %fd98, %fd97;
	cvt.rn.f64.u32	%fd99, %r33;
	sub.f64 	%fd100, %fd41, %fd39;
	div.rn.f64 	%fd16, %fd100, %fd99;
	setp.lt.u32	%p27, %r35, 65;
	@%p27 bra 	BB4_21;

	mov.u64 	%rd34, $str8;
	cvta.global.u64 	%rd35, %rd34;
	mov.u64 	%rd36, $str2;
	cvta.global.u64 	%rd37, %rd36;
	mov.u32 	%r83, 119;
	mov.u64 	%rd38, 0;
	mov.u64 	%rd39, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd35;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd37;
	.param .b32 param2;
	st.param.b32	[param2+0], %r83;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd38;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd39;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB4_21:
	setp.eq.s32	%p28, %r35, 0;
	mov.u32 	%r131, 0;
	mov.u32 	%r130, %r131;
	@%p28 bra 	BB4_43;

	cvt.rn.f64.u32	%fd17, %r4;
	cvt.rn.f64.u32	%fd18, %r5;
	and.b32  	%r8, %r36, 1;
	mov.u32 	%r87, 0;
	mov.u32 	%r121, %r87;
	mov.u32 	%r131, %r87;
	mov.u32 	%r130, %r35;

BB4_23:
	mov.u32 	%r11, %r130;
	mov.u32 	%r9, %r121;
	cvt.rn.f64.u32	%fd103, %r11;
	cvt.rn.f64.u32	%fd104, %r9;
	div.rn.f64 	%fd105, %fd104, %fd103;
	add.f64 	%fd106, %fd17, %fd105;
	add.f64 	%fd107, %fd18, %fd105;
	neg.f64 	%fd108, %fd107;
	fma.rn.f64 	%fd19, %fd15, %fd106, %fd38;
	fma.rn.f64 	%fd20, %fd16, %fd108, %fd41;
	setp.eq.s32	%p29, %r34, 0;
	mov.f64 	%fd137, 0d0000000000000000;
	mov.u32 	%r125, %r87;
	mov.f64 	%fd138, %fd137;
	@%p29 bra 	BB4_26;

BB4_24:
	mul.f64 	%fd23, %fd137, %fd137;
	mul.f64 	%fd24, %fd138, %fd138;
	add.f64 	%fd109, %fd24, %fd23;
	setp.geu.f64	%p30, %fd109, 0d4010000000000000;
	@%p30 bra 	BB4_26;

	sub.f64 	%fd110, %fd24, %fd23;
	add.f64 	%fd25, %fd19, %fd110;
	add.f64 	%fd111, %fd138, %fd138;
	fma.rn.f64 	%fd137, %fd111, %fd137, %fd20;
	add.s32 	%r125, %r125, 1;
	setp.lt.u32	%p31, %r125, %r34;
	mov.f64 	%fd138, %fd25;
	@%p31 bra 	BB4_24;

BB4_26:
	cvt.rn.f32.u32	%f38, %r125;
	cvt.rzi.u32.f32	%r15, %f38;
	add.s32 	%r131, %r15, %r131;
	setp.gt.u32	%p32, %r9, 9;
	@%p32 bra 	BB4_28;

	add.u64 	%rd40, %SP, 0;
	cvta.to.local.u64 	%rd41, %rd40;
	mul.wide.u32 	%rd42, %r9, 4;
	add.s64 	%rd43, %rd41, %rd42;
	st.local.u32 	[%rd43], %r15;

BB4_28:
	setp.lt.u32	%p33, %r9, 10;
	setp.ne.s32	%p34, %r9, 0;
	and.pred  	%p35, %p33, %p34;
	setp.ne.s32	%p36, %r8, 0;
	and.pred  	%p37, %p35, %p36;
	shr.u32 	%r17, %r11, 1;
	setp.eq.s32	%p38, %r9, %r17;
	or.pred  	%p39, %p37, %p38;
	add.s32 	%r121, %r9, 1;
	mov.u32 	%r130, %r11;
	@!%p39 bra 	BB4_42;
	bra.uni 	BB4_29;

BB4_29:
	div.u32 	%r90, %r131, %r121;
	cvt.rn.f64.u32	%fd27, %r90;
	add.u64 	%rd44, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd44;
	setp.eq.s32	%p40, %r9, 0;
	mov.f64 	%fd143, 0d0000000000000000;
	@%p40 bra 	BB4_38;

	and.b32  	%r19, %r9, 3;
	setp.eq.s32	%p41, %r19, 0;
	mov.f64 	%fd143, 0d0000000000000000;
	mov.u32 	%r129, 0;
	@%p41 bra 	BB4_36;

	setp.eq.s32	%p42, %r19, 1;
	mov.f64 	%fd140, 0d0000000000000000;
	mov.u32 	%r127, 0;
	@%p42 bra 	BB4_35;

	setp.eq.s32	%p43, %r19, 2;
	mov.f64 	%fd139, 0d0000000000000000;
	mov.u32 	%r126, 0;
	@%p43 bra 	BB4_34;

	ld.local.u32 	%r95, [%rd1];
	cvt.rn.f64.u32	%fd116, %r95;
	sub.f64 	%fd117, %fd116, %fd27;
	fma.rn.f64 	%fd139, %fd117, %fd117, 0d0000000000000000;
	mov.u32 	%r126, 1;

BB4_34:
	mul.wide.u32 	%rd47, %r126, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.local.u32 	%r96, [%rd48];
	cvt.rn.f64.u32	%fd118, %r96;
	sub.f64 	%fd119, %fd118, %fd27;
	fma.rn.f64 	%fd140, %fd119, %fd119, %fd139;
	add.s32 	%r127, %r126, 1;

BB4_35:
	mul.wide.u32 	%rd51, %r127, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.local.u32 	%r97, [%rd52];
	cvt.rn.f64.u32	%fd120, %r97;
	sub.f64 	%fd121, %fd120, %fd27;
	fma.rn.f64 	%fd143, %fd121, %fd121, %fd140;
	add.s32 	%r129, %r127, 1;

BB4_36:
	setp.lt.u32	%p44, %r9, 4;
	@%p44 bra 	BB4_38;

BB4_37:
	mul.wide.u32 	%rd53, %r129, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.local.u32 	%r98, [%rd54];
	cvt.rn.f64.u32	%fd122, %r98;
	sub.f64 	%fd123, %fd122, %fd27;
	fma.rn.f64 	%fd124, %fd123, %fd123, %fd143;
	add.s32 	%r99, %r129, 1;
	mul.wide.u32 	%rd55, %r99, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.local.u32 	%r100, [%rd56];
	cvt.rn.f64.u32	%fd125, %r100;
	sub.f64 	%fd126, %fd125, %fd27;
	fma.rn.f64 	%fd127, %fd126, %fd126, %fd124;
	add.s32 	%r101, %r129, 2;
	mul.wide.u32 	%rd57, %r101, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.local.u32 	%r102, [%rd58];
	cvt.rn.f64.u32	%fd128, %r102;
	sub.f64 	%fd129, %fd128, %fd27;
	fma.rn.f64 	%fd130, %fd129, %fd129, %fd127;
	add.s32 	%r103, %r129, 3;
	mul.wide.u32 	%rd59, %r103, 4;
	add.s64 	%rd60, %rd1, %rd59;
	ld.local.u32 	%r104, [%rd60];
	cvt.rn.f64.u32	%fd131, %r104;
	sub.f64 	%fd132, %fd131, %fd27;
	fma.rn.f64 	%fd143, %fd132, %fd132, %fd130;
	add.s32 	%r129, %r129, 4;
	setp.lt.u32	%p45, %r129, %r9;
	@%p45 bra 	BB4_37;

BB4_38:
	add.s32 	%r105, %r9, -1;
	cvt.rn.f64.u32	%fd133, %r105;
	div.rn.f64 	%fd134, %fd143, %fd133;
	div.rn.f64 	%fd37, %fd134, %fd27;
	setp.ne.s32	%p46, %r9, 1;
	@%p46 bra 	BB4_40;

	// inline asm
	activemask.b32 %r106;
	// inline asm
	ld.local.v2.u32 	{%r108, %r109}, [%rd1];
	setp.eq.s32	%p47, %r108, %r109;
	vote.sync.all.pred 	%p48, %p47, %r106;
	mov.u32 	%r130, 2;
	@%p48 bra 	BB4_42;

BB4_40:
	// inline asm
	activemask.b32 %r113;
	// inline asm
	setp.lt.f64	%p49, %fd37, 0d3F847AE140000000;
	vote.sync.all.pred 	%p50, %p49, %r113;
	mov.u32 	%r130, %r121;
	@%p50 bra 	BB4_42;

	// inline asm
	activemask.b32 %r115;
	// inline asm
	setp.le.f64	%p51, %fd37, 0d3FF0000000000000;
	vote.sync.all.pred 	%p52, %p51, %r115;
	setp.ge.u32	%p53, %r9, %r17;
	and.pred  	%p54, %p52, %p53;
	selp.b32	%r130, %r121, %r11, %p54;

BB4_42:
	setp.lt.u32	%p55, %r121, %r130;
	@%p55 bra 	BB4_23;

BB4_43:
	div.u32 	%r117, %r131, %r130;
	cvt.rn.f32.u32	%f41, %r117;
	cvt.rn.f32.u32	%f40, %r130;
	mov.u16 	%rs4, 0;
	bra.uni 	BB4_44;

BB4_16:
	setp.lt.f32	%p25, %f40, 0f3F800000;
	selp.f32	%f41, 0f44800000, %f39, %p25;
	mov.u16 	%rs4, 1;

BB4_44:
	mul.lo.s32 	%r118, %r5, %r31;
	cvt.u64.u32	%rd61, %r118;
	cvta.to.global.u64 	%rd62, %rd3;
	add.s64 	%rd63, %rd62, %rd61;
	mul.wide.u32 	%rd64, %r4, 16;
	add.s64 	%rd65, %rd63, %rd64;
	st.global.f32 	[%rd65], %f41;
	st.global.f32 	[%rd65+4], %f40;
	mov.u32 	%r119, 0;
	st.global.u32 	[%rd65+12], %r119;
	st.global.u8 	[%rd65+8], %rs4;
	setp.gt.f32	%p56, %f40, 0f00000000;
	@%p56 bra 	BB4_46;

	mov.u64 	%rd66, $str7;
	cvta.global.u64 	%rd67, %rd66;
	mov.u64 	%rd68, $str2;
	cvta.global.u64 	%rd69, %rd68;
	mov.u32 	%r120, 354;
	mov.u64 	%rd70, 0;
	mov.u64 	%rd71, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd67;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd69;
	.param .b32 param2;
	st.param.b32	[param2+0], %r120;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd70;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd71;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_46:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<37>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r7, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r10, [compose_param_5];
	ld.param.u32 	%r11, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.u32 	%r9, [compose_param_9];
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r13, %r12, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.u32	%p1, %r2, %r11;
	setp.ge.u32	%p2, %r1, %r10;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_9;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r18, %r2, %r7;
	cvt.u64.u32	%rd6, %r18;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.u32 	%rd8, %r1, 16;
	add.s64 	%rd1, %rd7, %rd8;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	@%p4 bra 	BB5_3;

	ld.global.f32 	%f5, [%rd1+4];
	cvt.rzi.u32.f32	%r19, %f5;
	min.u32 	%r20, %r19, %r9;
	cvt.rn.f32.u32	%f6, %r20;
	cvt.rn.f32.u32	%f7, %r9;
	div.rn.f32 	%f8, %f6, %f7;
	mul.f32 	%f9, %f8, 0f437F0000;
	cvt.rzi.s32.f32	%r21, %f9;
	and.b32  	%r22, %r21, 255;
	prmt.b32 	%r23, %r22, %r22, 30212;
	prmt.b32 	%r24, %r22, %r23, 28756;
	or.b32  	%r25, %r24, -16777216;
	ld.global.u8 	%rs2, [%rd1+8];
	setp.eq.s16	%p5, %rs2, 0;
	selp.b32	%r36, %r25, -16777216, %p5;
	bra.uni 	BB5_8;

BB5_3:
	ld.global.f32 	%f1, [%rd1];
	abs.f32 	%f10, %f1;
	mov.b32 	 %r26, %f1;
	and.b32  	%r27, %r26, -2147483648;
	or.b32  	%r28, %r27, 1056964608;
	mov.b32 	 %f11, %r28;
	add.f32 	%f12, %f1, %f11;
	cvt.rzi.f32.f32	%f13, %f12;
	setp.gt.f32	%p6, %f10, 0f4B000000;
	selp.f32	%f14, %f1, %f13, %p6;
	setp.geu.f32	%p7, %f10, 0f3F000000;
	@%p7 bra 	BB5_5;

	cvt.rzi.f32.f32	%f14, %f1;

BB5_5:
	cvt.rzi.u32.f32	%r29, %f14;
	rem.u32 	%r30, %r29, %r8;
	sub.s32 	%r31, %r8, %r30;
	add.s32 	%r4, %r31, -1;
	setp.lt.u32	%p8, %r4, %r8;
	@%p8 bra 	BB5_7;

	mov.u64 	%rd9, $str10;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str11;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r32, 29;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB5_7:
	shl.b32 	%r33, %r4, 2;
	mov.u32 	%r34, 0;
	suld.b.2d.b32.trap {%r36}, [%rd4, {%r33, %r34}];

BB5_8:
	shl.b32 	%r35, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r35, %r2}], {%r36};

BB5_9:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<51>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r13, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r14, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f11, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f14, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r15, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r16, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r20, %r18, %r17, %r19;
	mul.lo.s32 	%r1, %r20, %r16;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.u32 	%r23, %tid.y;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r2, %r24, %r16;
	sub.s32 	%r25, %r14, %r16;
	setp.ge.u32	%p1, %r2, %r25;
	sub.s32 	%r26, %r13, %r16;
	setp.ge.u32	%p2, %r1, %r26;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_14;

	sub.f32 	%f17, %f13, %f11;
	cvt.rn.f32.u32	%f18, %r13;
	div.rn.f32 	%f19, %f17, %f18;
	cvt.rn.f32.u32	%f20, %r14;
	sub.f32 	%f21, %f14, %f12;
	div.rn.f32 	%f22, %f21, %f20;
	cvt.rn.f32.u32	%f23, %r1;
	fma.rn.f32 	%f1, %f23, %f19, %f11;
	cvt.rn.f32.u32	%f24, %r2;
	mul.f32 	%f25, %f24, %f22;
	sub.f32 	%f2, %f14, %f25;
	setp.eq.s32	%p4, %r15, 0;
	mov.f32 	%f31, 0f00000000;
	mov.u32 	%r46, 0;
	@%p4 bra 	BB6_5;

	mov.f32 	%f32, %f31;

BB6_3:
	mul.f32 	%f5, %f31, %f31;
	mul.f32 	%f6, %f32, %f32;
	add.f32 	%f26, %f6, %f5;
	setp.geu.f32	%p5, %f26, 0f40800000;
	@%p5 bra 	BB6_5;

	sub.f32 	%f27, %f6, %f5;
	add.f32 	%f7, %f1, %f27;
	add.f32 	%f28, %f32, %f32;
	fma.rn.f32 	%f31, %f28, %f31, %f2;
	add.s32 	%r46, %r46, 1;
	setp.lt.u32	%p6, %r46, %r15;
	mov.f32 	%f32, %f7;
	@%p6 bra 	BB6_3;

BB6_5:
	setp.eq.s32	%p7, %r16, 0;
	@%p7 bra 	BB6_14;

	cvt.rn.f32.u32	%f29, %r46;
	cvt.rzi.u32.f32	%r33, %f29;
	mul.lo.s32 	%r34, %r2, %r12;
	cvt.u64.u32	%rd3, %r34;
	cvta.to.global.u64 	%rd4, %rd2;
	add.s64 	%rd5, %rd4, %rd3;
	cvt.rn.f32.u32	%f30, %r16;
	rcp.rn.f32 	%f9, %f30;
	cvt.rn.f32.u32	%f10, %r33;
	mul.wide.u32 	%rd6, %r1, 16;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r32, %r16, 3;
	mov.u32 	%r47, 1;
	mov.u32 	%r50, 0;
	setp.eq.s32	%p8, %r32, 0;
	@%p8 bra 	BB6_12;

	setp.eq.s32	%p9, %r32, 1;
	mov.u32 	%r48, %r50;
	@%p9 bra 	BB6_11;

	setp.eq.s32	%p10, %r32, 2;
	@%p10 bra 	BB6_10;

	st.global.f32 	[%rd1], %f10;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r41, 0;
	st.global.u32 	[%rd1+12], %r41;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd1+8], %rs1;
	mov.u32 	%r47, 2;

BB6_10:
	st.global.f32 	[%rd1], %f10;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r42, 0;
	st.global.u32 	[%rd1+12], %r42;
	mov.u16 	%rs2, 0;
	st.global.u8 	[%rd1+8], %rs2;
	mov.u32 	%r48, %r47;

BB6_11:
	st.global.f32 	[%rd1], %f10;
	st.global.f32 	[%rd1+4], %f9;
	st.global.u32 	[%rd1+12], %r50;
	mov.u16 	%rs3, 0;
	st.global.u8 	[%rd1+8], %rs3;
	add.s32 	%r50, %r48, 1;

BB6_12:
	setp.lt.u32	%p11, %r16, 4;
	@%p11 bra 	BB6_14;

BB6_13:
	st.global.f32 	[%rd1], %f10;
	st.global.f32 	[%rd1+4], %f9;
	mov.u32 	%r44, 0;
	st.global.u32 	[%rd1+12], %r44;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd1+8], %rs4;
	add.s32 	%r50, %r50, 4;
	setp.lt.u32	%p12, %r50, %r16;
	@%p12 bra 	BB6_13;

BB6_14:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 17

BB7_2:
	ret;
}


