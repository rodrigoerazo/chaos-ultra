//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 8 .b8 julia_c[16];
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[18] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 106, 117, 108, 105, 97, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[34] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 61, 0, 32, 0, 49, 0, 0, 0};
.global .align 16 .b8 $str8[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str10[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str11[122] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 106, 0, 117, 0, 108, 0, 105, 0, 97, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<82>;
	.reg .b32 	%r<106>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r28, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f35, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f34, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f33, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f32, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r29, [fractalRenderMainFloat_param_4];
	ld.param.u32 	%r103, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r31, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r32, 71;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r33, %tid.x;
	mov.u32 	%r34, %tid.y;
	mad.lo.s32 	%r35, %r1, %r34, %r33;
	shl.b32 	%r36, %r1, 2;
	and.b32  	%r37, %r35, 15;
	rem.u32 	%r38, %r35, %r36;
	sub.s32 	%r39, %r38, %r37;
	shr.u32 	%r40, %r39, 2;
	and.b32  	%r41, %r35, 3;
	add.s32 	%r42, %r40, %r41;
	div.u32 	%r43, %r35, %r36;
	shl.b32 	%r44, %r43, 2;
	bfe.u32 	%r45, %r35, 2, 2;
	add.s32 	%r46, %r44, %r45;
	mov.u32 	%r47, %ctaid.x;
	mad.lo.s32 	%r4, %r47, %r1, %r42;
	mov.u32 	%r48, %ctaid.y;
	mov.u32 	%r49, %ntid.y;
	mad.lo.s32 	%r5, %r48, %r49, %r46;
	setp.lt.u32	%p2, %r4, %r27;
	setp.lt.u32	%p3, %r5, %r28;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_30;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r103, 65;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r50, 119;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r50;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r103, 0;
	cvt.rn.f32.u32	%f81, %r103;
	mov.u32 	%r52, 0;
	@%p6 bra 	BB1_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	ld.const.f64 	%fd1, [julia_c];
	cvt.rn.f32.f64	%f6, %fd1;
	ld.const.f64 	%fd2, [julia_c+8];
	cvt.rn.f32.f64	%f7, %fd2;
	cvt.rn.f32.u32	%f36, %r27;
	sub.f32 	%f37, %f34, %f32;
	div.rn.f32 	%f8, %f37, %f36;
	cvt.rn.f32.u32	%f38, %r28;
	sub.f32 	%f39, %f35, %f33;
	div.rn.f32 	%f9, %f39, %f38;
	mov.u32 	%r54, 0;
	and.b32  	%r57, %r31, 1;
	mov.u32 	%r94, %r54;
	mov.u32 	%r104, %r54;

BB1_8:
	mov.u32 	%r8, %r103;
	mov.u32 	%r6, %r94;
	cvt.rn.f32.u32	%f40, %r6;
	div.rn.f32 	%f41, %f40, %f81;
	add.f32 	%f42, %f4, %f41;
	add.f32 	%f43, %f5, %f41;
	neg.f32 	%f44, %f43;
	fma.rn.f32 	%f75, %f8, %f42, %f32;
	fma.rn.f32 	%f74, %f9, %f44, %f35;
	setp.eq.s32	%p7, %r29, 0;
	mov.u32 	%r98, %r54;
	@%p7 bra 	BB1_11;

BB1_9:
	mul.f32 	%f15, %f74, %f74;
	mul.f32 	%f16, %f75, %f75;
	add.f32 	%f45, %f16, %f15;
	setp.geu.f32	%p8, %f45, 0f40800000;
	@%p8 bra 	BB1_11;

	sub.f32 	%f46, %f16, %f15;
	add.f32 	%f17, %f6, %f46;
	add.f32 	%f47, %f75, %f75;
	fma.rn.f32 	%f74, %f47, %f74, %f7;
	add.s32 	%r98, %r98, 1;
	setp.lt.u32	%p9, %r98, %r29;
	mov.f32 	%f75, %f17;
	@%p9 bra 	BB1_9;

BB1_11:
	cvt.rn.f32.u32	%f48, %r98;
	cvt.rzi.u32.f32	%r12, %f48;
	add.s32 	%r104, %r12, %r104;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB1_13;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r6, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r12;

BB1_13:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r57, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r58, %r8, 1;
	setp.eq.s32	%p16, %r6, %r58;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r94, %r6, 1;
	mov.u32 	%r103, %r8;
	@!%p17 bra 	BB1_27;
	bra.uni 	BB1_14;

BB1_14:
	div.u32 	%r59, %r104, %r94;
	cvt.rn.f32.u32	%f19, %r59;
	setp.eq.s32	%p18, %r6, 0;
	mov.f32 	%f80, 0f00000000;
	@%p18 bra 	BB1_23;

	and.b32  	%r61, %r6, 3;
	setp.eq.s32	%p19, %r61, 0;
	mov.f32 	%f80, 0f00000000;
	mov.u32 	%r102, 0;
	@%p19 bra 	BB1_21;

	setp.eq.s32	%p20, %r61, 1;
	mov.f32 	%f77, 0f00000000;
	mov.u32 	%r100, 0;
	@%p20 bra 	BB1_20;

	setp.eq.s32	%p21, %r61, 2;
	mov.f32 	%f76, 0f00000000;
	mov.u32 	%r99, 0;
	@%p21 bra 	BB1_19;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r67, [%rd20];
	cvt.rn.f32.u32	%f53, %r67;
	sub.f32 	%f54, %f53, %f19;
	fma.rn.f32 	%f76, %f54, %f54, 0f00000000;
	mov.u32 	%r99, 1;

BB1_19:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r99, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r68, [%rd24];
	cvt.rn.f32.u32	%f55, %r68;
	sub.f32 	%f56, %f55, %f19;
	fma.rn.f32 	%f77, %f56, %f56, %f76;
	add.s32 	%r100, %r99, 1;

BB1_20:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r100, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r69, [%rd28];
	cvt.rn.f32.u32	%f57, %r69;
	sub.f32 	%f58, %f57, %f19;
	fma.rn.f32 	%f80, %f58, %f58, %f77;
	add.s32 	%r102, %r100, 1;

BB1_21:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB1_23;

BB1_22:
	mul.wide.u32 	%rd30, %r102, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r70, [%rd31];
	cvt.rn.f32.u32	%f59, %r70;
	sub.f32 	%f60, %f59, %f19;
	fma.rn.f32 	%f61, %f60, %f60, %f80;
	add.s32 	%r71, %r102, 1;
	mul.wide.u32 	%rd32, %r71, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r72, [%rd33];
	cvt.rn.f32.u32	%f62, %r72;
	sub.f32 	%f63, %f62, %f19;
	fma.rn.f32 	%f64, %f63, %f63, %f61;
	add.s32 	%r73, %r102, 2;
	mul.wide.u32 	%rd34, %r73, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r74, [%rd35];
	cvt.rn.f32.u32	%f65, %r74;
	sub.f32 	%f66, %f65, %f19;
	fma.rn.f32 	%f67, %f66, %f66, %f64;
	add.s32 	%r75, %r102, 3;
	mul.wide.u32 	%rd36, %r75, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r76, [%rd37];
	cvt.rn.f32.u32	%f68, %r76;
	sub.f32 	%f69, %f68, %f19;
	fma.rn.f32 	%f80, %f69, %f69, %f67;
	add.s32 	%r102, %r102, 4;
	setp.lt.u32	%p23, %r102, %r6;
	@%p23 bra 	BB1_22;

BB1_23:
	add.s32 	%r77, %r6, -1;
	cvt.rn.f32.u32	%f70, %r77;
	div.rn.f32 	%f71, %f80, %f70;
	div.rn.f32 	%f29, %f71, %f19;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB1_25;

	// inline asm
	activemask.b32 %r78;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r80, %r81}, [%rd39];
	setp.eq.s32	%p25, %r80, %r81;
	vote.sync.all.pred 	%p26, %p25, %r78;
	mov.u32 	%r103, 2;
	@%p26 bra 	BB1_27;

BB1_25:
	// inline asm
	activemask.b32 %r85;
	// inline asm
	setp.lt.f32	%p27, %f29, 0f3C23D70A;
	vote.sync.all.pred 	%p28, %p27, %r85;
	mov.u32 	%r103, %r94;
	@%p28 bra 	BB1_27;

	// inline asm
	activemask.b32 %r87;
	// inline asm
	setp.le.f32	%p29, %f29, 0f3F800000;
	vote.sync.all.pred 	%p30, %p29, %r87;
	setp.ge.u32	%p31, %r6, %r58;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r103, %r94, %r8, %p32;

BB1_27:
	cvt.rn.f32.u32	%f81, %r103;
	setp.lt.u32	%p33, %r94, %r103;
	@%p33 bra 	BB1_8;
	bra.uni 	BB1_28;

BB1_6:
	mov.u32 	%r104, %r52;
	mov.u32 	%r103, %r52;

BB1_28:
	mul.lo.s32 	%r90, %r5, %r26;
	cvt.u64.u32	%rd40, %r90;
	cvta.to.global.u64 	%rd41, %rd2;
	add.s64 	%rd42, %rd41, %rd40;
	div.u32 	%r91, %r104, %r103;
	cvt.rn.f32.u32	%f72, %r91;
	mul.wide.u32 	%rd43, %r4, 16;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f72;
	st.global.f32 	[%rd44+4], %f81;
	st.global.u32 	[%rd44+12], %r52;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd44+8], %rs1;
	setp.gt.f32	%p34, %f81, 0f00000000;
	@%p34 bra 	BB1_30;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r93, 206;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r93;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_30:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<106>;
	.reg .f64 	%fd<75>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd31, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd30, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd29, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd28, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r29, [fractalRenderMainDouble_param_4];
	ld.param.u32 	%r30, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r31, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r32, 71;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r33, %tid.x;
	mov.u32 	%r34, %tid.y;
	mad.lo.s32 	%r35, %r1, %r34, %r33;
	shl.b32 	%r36, %r1, 2;
	and.b32  	%r37, %r35, 15;
	rem.u32 	%r38, %r35, %r36;
	sub.s32 	%r39, %r38, %r37;
	shr.u32 	%r40, %r39, 2;
	and.b32  	%r41, %r35, 3;
	add.s32 	%r42, %r40, %r41;
	div.u32 	%r43, %r35, %r36;
	shl.b32 	%r44, %r43, 2;
	bfe.u32 	%r45, %r35, 2, 2;
	add.s32 	%r46, %r44, %r45;
	mov.u32 	%r47, %ctaid.x;
	mad.lo.s32 	%r4, %r47, %r1, %r42;
	mov.u32 	%r48, %ctaid.y;
	mov.u32 	%r49, %ntid.y;
	mad.lo.s32 	%r5, %r48, %r49, %r46;
	setp.lt.u32	%p2, %r4, %r27;
	setp.lt.u32	%p3, %r5, %r28;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_29;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r30, 65;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r50, 119;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r50;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r30, 0;
	mov.u32 	%r52, 0;
	mov.u32 	%r104, %r52;
	mov.u32 	%r103, %r52;
	@%p6 bra 	BB2_27;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.f64 	%fd5, [julia_c];
	ld.const.f64 	%fd6, [julia_c+8];
	cvt.rn.f64.u32	%fd32, %r27;
	sub.f64 	%fd33, %fd30, %fd28;
	div.rn.f64 	%fd7, %fd33, %fd32;
	cvt.rn.f64.u32	%fd34, %r28;
	sub.f64 	%fd35, %fd31, %fd29;
	div.rn.f64 	%fd8, %fd35, %fd34;
	mov.u32 	%r54, 0;
	and.b32  	%r57, %r31, 1;
	mov.u32 	%r94, %r54;
	mov.u32 	%r104, %r54;
	mov.u32 	%r103, %r30;

BB2_7:
	mov.u32 	%r8, %r103;
	mov.u32 	%r6, %r94;
	cvt.rn.f64.u32	%fd36, %r8;
	cvt.rn.f64.u32	%fd37, %r6;
	div.rn.f64 	%fd38, %fd37, %fd36;
	add.f64 	%fd39, %fd3, %fd38;
	add.f64 	%fd40, %fd4, %fd38;
	neg.f64 	%fd41, %fd40;
	fma.rn.f64 	%fd69, %fd7, %fd39, %fd28;
	fma.rn.f64 	%fd68, %fd8, %fd41, %fd31;
	setp.eq.s32	%p7, %r29, 0;
	mov.u32 	%r98, %r54;
	@%p7 bra 	BB2_10;

BB2_8:
	mul.f64 	%fd13, %fd68, %fd68;
	mul.f64 	%fd14, %fd69, %fd69;
	add.f64 	%fd42, %fd14, %fd13;
	setp.geu.f64	%p8, %fd42, 0d4010000000000000;
	@%p8 bra 	BB2_10;

	sub.f64 	%fd43, %fd14, %fd13;
	add.f64 	%fd15, %fd5, %fd43;
	add.f64 	%fd44, %fd69, %fd69;
	fma.rn.f64 	%fd68, %fd44, %fd68, %fd6;
	add.s32 	%r98, %r98, 1;
	setp.lt.u32	%p9, %r98, %r29;
	mov.f64 	%fd69, %fd15;
	@%p9 bra 	BB2_8;

BB2_10:
	cvt.rn.f32.u32	%f1, %r98;
	cvt.rzi.u32.f32	%r12, %f1;
	add.s32 	%r104, %r12, %r104;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB2_12;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r6, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r12;

BB2_12:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r57, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r58, %r8, 1;
	setp.eq.s32	%p16, %r6, %r58;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r94, %r6, 1;
	mov.u32 	%r103, %r8;
	@!%p17 bra 	BB2_26;
	bra.uni 	BB2_13;

BB2_13:
	div.u32 	%r59, %r104, %r94;
	cvt.rn.f64.u32	%fd17, %r59;
	setp.eq.s32	%p18, %r6, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	@%p18 bra 	BB2_22;

	and.b32  	%r61, %r6, 3;
	setp.eq.s32	%p19, %r61, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	mov.u32 	%r102, 0;
	@%p19 bra 	BB2_20;

	setp.eq.s32	%p20, %r61, 1;
	mov.f64 	%fd71, 0d0000000000000000;
	mov.u32 	%r100, 0;
	@%p20 bra 	BB2_19;

	setp.eq.s32	%p21, %r61, 2;
	mov.f64 	%fd70, 0d0000000000000000;
	mov.u32 	%r99, 0;
	@%p21 bra 	BB2_18;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r67, [%rd20];
	cvt.rn.f64.u32	%fd49, %r67;
	sub.f64 	%fd50, %fd49, %fd17;
	fma.rn.f64 	%fd70, %fd50, %fd50, 0d0000000000000000;
	mov.u32 	%r99, 1;

BB2_18:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r99, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r68, [%rd24];
	cvt.rn.f64.u32	%fd51, %r68;
	sub.f64 	%fd52, %fd51, %fd17;
	fma.rn.f64 	%fd71, %fd52, %fd52, %fd70;
	add.s32 	%r100, %r99, 1;

BB2_19:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r100, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r69, [%rd28];
	cvt.rn.f64.u32	%fd53, %r69;
	sub.f64 	%fd54, %fd53, %fd17;
	fma.rn.f64 	%fd74, %fd54, %fd54, %fd71;
	add.s32 	%r102, %r100, 1;

BB2_20:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB2_22;

BB2_21:
	mul.wide.u32 	%rd30, %r102, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r70, [%rd31];
	cvt.rn.f64.u32	%fd55, %r70;
	sub.f64 	%fd56, %fd55, %fd17;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd74;
	add.s32 	%r71, %r102, 1;
	mul.wide.u32 	%rd32, %r71, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r72, [%rd33];
	cvt.rn.f64.u32	%fd58, %r72;
	sub.f64 	%fd59, %fd58, %fd17;
	fma.rn.f64 	%fd60, %fd59, %fd59, %fd57;
	add.s32 	%r73, %r102, 2;
	mul.wide.u32 	%rd34, %r73, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r74, [%rd35];
	cvt.rn.f64.u32	%fd61, %r74;
	sub.f64 	%fd62, %fd61, %fd17;
	fma.rn.f64 	%fd63, %fd62, %fd62, %fd60;
	add.s32 	%r75, %r102, 3;
	mul.wide.u32 	%rd36, %r75, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r76, [%rd37];
	cvt.rn.f64.u32	%fd64, %r76;
	sub.f64 	%fd65, %fd64, %fd17;
	fma.rn.f64 	%fd74, %fd65, %fd65, %fd63;
	add.s32 	%r102, %r102, 4;
	setp.lt.u32	%p23, %r102, %r6;
	@%p23 bra 	BB2_21;

BB2_22:
	add.s32 	%r77, %r6, -1;
	cvt.rn.f64.u32	%fd66, %r77;
	div.rn.f64 	%fd67, %fd74, %fd66;
	div.rn.f64 	%fd27, %fd67, %fd17;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB2_24;

	// inline asm
	activemask.b32 %r78;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r80, %r81}, [%rd39];
	setp.eq.s32	%p25, %r80, %r81;
	vote.sync.all.pred 	%p26, %p25, %r78;
	mov.u32 	%r103, 2;
	@%p26 bra 	BB2_26;

BB2_24:
	// inline asm
	activemask.b32 %r85;
	// inline asm
	setp.lt.f64	%p27, %fd27, 0d3F847AE140000000;
	vote.sync.all.pred 	%p28, %p27, %r85;
	mov.u32 	%r103, %r94;
	@%p28 bra 	BB2_26;

	// inline asm
	activemask.b32 %r87;
	// inline asm
	setp.le.f64	%p29, %fd27, 0d3FF0000000000000;
	vote.sync.all.pred 	%p30, %p29, %r87;
	setp.ge.u32	%p31, %r6, %r58;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r103, %r94, %r8, %p32;

BB2_26:
	setp.lt.u32	%p33, %r94, %r103;
	@%p33 bra 	BB2_7;

BB2_27:
	mul.lo.s32 	%r90, %r5, %r26;
	cvt.u64.u32	%rd40, %r90;
	cvta.to.global.u64 	%rd41, %rd2;
	add.s64 	%rd42, %rd41, %rd40;
	div.u32 	%r91, %r104, %r103;
	cvt.rn.f32.u32	%f2, %r91;
	mul.wide.u32 	%rd43, %r4, 16;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f2;
	cvt.rn.f32.u32	%f3, %r103;
	st.global.f32 	[%rd44+4], %f3;
	st.global.u32 	[%rd44+12], %r52;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd44+8], %rs1;
	setp.gt.f32	%p34, %f3, 0f00000000;
	@%p34 bra 	BB2_29;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r93, 206;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r93;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_29:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<59>;
	.reg .b16 	%rs<10>;
	.reg .f32 	%f<179>;
	.reg .b32 	%r<141>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r35, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r37, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r36, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f57, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f56, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f55, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f54, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r38, [fractalRenderAdvancedFloat_param_4];
	ld.param.u32 	%r39, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r40, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f61, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f60, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f59, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f58, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r41, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r43, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r42, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r44, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r44;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r45, %tid.x;
	mov.u32 	%r46, %tid.y;
	mad.lo.s32 	%r47, %r1, %r46, %r45;
	shl.b32 	%r48, %r1, 2;
	and.b32  	%r49, %r47, 15;
	rem.u32 	%r50, %r47, %r48;
	sub.s32 	%r51, %r50, %r49;
	shr.u32 	%r52, %r51, 2;
	and.b32  	%r53, %r47, 3;
	add.s32 	%r54, %r52, %r53;
	div.u32 	%r55, %r47, %r48;
	shl.b32 	%r56, %r55, 2;
	bfe.u32 	%r57, %r47, 2, 2;
	add.s32 	%r58, %r56, %r57;
	mov.u32 	%r59, %ctaid.x;
	mad.lo.s32 	%r4, %r59, %r1, %r54;
	mov.u32 	%r60, %ctaid.y;
	mov.u32 	%r61, %ntid.y;
	mad.lo.s32 	%r5, %r60, %r61, %r58;
	setp.lt.u32	%p2, %r4, %r36;
	setp.lt.u32	%p3, %r5, %r37;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB3_50;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r63, %r40, 24;
	mov.u16 	%rs8, 0;
	mov.u32 	%r126, 0;
	mov.f32 	%f165, 0f00000000;
	setp.ne.s32	%p5, %r63, 8;
	@%p5 bra 	BB3_4;

	cvt.rn.f32.u32	%f64, %r4;
	sub.f32 	%f65, %f60, %f58;
	cvt.rn.f32.u32	%f66, %r36;
	div.rn.f32 	%f67, %f65, %f66;
	sub.f32 	%f68, %f61, %f59;
	cvt.rn.f32.u32	%f69, %r37;
	div.rn.f32 	%f70, %f68, %f69;
	neg.f32 	%f71, %f70;
	sub.f32 	%f72, %f54, %f58;
	div.rn.f32 	%f73, %f72, %f67;
	sub.f32 	%f74, %f57, %f61;
	div.rn.f32 	%f75, %f74, %f71;
	sub.f32 	%f76, %f56, %f54;
	div.rn.f32 	%f77, %f76, %f65;
	sub.f32 	%f78, %f57, %f55;
	div.rn.f32 	%f79, %f78, %f68;
	cvt.rn.f32.u32	%f80, %r5;
	fma.rn.f32 	%f5, %f64, %f77, %f73;
	fma.rn.f32 	%f6, %f80, %f79, %f75;
	abs.f32 	%f81, %f5;
	mov.b32 	 %r64, %f5;
	and.b32  	%r65, %r64, -2147483648;
	or.b32  	%r66, %r65, 1056964608;
	mov.b32 	 %f82, %r66;
	add.f32 	%f83, %f5, %f82;
	cvt.rzi.f32.f32	%f84, %f83;
	setp.gt.f32	%p6, %f81, 0f4B000000;
	selp.f32	%f163, %f5, %f84, %p6;
	setp.geu.f32	%p7, %f81, 0f3F000000;
	@%p7 bra 	BB3_7;

	cvt.rzi.f32.f32	%f163, %f5;

BB3_7:
	cvt.rzi.s32.f32	%r6, %f163;
	mov.b32 	 %r67, %f6;
	and.b32  	%r68, %r67, -2147483648;
	or.b32  	%r69, %r68, 1056964608;
	mov.b32 	 %f85, %r69;
	add.f32 	%f86, %f6, %f85;
	cvt.rzi.f32.f32	%f87, %f86;
	abs.f32 	%f88, %f6;
	setp.gt.f32	%p8, %f88, 0f4B000000;
	selp.f32	%f164, %f6, %f87, %p8;
	setp.geu.f32	%p9, %f88, 0f3F000000;
	@%p9 bra 	BB3_9;

	cvt.rzi.f32.f32	%f164, %f6;

BB3_9:
	setp.lt.u32	%p10, %r6, %r36;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f32	%r7, %f164;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r37;
	and.pred  	%p16, %p15, %p14;
	mov.f32 	%f166, %f165;
	@!%p16 bra 	BB3_11;
	bra.uni 	BB3_10;

BB3_10:
	cvta.to.global.u64 	%rd10, %rd3;
	mul.lo.s32 	%r71, %r7, %r41;
	cvt.u64.u32	%rd11, %r71;
	add.s64 	%rd12, %rd10, %rd11;
	mul.wide.u32 	%rd13, %r6, 16;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.f32 	%f165, [%rd14];
	ld.global.f32 	%f166, [%rd14+4];
	ld.global.u32 	%r126, [%rd14+12];
	mov.u16 	%rs8, 1;
	bra.uni 	BB3_11;

BB3_4:
	mov.f32 	%f166, %f165;

BB3_11:
	and.b32  	%r72, %r40, 20;
	setp.eq.s32	%p17, %r72, 20;
	@%p17 bra 	BB3_13;
	bra.uni 	BB3_12;

BB3_13:
	and.b32  	%r73, %r4, -8;
	cvt.rn.f32.u32	%f91, %r73;
	and.b32  	%r74, %r5, -4;
	cvt.rn.f32.u32	%f92, %r74;
	cvt.rn.f32.u32	%f93, %r42;
	sub.f32 	%f94, %f93, %f91;
	cvt.rn.f32.u32	%f95, %r43;
	sub.f32 	%f96, %f95, %f92;
	mul.f32 	%f97, %f96, %f96;
	fma.rn.f32 	%f98, %f94, %f94, %f97;
	sqrt.rn.f32 	%f99, %f98;
	mul.f32 	%f100, %f99, 0f3CD94079;
	ld.global.f32 	%f101, [screenDistance];
	div.rn.f32 	%f17, %f100, %f101;
	abs.f32 	%f18, %f17;
	setp.leu.f32	%p21, %f18, 0f3F800000;
	mov.f32 	%f167, %f18;
	@%p21 bra 	BB3_15;

	rcp.rn.f32 	%f167, %f18;

BB3_15:
	mul.rn.f32 	%f102, %f167, %f167;
	mov.f32 	%f103, 0fC0B59883;
	mov.f32 	%f104, 0fBF52C7EA;
	fma.rn.f32 	%f105, %f102, %f104, %f103;
	mov.f32 	%f106, 0fC0D21907;
	fma.rn.f32 	%f107, %f105, %f102, %f106;
	mul.f32 	%f108, %f102, %f107;
	mul.f32 	%f109, %f167, %f108;
	add.f32 	%f110, %f102, 0f41355DC0;
	mov.f32 	%f111, 0f41E6BD60;
	fma.rn.f32 	%f112, %f110, %f102, %f111;
	mov.f32 	%f113, 0f419D92C8;
	fma.rn.f32 	%f114, %f112, %f102, %f113;
	rcp.rn.f32 	%f115, %f114;
	fma.rn.f32 	%f116, %f109, %f115, %f167;
	mov.f32 	%f117, 0f3FC90FDB;
	sub.f32 	%f118, %f117, %f116;
	setp.gt.f32	%p22, %f18, 0f3F800000;
	selp.f32	%f119, %f118, %f116, %p22;
	mov.b32 	 %r75, %f119;
	mov.b32 	 %r76, %f17;
	and.b32  	%r77, %r76, -2147483648;
	or.b32  	%r78, %r75, %r77;
	mov.b32 	 %f120, %r78;
	setp.gtu.f32	%p23, %f18, 0f7F800000;
	selp.f32	%f121, %f119, %f120, %p23;
	mul.f32 	%f122, %f121, 0f43340000;
	div.rn.f32 	%f21, %f122, 0f40490FDB;
	setp.ge.f32	%p24, %f21, 0f00000000;
	@%p24 bra 	BB3_17;

	mov.u64 	%rd15, $str6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str2;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r79, 255;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r79;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_17:
	fma.rn.f32 	%f123, %f21, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p25, %f21, 0f40B00000;
	selp.f32	%f124, %f123, 0f3F800000, %p25;
	cvt.rn.f32.u32	%f125, %r39;
	mul.f32 	%f126, %f125, %f124;
	cvt.rzi.u32.f32	%r137, %f126;
	setp.gtu.f32	%p26, %f21, 0f42700000;
	@%p26 bra 	BB3_19;

	mov.u32 	%r80, 1;
	max.u32 	%r137, %r80, %r137;
	bra.uni 	BB3_19;

BB3_12:
	setp.eq.s32	%p18, %r39, 0;
	setp.eq.s16	%p19, %rs8, 0;
	and.pred  	%p20, %p18, %p19;
	selp.b32	%r137, 1, %r39, %p20;

BB3_19:
	mov.u16 	%rs9, 1;
	setp.ne.s16	%p27, %rs8, 0;
	@%p27 bra 	BB3_48;

	setp.ne.s32	%p28, %r137, 0;
	@%p28 bra 	BB3_22;

	mov.u64 	%rd21, $str7;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r81, 345;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_22:
	cvt.rn.f32.u32	%f127, %r36;
	sub.f32 	%f128, %f56, %f54;
	div.rn.f32 	%f22, %f128, %f127;
	cvt.rn.f32.u32	%f129, %r37;
	sub.f32 	%f130, %f57, %f55;
	div.rn.f32 	%f23, %f130, %f129;
	setp.lt.u32	%p29, %r137, 65;
	@%p29 bra 	BB3_24;

	mov.u64 	%rd27, $str9;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd29, $str2;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r82, 119;
	mov.u64 	%rd31, 0;
	mov.u64 	%rd32, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd28;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b32 param2;
	st.param.b32	[param2+0], %r82;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_24:
	setp.eq.s32	%p30, %r137, 0;
	cvt.rn.f32.u32	%f166, %r137;
	mov.u32 	%r126, 0;
	@%p30 bra 	BB3_25;

	cvt.rn.f32.u32	%f25, %r4;
	cvt.rn.f32.u32	%f26, %r5;
	ld.const.f64 	%fd1, [julia_c];
	cvt.rn.f32.f64	%f27, %fd1;
	ld.const.f64 	%fd2, [julia_c+8];
	cvt.rn.f32.f64	%f28, %fd2;
	mov.u32 	%r86, 0;
	mov.u32 	%r128, %r86;
	mov.u32 	%r138, %r86;

BB3_27:
	mov.u32 	%r16, %r137;
	mov.u32 	%r14, %r128;
	cvt.rn.f32.u32	%f131, %r14;
	div.rn.f32 	%f132, %f131, %f166;
	add.f32 	%f133, %f25, %f132;
	add.f32 	%f134, %f26, %f132;
	neg.f32 	%f135, %f134;
	fma.rn.f32 	%f170, %f22, %f133, %f54;
	fma.rn.f32 	%f169, %f23, %f135, %f57;
	setp.eq.s32	%p31, %r38, 0;
	mov.u32 	%r132, %r86;
	@%p31 bra 	BB3_30;

BB3_28:
	mul.f32 	%f34, %f169, %f169;
	mul.f32 	%f35, %f170, %f170;
	add.f32 	%f136, %f35, %f34;
	setp.geu.f32	%p32, %f136, 0f40800000;
	@%p32 bra 	BB3_30;

	sub.f32 	%f137, %f35, %f34;
	add.f32 	%f36, %f27, %f137;
	add.f32 	%f138, %f170, %f170;
	fma.rn.f32 	%f169, %f138, %f169, %f28;
	add.s32 	%r132, %r132, 1;
	setp.lt.u32	%p33, %r132, %r38;
	mov.f32 	%f170, %f36;
	@%p33 bra 	BB3_28;

BB3_30:
	cvt.rn.f32.u32	%f139, %r132;
	cvt.rzi.u32.f32	%r20, %f139;
	add.s32 	%r138, %r20, %r138;
	setp.gt.u32	%p34, %r14, 9;
	@%p34 bra 	BB3_32;

	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r14, 4;
	add.s64 	%rd36, %rd34, %rd35;
	st.local.u32 	[%rd36], %r20;

BB3_32:
	setp.lt.u32	%p35, %r14, 10;
	and.b32  	%r89, %r40, 1;
	setp.eq.b32	%p36, %r89, 1;
	setp.ne.s32	%p37, %r14, 0;
	and.pred  	%p38, %p35, %p37;
	and.pred  	%p39, %p38, %p36;
	shr.u32 	%r90, %r16, 1;
	setp.eq.s32	%p40, %r14, %r90;
	or.pred  	%p41, %p39, %p40;
	add.s32 	%r128, %r14, 1;
	mov.u32 	%r137, %r16;
	@!%p41 bra 	BB3_46;
	bra.uni 	BB3_33;

BB3_33:
	div.u32 	%r91, %r138, %r128;
	cvt.rn.f32.u32	%f38, %r91;
	setp.eq.s32	%p42, %r14, 0;
	mov.f32 	%f175, 0f00000000;
	@%p42 bra 	BB3_42;

	and.b32  	%r93, %r14, 3;
	setp.eq.s32	%p43, %r93, 0;
	mov.f32 	%f175, 0f00000000;
	mov.u32 	%r136, 0;
	@%p43 bra 	BB3_40;

	setp.eq.s32	%p44, %r93, 1;
	mov.f32 	%f172, 0f00000000;
	mov.u32 	%r134, 0;
	@%p44 bra 	BB3_39;

	setp.eq.s32	%p45, %r93, 2;
	mov.f32 	%f171, 0f00000000;
	mov.u32 	%r133, 0;
	@%p45 bra 	BB3_38;

	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	ld.local.u32 	%r99, [%rd38];
	cvt.rn.f32.u32	%f144, %r99;
	sub.f32 	%f145, %f144, %f38;
	fma.rn.f32 	%f171, %f145, %f145, 0f00000000;
	mov.u32 	%r133, 1;

BB3_38:
	add.u64 	%rd39, %SP, 0;
	cvta.to.local.u64 	%rd40, %rd39;
	mul.wide.u32 	%rd41, %r133, 4;
	add.s64 	%rd42, %rd40, %rd41;
	ld.local.u32 	%r100, [%rd42];
	cvt.rn.f32.u32	%f146, %r100;
	sub.f32 	%f147, %f146, %f38;
	fma.rn.f32 	%f172, %f147, %f147, %f171;
	add.s32 	%r134, %r133, 1;

BB3_39:
	add.u64 	%rd43, %SP, 0;
	cvta.to.local.u64 	%rd44, %rd43;
	mul.wide.u32 	%rd45, %r134, 4;
	add.s64 	%rd46, %rd44, %rd45;
	ld.local.u32 	%r101, [%rd46];
	cvt.rn.f32.u32	%f148, %r101;
	sub.f32 	%f149, %f148, %f38;
	fma.rn.f32 	%f175, %f149, %f149, %f172;
	add.s32 	%r136, %r134, 1;

BB3_40:
	add.u64 	%rd47, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd47;
	setp.lt.u32	%p46, %r14, 4;
	@%p46 bra 	BB3_42;

BB3_41:
	mul.wide.u32 	%rd48, %r136, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r102, [%rd49];
	cvt.rn.f32.u32	%f150, %r102;
	sub.f32 	%f151, %f150, %f38;
	fma.rn.f32 	%f152, %f151, %f151, %f175;
	add.s32 	%r103, %r136, 1;
	mul.wide.u32 	%rd50, %r103, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.local.u32 	%r104, [%rd51];
	cvt.rn.f32.u32	%f153, %r104;
	sub.f32 	%f154, %f153, %f38;
	fma.rn.f32 	%f155, %f154, %f154, %f152;
	add.s32 	%r105, %r136, 2;
	mul.wide.u32 	%rd52, %r105, 4;
	add.s64 	%rd53, %rd1, %rd52;
	ld.local.u32 	%r106, [%rd53];
	cvt.rn.f32.u32	%f156, %r106;
	sub.f32 	%f157, %f156, %f38;
	fma.rn.f32 	%f158, %f157, %f157, %f155;
	add.s32 	%r107, %r136, 3;
	mul.wide.u32 	%rd54, %r107, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.local.u32 	%r108, [%rd55];
	cvt.rn.f32.u32	%f159, %r108;
	sub.f32 	%f160, %f159, %f38;
	fma.rn.f32 	%f175, %f160, %f160, %f158;
	add.s32 	%r136, %r136, 4;
	setp.lt.u32	%p47, %r136, %r14;
	@%p47 bra 	BB3_41;

BB3_42:
	add.s32 	%r109, %r14, -1;
	cvt.rn.f32.u32	%f161, %r109;
	div.rn.f32 	%f162, %f175, %f161;
	div.rn.f32 	%f48, %f162, %f38;
	setp.ne.s32	%p48, %r14, 1;
	@%p48 bra 	BB3_44;

	// inline asm
	activemask.b32 %r110;
	// inline asm
	add.u64 	%rd56, %SP, 0;
	cvta.to.local.u64 	%rd57, %rd56;
	ld.local.v2.u32 	{%r112, %r113}, [%rd57];
	setp.eq.s32	%p49, %r112, %r113;
	vote.sync.all.pred 	%p50, %p49, %r110;
	mov.u32 	%r137, 2;
	@%p50 bra 	BB3_46;

BB3_44:
	// inline asm
	activemask.b32 %r117;
	// inline asm
	setp.lt.f32	%p51, %f48, 0f3C23D70A;
	vote.sync.all.pred 	%p52, %p51, %r117;
	mov.u32 	%r137, %r128;
	@%p52 bra 	BB3_46;

	// inline asm
	activemask.b32 %r119;
	// inline asm
	setp.le.f32	%p53, %f48, 0f3F800000;
	vote.sync.all.pred 	%p54, %p53, %r119;
	setp.ge.u32	%p55, %r14, %r90;
	and.pred  	%p56, %p54, %p55;
	selp.b32	%r137, %r128, %r16, %p56;

BB3_46:
	cvt.rn.f32.u32	%f166, %r137;
	setp.lt.u32	%p57, %r128, %r137;
	@%p57 bra 	BB3_27;
	bra.uni 	BB3_47;

BB3_25:
	mov.u32 	%r138, %r126;
	mov.u32 	%r137, %r126;

BB3_47:
	div.u32 	%r123, %r138, %r137;
	cvt.rn.f32.u32	%f165, %r123;
	mov.u16 	%rs9, 0;

BB3_48:
	mul.lo.s32 	%r124, %r5, %r35;
	cvt.u64.u32	%rd58, %r124;
	cvta.to.global.u64 	%rd59, %rd2;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r4, 16;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.f32 	[%rd62], %f165;
	st.global.f32 	[%rd62+4], %f166;
	st.global.u32 	[%rd62+12], %r126;
	st.global.u8 	[%rd62+8], %rs9;
	setp.gt.f32	%p58, %f166, 0f00000000;
	@%p58 bra 	BB3_50;

	mov.u64 	%rd63, $str8;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r125, 352;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r125;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_50:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<59>;
	.reg .b16 	%rs<10>;
	.reg .f32 	%f<60>;
	.reg .b32 	%r<145>;
	.reg .f64 	%fd<114>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r35, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r37, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r36, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd40, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd39, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd38, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r38, [fractalRenderAdvancedDouble_param_4];
	ld.param.u32 	%r39, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r40, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd45, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd44, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd43, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r41, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r43, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r42, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r44, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r44;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_2:
	mov.u32 	%r45, %tid.x;
	mov.u32 	%r46, %tid.y;
	mad.lo.s32 	%r47, %r1, %r46, %r45;
	shl.b32 	%r48, %r1, 2;
	and.b32  	%r49, %r47, 15;
	rem.u32 	%r50, %r47, %r48;
	sub.s32 	%r51, %r50, %r49;
	shr.u32 	%r52, %r51, 2;
	and.b32  	%r53, %r47, 3;
	add.s32 	%r54, %r52, %r53;
	div.u32 	%r55, %r47, %r48;
	shl.b32 	%r56, %r55, 2;
	bfe.u32 	%r57, %r47, 2, 2;
	add.s32 	%r58, %r56, %r57;
	mov.u32 	%r59, %ctaid.x;
	mad.lo.s32 	%r4, %r59, %r1, %r54;
	mov.u32 	%r60, %ctaid.y;
	mov.u32 	%r61, %ntid.y;
	mad.lo.s32 	%r5, %r60, %r61, %r58;
	setp.lt.u32	%p2, %r4, %r36;
	setp.lt.u32	%p3, %r5, %r37;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_49;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r63, %r40, 24;
	mov.u16 	%rs8, 0;
	mov.u32 	%r130, 0;
	mov.f32 	%f55, 0f00000000;
	setp.ne.s32	%p5, %r63, 8;
	@%p5 bra 	BB4_4;

	cvt.rn.f64.u32	%fd46, %r4;
	sub.f64 	%fd47, %fd44, %fd42;
	cvt.rn.f64.u32	%fd48, %r36;
	div.rn.f64 	%fd49, %fd47, %fd48;
	sub.f64 	%fd50, %fd45, %fd43;
	cvt.rn.f64.u32	%fd51, %r37;
	div.rn.f64 	%fd52, %fd50, %fd51;
	neg.f64 	%fd53, %fd52;
	sub.f64 	%fd54, %fd38, %fd42;
	div.rn.f64 	%fd55, %fd54, %fd49;
	sub.f64 	%fd56, %fd41, %fd45;
	div.rn.f64 	%fd57, %fd56, %fd53;
	sub.f64 	%fd58, %fd40, %fd38;
	div.rn.f64 	%fd59, %fd58, %fd47;
	sub.f64 	%fd60, %fd41, %fd39;
	div.rn.f64 	%fd61, %fd60, %fd50;
	cvt.rn.f64.u32	%fd62, %r5;
	fma.rn.f64 	%fd105, %fd46, %fd59, %fd55;
	fma.rn.f64 	%fd106, %fd62, %fd61, %fd57;
	abs.f64 	%fd7, %fd105;
	setp.ge.f64	%p6, %fd7, 0d4330000000000000;
	@%p6 bra 	BB4_7;

	add.f64 	%fd63, %fd7, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd64, %fd63;
	setp.lt.f64	%p7, %fd7, 0d3FE0000000000000;
	selp.f64	%fd65, 0d0000000000000000, %fd64, %p7;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r64, %temp}, %fd65;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r65}, %fd65;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r66}, %fd105;
	}
	and.b32  	%r67, %r66, -2147483648;
	or.b32  	%r68, %r65, %r67;
	mov.b64 	%fd105, {%r64, %r68};

BB4_7:
	cvt.rzi.s32.f64	%r6, %fd105;
	abs.f64 	%fd10, %fd106;
	setp.ge.f64	%p8, %fd10, 0d4330000000000000;
	@%p8 bra 	BB4_9;

	add.f64 	%fd66, %fd10, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd67, %fd66;
	setp.lt.f64	%p9, %fd10, 0d3FE0000000000000;
	selp.f64	%fd68, 0d0000000000000000, %fd67, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r69, %temp}, %fd68;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r70}, %fd68;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r71}, %fd106;
	}
	and.b32  	%r72, %r71, -2147483648;
	or.b32  	%r73, %r70, %r72;
	mov.b64 	%fd106, {%r69, %r73};

BB4_9:
	setp.lt.u32	%p10, %r6, %r36;
	setp.gt.s32	%p11, %r6, -1;
	and.pred  	%p12, %p11, %p10;
	cvt.rzi.s32.f64	%r7, %fd106;
	setp.gt.s32	%p13, %r7, -1;
	and.pred  	%p14, %p12, %p13;
	setp.lt.u32	%p15, %r7, %r37;
	and.pred  	%p16, %p15, %p14;
	mov.f32 	%f56, %f55;
	@!%p16 bra 	BB4_11;
	bra.uni 	BB4_10;

BB4_10:
	cvta.to.global.u64 	%rd10, %rd3;
	mul.lo.s32 	%r75, %r7, %r41;
	cvt.u64.u32	%rd11, %r75;
	add.s64 	%rd12, %rd10, %rd11;
	mul.wide.u32 	%rd13, %r6, 16;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.f32 	%f55, [%rd14];
	ld.global.f32 	%f56, [%rd14+4];
	ld.global.u32 	%r130, [%rd14+12];
	mov.u16 	%rs8, 1;
	bra.uni 	BB4_11;

BB4_4:
	mov.f32 	%f56, %f55;

BB4_11:
	and.b32  	%r76, %r40, 20;
	setp.eq.s32	%p17, %r76, 20;
	@%p17 bra 	BB4_13;
	bra.uni 	BB4_12;

BB4_13:
	and.b32  	%r77, %r4, -8;
	cvt.rn.f32.u32	%f18, %r77;
	and.b32  	%r78, %r5, -4;
	cvt.rn.f32.u32	%f19, %r78;
	cvt.rn.f32.u32	%f20, %r42;
	sub.f32 	%f21, %f20, %f18;
	cvt.rn.f32.u32	%f22, %r43;
	sub.f32 	%f23, %f22, %f19;
	mul.f32 	%f24, %f23, %f23;
	fma.rn.f32 	%f25, %f21, %f21, %f24;
	sqrt.rn.f32 	%f26, %f25;
	mul.f32 	%f27, %f26, 0f3CD94079;
	ld.global.f32 	%f28, [screenDistance];
	div.rn.f32 	%f5, %f27, %f28;
	abs.f32 	%f6, %f5;
	setp.leu.f32	%p21, %f6, 0f3F800000;
	mov.f32 	%f57, %f6;
	@%p21 bra 	BB4_15;

	rcp.rn.f32 	%f57, %f6;

BB4_15:
	mul.rn.f32 	%f29, %f57, %f57;
	mov.f32 	%f30, 0fC0B59883;
	mov.f32 	%f31, 0fBF52C7EA;
	fma.rn.f32 	%f32, %f29, %f31, %f30;
	mov.f32 	%f33, 0fC0D21907;
	fma.rn.f32 	%f34, %f32, %f29, %f33;
	mul.f32 	%f35, %f29, %f34;
	mul.f32 	%f36, %f57, %f35;
	add.f32 	%f37, %f29, 0f41355DC0;
	mov.f32 	%f38, 0f41E6BD60;
	fma.rn.f32 	%f39, %f37, %f29, %f38;
	mov.f32 	%f40, 0f419D92C8;
	fma.rn.f32 	%f41, %f39, %f29, %f40;
	rcp.rn.f32 	%f42, %f41;
	fma.rn.f32 	%f43, %f36, %f42, %f57;
	mov.f32 	%f44, 0f3FC90FDB;
	sub.f32 	%f45, %f44, %f43;
	setp.gt.f32	%p22, %f6, 0f3F800000;
	selp.f32	%f46, %f45, %f43, %p22;
	mov.b32 	 %r79, %f46;
	mov.b32 	 %r80, %f5;
	and.b32  	%r81, %r80, -2147483648;
	or.b32  	%r82, %r79, %r81;
	mov.b32 	 %f47, %r82;
	setp.gtu.f32	%p23, %f6, 0f7F800000;
	selp.f32	%f48, %f46, %f47, %p23;
	mul.f32 	%f49, %f48, 0f43340000;
	div.rn.f32 	%f9, %f49, 0f40490FDB;
	setp.ge.f32	%p24, %f9, 0f00000000;
	@%p24 bra 	BB4_17;

	mov.u64 	%rd15, $str6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str2;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r83, 255;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r83;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_17:
	fma.rn.f32 	%f50, %f9, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p25, %f9, 0f40B00000;
	selp.f32	%f51, %f50, 0f3F800000, %p25;
	cvt.rn.f32.u32	%f52, %r39;
	mul.f32 	%f53, %f52, %f51;
	cvt.rzi.u32.f32	%r131, %f53;
	setp.gtu.f32	%p26, %f9, 0f42700000;
	@%p26 bra 	BB4_19;

	mov.u32 	%r84, 1;
	max.u32 	%r131, %r84, %r131;
	bra.uni 	BB4_19;

BB4_12:
	setp.eq.s32	%p18, %r39, 0;
	setp.eq.s16	%p19, %rs8, 0;
	and.pred  	%p20, %p18, %p19;
	selp.b32	%r131, 1, %r39, %p20;

BB4_19:
	mov.u16 	%rs9, 1;
	setp.ne.s16	%p27, %rs8, 0;
	@%p27 bra 	BB4_47;

	setp.ne.s32	%p28, %r131, 0;
	@%p28 bra 	BB4_22;

	mov.u64 	%rd21, $str7;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r85, 345;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r85;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_22:
	cvt.rn.f64.u32	%fd69, %r36;
	sub.f64 	%fd70, %fd40, %fd38;
	div.rn.f64 	%fd13, %fd70, %fd69;
	cvt.rn.f64.u32	%fd71, %r37;
	sub.f64 	%fd72, %fd41, %fd39;
	div.rn.f64 	%fd14, %fd72, %fd71;
	setp.lt.u32	%p29, %r131, 65;
	@%p29 bra 	BB4_24;

	mov.u64 	%rd27, $str9;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd29, $str2;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r86, 119;
	mov.u64 	%rd31, 0;
	mov.u64 	%rd32, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd28;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b32 param2;
	st.param.b32	[param2+0], %r86;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB4_24:
	setp.eq.s32	%p30, %r131, 0;
	mov.u32 	%r130, 0;
	mov.u32 	%r142, %r130;
	mov.u32 	%r141, %r130;
	@%p30 bra 	BB4_46;

	cvt.rn.f64.u32	%fd15, %r4;
	cvt.rn.f64.u32	%fd16, %r5;
	ld.const.f64 	%fd17, [julia_c];
	mov.u32 	%r90, 0;
	ld.const.f64 	%fd18, [julia_c+8];
	mov.u32 	%r132, %r90;
	mov.u32 	%r142, %r90;
	mov.u32 	%r141, %r131;

BB4_26:
	mov.u32 	%r16, %r141;
	mov.u32 	%r14, %r132;
	cvt.rn.f64.u32	%fd73, %r16;
	cvt.rn.f64.u32	%fd74, %r14;
	div.rn.f64 	%fd75, %fd74, %fd73;
	add.f64 	%fd76, %fd15, %fd75;
	add.f64 	%fd77, %fd16, %fd75;
	neg.f64 	%fd78, %fd77;
	fma.rn.f64 	%fd108, %fd13, %fd76, %fd38;
	fma.rn.f64 	%fd107, %fd14, %fd78, %fd41;
	setp.eq.s32	%p31, %r38, 0;
	mov.u32 	%r136, %r90;
	@%p31 bra 	BB4_29;

BB4_27:
	mul.f64 	%fd23, %fd107, %fd107;
	mul.f64 	%fd24, %fd108, %fd108;
	add.f64 	%fd79, %fd24, %fd23;
	setp.geu.f64	%p32, %fd79, 0d4010000000000000;
	@%p32 bra 	BB4_29;

	sub.f64 	%fd80, %fd24, %fd23;
	add.f64 	%fd25, %fd17, %fd80;
	add.f64 	%fd81, %fd108, %fd108;
	fma.rn.f64 	%fd107, %fd81, %fd107, %fd18;
	add.s32 	%r136, %r136, 1;
	setp.lt.u32	%p33, %r136, %r38;
	mov.f64 	%fd108, %fd25;
	@%p33 bra 	BB4_27;

BB4_29:
	cvt.rn.f32.u32	%f54, %r136;
	cvt.rzi.u32.f32	%r20, %f54;
	add.s32 	%r142, %r20, %r142;
	setp.gt.u32	%p34, %r14, 9;
	@%p34 bra 	BB4_31;

	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r14, 4;
	add.s64 	%rd36, %rd34, %rd35;
	st.local.u32 	[%rd36], %r20;

BB4_31:
	setp.lt.u32	%p35, %r14, 10;
	and.b32  	%r93, %r40, 1;
	setp.eq.b32	%p36, %r93, 1;
	setp.ne.s32	%p37, %r14, 0;
	and.pred  	%p38, %p35, %p37;
	and.pred  	%p39, %p38, %p36;
	shr.u32 	%r94, %r16, 1;
	setp.eq.s32	%p40, %r14, %r94;
	or.pred  	%p41, %p39, %p40;
	add.s32 	%r132, %r14, 1;
	mov.u32 	%r141, %r16;
	@!%p41 bra 	BB4_45;
	bra.uni 	BB4_32;

BB4_32:
	div.u32 	%r95, %r142, %r132;
	cvt.rn.f64.u32	%fd27, %r95;
	setp.eq.s32	%p42, %r14, 0;
	mov.f64 	%fd113, 0d0000000000000000;
	@%p42 bra 	BB4_41;

	and.b32  	%r97, %r14, 3;
	setp.eq.s32	%p43, %r97, 0;
	mov.f64 	%fd113, 0d0000000000000000;
	mov.u32 	%r140, 0;
	@%p43 bra 	BB4_39;

	setp.eq.s32	%p44, %r97, 1;
	mov.f64 	%fd110, 0d0000000000000000;
	mov.u32 	%r138, 0;
	@%p44 bra 	BB4_38;

	setp.eq.s32	%p45, %r97, 2;
	mov.f64 	%fd109, 0d0000000000000000;
	mov.u32 	%r137, 0;
	@%p45 bra 	BB4_37;

	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	ld.local.u32 	%r103, [%rd38];
	cvt.rn.f64.u32	%fd86, %r103;
	sub.f64 	%fd87, %fd86, %fd27;
	fma.rn.f64 	%fd109, %fd87, %fd87, 0d0000000000000000;
	mov.u32 	%r137, 1;

BB4_37:
	add.u64 	%rd39, %SP, 0;
	cvta.to.local.u64 	%rd40, %rd39;
	mul.wide.u32 	%rd41, %r137, 4;
	add.s64 	%rd42, %rd40, %rd41;
	ld.local.u32 	%r104, [%rd42];
	cvt.rn.f64.u32	%fd88, %r104;
	sub.f64 	%fd89, %fd88, %fd27;
	fma.rn.f64 	%fd110, %fd89, %fd89, %fd109;
	add.s32 	%r138, %r137, 1;

BB4_38:
	add.u64 	%rd43, %SP, 0;
	cvta.to.local.u64 	%rd44, %rd43;
	mul.wide.u32 	%rd45, %r138, 4;
	add.s64 	%rd46, %rd44, %rd45;
	ld.local.u32 	%r105, [%rd46];
	cvt.rn.f64.u32	%fd90, %r105;
	sub.f64 	%fd91, %fd90, %fd27;
	fma.rn.f64 	%fd113, %fd91, %fd91, %fd110;
	add.s32 	%r140, %r138, 1;

BB4_39:
	add.u64 	%rd47, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd47;
	setp.lt.u32	%p46, %r14, 4;
	@%p46 bra 	BB4_41;

BB4_40:
	mul.wide.u32 	%rd48, %r140, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r106, [%rd49];
	cvt.rn.f64.u32	%fd92, %r106;
	sub.f64 	%fd93, %fd92, %fd27;
	fma.rn.f64 	%fd94, %fd93, %fd93, %fd113;
	add.s32 	%r107, %r140, 1;
	mul.wide.u32 	%rd50, %r107, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.local.u32 	%r108, [%rd51];
	cvt.rn.f64.u32	%fd95, %r108;
	sub.f64 	%fd96, %fd95, %fd27;
	fma.rn.f64 	%fd97, %fd96, %fd96, %fd94;
	add.s32 	%r109, %r140, 2;
	mul.wide.u32 	%rd52, %r109, 4;
	add.s64 	%rd53, %rd1, %rd52;
	ld.local.u32 	%r110, [%rd53];
	cvt.rn.f64.u32	%fd98, %r110;
	sub.f64 	%fd99, %fd98, %fd27;
	fma.rn.f64 	%fd100, %fd99, %fd99, %fd97;
	add.s32 	%r111, %r140, 3;
	mul.wide.u32 	%rd54, %r111, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.local.u32 	%r112, [%rd55];
	cvt.rn.f64.u32	%fd101, %r112;
	sub.f64 	%fd102, %fd101, %fd27;
	fma.rn.f64 	%fd113, %fd102, %fd102, %fd100;
	add.s32 	%r140, %r140, 4;
	setp.lt.u32	%p47, %r140, %r14;
	@%p47 bra 	BB4_40;

BB4_41:
	add.s32 	%r113, %r14, -1;
	cvt.rn.f64.u32	%fd103, %r113;
	div.rn.f64 	%fd104, %fd113, %fd103;
	div.rn.f64 	%fd37, %fd104, %fd27;
	setp.ne.s32	%p48, %r14, 1;
	@%p48 bra 	BB4_43;

	// inline asm
	activemask.b32 %r114;
	// inline asm
	add.u64 	%rd56, %SP, 0;
	cvta.to.local.u64 	%rd57, %rd56;
	ld.local.v2.u32 	{%r116, %r117}, [%rd57];
	setp.eq.s32	%p49, %r116, %r117;
	vote.sync.all.pred 	%p50, %p49, %r114;
	mov.u32 	%r141, 2;
	@%p50 bra 	BB4_45;

BB4_43:
	// inline asm
	activemask.b32 %r121;
	// inline asm
	setp.lt.f64	%p51, %fd37, 0d3F847AE140000000;
	vote.sync.all.pred 	%p52, %p51, %r121;
	mov.u32 	%r141, %r132;
	@%p52 bra 	BB4_45;

	// inline asm
	activemask.b32 %r123;
	// inline asm
	setp.le.f64	%p53, %fd37, 0d3FF0000000000000;
	vote.sync.all.pred 	%p54, %p53, %r123;
	setp.ge.u32	%p55, %r14, %r94;
	and.pred  	%p56, %p54, %p55;
	selp.b32	%r141, %r132, %r16, %p56;

BB4_45:
	setp.lt.u32	%p57, %r132, %r141;
	@%p57 bra 	BB4_26;

BB4_46:
	div.u32 	%r127, %r142, %r141;
	cvt.rn.f32.u32	%f55, %r127;
	cvt.rn.f32.u32	%f56, %r141;
	mov.u16 	%rs9, 0;

BB4_47:
	mul.lo.s32 	%r128, %r5, %r35;
	cvt.u64.u32	%rd58, %r128;
	cvta.to.global.u64 	%rd59, %rd2;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r4, 16;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.f32 	[%rd62], %f55;
	st.global.f32 	[%rd62+4], %f56;
	st.global.u32 	[%rd62+12], %r130;
	st.global.u8 	[%rd62+8], %rs9;
	setp.gt.f32	%p58, %f56, 0f00000000;
	@%p58 bra 	BB4_49;

	mov.u64 	%rd63, $str8;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r129, 352;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r129;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_49:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9
)
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<37>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r7, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r9, [compose_param_5];
	ld.param.u32 	%r10, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r2, %r14, %r15, %r16;
	setp.ge.u32	%p1, %r2, %r10;
	setp.ge.u32	%p2, %r1, %r9;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_9;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r17, %r2, %r7;
	cvt.u64.u32	%rd6, %r17;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.u32 	%rd8, %r1, 16;
	add.s64 	%rd1, %rd7, %rd8;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	@%p4 bra 	BB5_3;

	ld.global.f32 	%f5, [%rd1+4];
	cvt.rzi.u32.f32	%r18, %f5;
	mov.u32 	%r19, 64;
	min.u32 	%r20, %r18, %r19;
	cvt.rn.f32.u32	%f6, %r20;
	mul.f32 	%f7, %f6, 0f3C800000;
	mul.f32 	%f8, %f7, 0f437F0000;
	cvt.rzi.s32.f32	%r21, %f8;
	and.b32  	%r22, %r21, 255;
	prmt.b32 	%r23, %r22, %r22, 30212;
	prmt.b32 	%r24, %r22, %r23, 28756;
	or.b32  	%r25, %r24, -16777216;
	ld.global.u8 	%rs2, [%rd1+8];
	setp.eq.s16	%p5, %rs2, 0;
	selp.b32	%r36, %r25, -16777216, %p5;
	bra.uni 	BB5_8;

BB5_3:
	ld.global.f32 	%f1, [%rd1];
	abs.f32 	%f9, %f1;
	mov.b32 	 %r26, %f1;
	and.b32  	%r27, %r26, -2147483648;
	or.b32  	%r28, %r27, 1056964608;
	mov.b32 	 %f10, %r28;
	add.f32 	%f11, %f1, %f10;
	cvt.rzi.f32.f32	%f12, %f11;
	setp.gt.f32	%p6, %f9, 0f4B000000;
	selp.f32	%f13, %f1, %f12, %p6;
	setp.geu.f32	%p7, %f9, 0f3F000000;
	@%p7 bra 	BB5_5;

	cvt.rzi.f32.f32	%f13, %f1;

BB5_5:
	cvt.rzi.u32.f32	%r29, %f13;
	rem.u32 	%r30, %r29, %r8;
	sub.s32 	%r31, %r8, %r30;
	add.s32 	%r4, %r31, -1;
	setp.lt.u32	%p8, %r4, %r8;
	@%p8 bra 	BB5_7;

	mov.u64 	%rd9, $str10;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str11;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r32, 23;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB5_7:
	shl.b32 	%r33, %r4, 2;
	mov.u32 	%r34, 0;
	suld.b.2d.b32.trap {%r36}, [%rd4, {%r33, %r34}];

BB5_8:
	shl.b32 	%r35, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r35, %r2}], {%r36};

BB5_9:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<51>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r13, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r14, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f14, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f15, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f16, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r15, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r16, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r20, %r18, %r17, %r19;
	mul.lo.s32 	%r1, %r20, %r16;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.u32 	%r23, %tid.y;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r2, %r24, %r16;
	sub.s32 	%r25, %r14, %r16;
	setp.ge.u32	%p1, %r2, %r25;
	sub.s32 	%r26, %r13, %r16;
	setp.ge.u32	%p2, %r1, %r26;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_13;

	sub.f32 	%f17, %f15, %f13;
	cvt.rn.f32.u32	%f18, %r13;
	div.rn.f32 	%f19, %f17, %f18;
	cvt.rn.f32.u32	%f20, %r14;
	sub.f32 	%f21, %f16, %f14;
	div.rn.f32 	%f22, %f21, %f20;
	cvt.rn.f32.u32	%f23, %r1;
	fma.rn.f32 	%f32, %f23, %f19, %f13;
	cvt.rn.f32.u32	%f24, %r2;
	mul.f32 	%f25, %f24, %f22;
	sub.f32 	%f31, %f16, %f25;
	ld.const.f64 	%fd1, [julia_c];
	cvt.rn.f32.f64	%f3, %fd1;
	ld.const.f64 	%fd2, [julia_c+8];
	cvt.rn.f32.f64	%f4, %fd2;
	setp.eq.s32	%p4, %r15, 0;
	mov.u32 	%r46, 0;
	@%p4 bra 	BB6_4;

BB6_2:
	mul.f32 	%f7, %f31, %f31;
	mul.f32 	%f8, %f32, %f32;
	add.f32 	%f26, %f8, %f7;
	setp.geu.f32	%p5, %f26, 0f40800000;
	@%p5 bra 	BB6_4;

	sub.f32 	%f27, %f8, %f7;
	add.f32 	%f9, %f3, %f27;
	add.f32 	%f28, %f32, %f32;
	fma.rn.f32 	%f31, %f28, %f31, %f4;
	add.s32 	%r46, %r46, 1;
	setp.lt.u32	%p6, %r46, %r15;
	mov.f32 	%f32, %f9;
	@%p6 bra 	BB6_2;

BB6_4:
	setp.eq.s32	%p7, %r16, 0;
	@%p7 bra 	BB6_13;

	cvt.rn.f32.u32	%f29, %r46;
	cvt.rzi.u32.f32	%r33, %f29;
	mul.lo.s32 	%r34, %r2, %r12;
	cvt.u64.u32	%rd3, %r34;
	cvta.to.global.u64 	%rd4, %rd2;
	add.s64 	%rd5, %rd4, %rd3;
	cvt.rn.f32.u32	%f30, %r16;
	rcp.rn.f32 	%f11, %f30;
	cvt.rn.f32.u32	%f12, %r33;
	mul.wide.u32 	%rd6, %r1, 16;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r32, %r16, 3;
	mov.u32 	%r47, 1;
	mov.u32 	%r50, 0;
	setp.eq.s32	%p8, %r32, 0;
	@%p8 bra 	BB6_11;

	setp.eq.s32	%p9, %r32, 1;
	mov.u32 	%r48, %r50;
	@%p9 bra 	BB6_10;

	setp.eq.s32	%p10, %r32, 2;
	@%p10 bra 	BB6_9;

	st.global.f32 	[%rd1], %f12;
	st.global.f32 	[%rd1+4], %f11;
	mov.u32 	%r41, 0;
	st.global.u32 	[%rd1+12], %r41;
	mov.u16 	%rs1, 0;
	st.global.u8 	[%rd1+8], %rs1;
	mov.u32 	%r47, 2;

BB6_9:
	st.global.f32 	[%rd1], %f12;
	st.global.f32 	[%rd1+4], %f11;
	mov.u32 	%r42, 0;
	st.global.u32 	[%rd1+12], %r42;
	mov.u16 	%rs2, 0;
	st.global.u8 	[%rd1+8], %rs2;
	mov.u32 	%r48, %r47;

BB6_10:
	st.global.f32 	[%rd1], %f12;
	st.global.f32 	[%rd1+4], %f11;
	st.global.u32 	[%rd1+12], %r50;
	mov.u16 	%rs3, 0;
	st.global.u8 	[%rd1+8], %rs3;
	add.s32 	%r50, %r48, 1;

BB6_11:
	setp.lt.u32	%p11, %r16, 4;
	@%p11 bra 	BB6_13;

BB6_12:
	st.global.f32 	[%rd1], %f12;
	st.global.f32 	[%rd1+4], %f11;
	mov.u32 	%r44, 0;
	st.global.u32 	[%rd1+12], %r44;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd1+8], %rs4;
	add.s32 	%r50, %r50, 4;
	setp.lt.u32	%p12, %r50, %r16;
	@%p12 bra 	BB6_12;

BB6_13:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 17

BB7_2:
	ret;
}


