//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_30
.address_size 64

	// .globl	init
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 8 .b8 julia_c[16];
.const .align 1 .u8 VISUALIZE_SAMPLE_COUNT;
.global .align 4 .u32 seed;
.global .align 4 .u32 WARP_SIZE_X = 8;
.global .align 4 .u32 WARP_SIZE_Y = 4;
.global .align 4 .u32 USE_ADAPTIVE_SS_FLAG_MASK = 1;
.global .align 4 .u32 USE_FOVEATION_FLAG_MASK = 4;
.global .align 4 .u32 USE_SAMPLE_REUSE_FLAG_MASK = 8;
.global .align 4 .u32 IS_ZOOMING_FLAG_MASK = 16;
.global .align 4 .u32 visualityAmplifyCoeff = 10;
.global .align 4 .f32 screenDistance = 0f42700000;
.global .align 16 .b8 $str[18] = {104, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 106, 117, 108, 105, 97, 10, 0};
.global .align 16 .b8 $str1[34] = {98, 0, 108, 0, 111, 0, 99, 0, 107, 0, 68, 0, 105, 0, 109, 0, 46, 0, 120, 0, 32, 0, 61, 0, 61, 0, 32, 0, 51, 0, 50, 0, 0, 0};
.global .align 16 .b8 $str2[138] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 82, 0, 101, 0, 110, 0, 100, 0, 101, 0, 114, 0, 101, 0, 114, 0, 71, 0, 101, 0, 110, 0, 101, 0, 114, 0, 105, 0, 99, 0, 46, 0, 99, 0, 117, 0, 0, 0};
.global .align 16 .b8 $str3[40] = {112, 0, 79, 0, 117, 0, 116, 0, 112, 0, 117, 0, 116, 0, 45, 0, 62, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str6[34] = {118, 0, 105, 0, 115, 0, 117, 0, 97, 0, 108, 0, 65, 0, 110, 0, 103, 0, 108, 0, 101, 0, 32, 0, 62, 0, 61, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str7[66] = {114, 0, 101, 0, 117, 0, 115, 0, 105, 0, 110, 0, 103, 0, 83, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 32, 0, 124, 0, 124, 0, 32, 0, 115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str8[36] = {114, 0, 101, 0, 115, 0, 117, 0, 108, 0, 116, 0, 46, 0, 119, 0, 101, 0, 105, 0, 103, 0, 104, 0, 116, 0, 32, 0, 62, 0, 32, 0, 48, 0, 0, 0};
.global .align 16 .b8 $str9[68] = {115, 0, 97, 0, 109, 0, 112, 0, 108, 0, 101, 0, 67, 0, 111, 0, 117, 0, 110, 0, 116, 0, 32, 0, 60, 0, 61, 0, 32, 0, 77, 0, 65, 0, 88, 0, 95, 0, 83, 0, 85, 0, 80, 0, 69, 0, 82, 0, 95, 0, 83, 0, 65, 0, 77, 0, 80, 0, 76, 0, 73, 0, 78, 0, 71, 0, 0, 0};
.global .align 16 .b8 $str10[54] = {112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 73, 0, 100, 0, 120, 0, 32, 0, 60, 0, 32, 0, 112, 0, 97, 0, 108, 0, 101, 0, 116, 0, 116, 0, 101, 0, 76, 0, 101, 0, 110, 0, 103, 0, 116, 0, 104, 0, 0, 0};
.global .align 16 .b8 $str11[122] = {101, 0, 58, 0, 92, 0, 116, 0, 111, 0, 110, 0, 100, 0, 97, 0, 92, 0, 100, 0, 101, 0, 115, 0, 107, 0, 116, 0, 111, 0, 112, 0, 92, 0, 99, 0, 104, 0, 97, 0, 111, 0, 115, 0, 45, 0, 117, 0, 108, 0, 116, 0, 114, 0, 97, 0, 92, 0, 115, 0, 114, 0, 99, 0, 92, 0, 109, 0, 97, 0, 105, 0, 110, 0, 92, 0, 99, 0, 117, 0, 100, 0, 97, 0, 92, 0, 102, 0, 114, 0, 97, 0, 99, 0, 116, 0, 97, 0, 108, 0, 115, 0, 47, 0, 106, 0, 117, 0, 108, 0, 105, 0, 97, 0, 46, 0, 99, 0, 117, 0, 0, 0};

.visible .entry init(

)
{



	ret;
}

	// .globl	fractalRenderMainFloat
.visible .entry fractalRenderMainFloat(
	.param .u64 fractalRenderMainFloat_param_0,
	.param .u32 fractalRenderMainFloat_param_1,
	.param .align 4 .b8 fractalRenderMainFloat_param_2[8],
	.param .align 4 .b8 fractalRenderMainFloat_param_3[16],
	.param .u32 fractalRenderMainFloat_param_4,
	.param .u32 fractalRenderMainFloat_param_5,
	.param .u32 fractalRenderMainFloat_param_6
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .f32 	%f<80>;
	.reg .b32 	%r<104>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderMainFloat_param_0];
	ld.param.u32 	%r25, [fractalRenderMainFloat_param_1];
	ld.param.u32 	%r27, [fractalRenderMainFloat_param_2+4];
	ld.param.u32 	%r26, [fractalRenderMainFloat_param_2];
	ld.param.f32 	%f35, [fractalRenderMainFloat_param_3+12];
	ld.param.f32 	%f34, [fractalRenderMainFloat_param_3+8];
	ld.param.f32 	%f33, [fractalRenderMainFloat_param_3+4];
	ld.param.f32 	%f32, [fractalRenderMainFloat_param_3];
	ld.param.u32 	%r28, [fractalRenderMainFloat_param_4];
	ld.param.u32 	%r101, [fractalRenderMainFloat_param_5];
	ld.param.u32 	%r30, [fractalRenderMainFloat_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r31, 71;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r31;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB1_2:
	mov.u32 	%r32, %tid.x;
	mov.u32 	%r33, %tid.y;
	mad.lo.s32 	%r34, %r1, %r33, %r32;
	shl.b32 	%r35, %r1, 2;
	and.b32  	%r36, %r34, 15;
	rem.u32 	%r37, %r34, %r35;
	sub.s32 	%r38, %r37, %r36;
	shr.u32 	%r39, %r38, 2;
	and.b32  	%r40, %r34, 3;
	add.s32 	%r41, %r39, %r40;
	div.u32 	%r42, %r34, %r35;
	shl.b32 	%r43, %r42, 2;
	bfe.u32 	%r44, %r34, 2, 2;
	add.s32 	%r45, %r43, %r44;
	mov.u32 	%r46, %ctaid.x;
	mad.lo.s32 	%r4, %r46, %r1, %r41;
	mov.u32 	%r47, %ctaid.y;
	mov.u32 	%r48, %ntid.y;
	mad.lo.s32 	%r5, %r47, %r48, %r45;
	setp.lt.u32	%p2, %r4, %r26;
	setp.lt.u32	%p3, %r5, %r27;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB1_30;
	bra.uni 	BB1_3;

BB1_3:
	setp.lt.u32	%p5, %r101, 257;
	@%p5 bra 	BB1_5;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r49, 119;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_5:
	setp.eq.s32	%p6, %r101, 0;
	cvt.rn.f32.u32	%f79, %r101;
	mov.u32 	%r102, 0;
	@%p6 bra 	BB1_6;

	cvt.rn.f32.u32	%f4, %r4;
	cvt.rn.f32.u32	%f5, %r5;
	ld.const.f64 	%fd1, [julia_c];
	cvt.rn.f32.f64	%f6, %fd1;
	ld.const.f64 	%fd2, [julia_c+8];
	cvt.rn.f32.f64	%f7, %fd2;
	cvt.rn.f32.u32	%f36, %r26;
	sub.f32 	%f37, %f34, %f32;
	div.rn.f32 	%f8, %f37, %f36;
	cvt.rn.f32.u32	%f38, %r27;
	sub.f32 	%f39, %f35, %f33;
	div.rn.f32 	%f9, %f39, %f38;
	mov.u32 	%r53, 0;
	and.b32  	%r56, %r30, 1;
	mov.u32 	%r92, %r53;
	mov.u32 	%r102, %r53;

BB1_8:
	mov.u32 	%r8, %r101;
	mov.u32 	%r6, %r92;
	cvt.rn.f32.u32	%f40, %r6;
	div.rn.f32 	%f41, %f40, %f79;
	add.f32 	%f42, %f4, %f41;
	add.f32 	%f43, %f5, %f41;
	neg.f32 	%f44, %f43;
	fma.rn.f32 	%f73, %f8, %f42, %f32;
	fma.rn.f32 	%f72, %f9, %f44, %f35;
	setp.eq.s32	%p7, %r28, 0;
	mov.u32 	%r96, %r53;
	@%p7 bra 	BB1_11;

BB1_9:
	mul.f32 	%f15, %f72, %f72;
	mul.f32 	%f16, %f73, %f73;
	add.f32 	%f45, %f16, %f15;
	setp.geu.f32	%p8, %f45, 0f40800000;
	@%p8 bra 	BB1_11;

	sub.f32 	%f46, %f16, %f15;
	add.f32 	%f17, %f6, %f46;
	add.f32 	%f47, %f73, %f73;
	fma.rn.f32 	%f72, %f47, %f72, %f7;
	add.s32 	%r96, %r96, 1;
	setp.lt.u32	%p9, %r96, %r28;
	mov.f32 	%f73, %f17;
	@%p9 bra 	BB1_9;

BB1_11:
	add.s32 	%r102, %r96, %r102;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB1_13;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r6, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r96;

BB1_13:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r56, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r57, %r8, 1;
	setp.eq.s32	%p16, %r6, %r57;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r92, %r6, 1;
	mov.u32 	%r101, %r8;
	@!%p17 bra 	BB1_27;
	bra.uni 	BB1_14;

BB1_14:
	div.u32 	%r58, %r102, %r92;
	cvt.rn.f32.u32	%f19, %r58;
	setp.eq.s32	%p18, %r6, 0;
	mov.f32 	%f78, 0f00000000;
	@%p18 bra 	BB1_23;

	and.b32  	%r60, %r6, 3;
	setp.eq.s32	%p19, %r60, 0;
	mov.f32 	%f78, 0f00000000;
	mov.u32 	%r100, 0;
	@%p19 bra 	BB1_21;

	setp.eq.s32	%p20, %r60, 1;
	mov.f32 	%f75, 0f00000000;
	mov.u32 	%r98, 0;
	@%p20 bra 	BB1_20;

	setp.eq.s32	%p21, %r60, 2;
	mov.f32 	%f74, 0f00000000;
	mov.u32 	%r97, 0;
	@%p21 bra 	BB1_19;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r66, [%rd20];
	cvt.rn.f32.u32	%f52, %r66;
	sub.f32 	%f53, %f52, %f19;
	fma.rn.f32 	%f74, %f53, %f53, 0f00000000;
	mov.u32 	%r97, 1;

BB1_19:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r97, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r67, [%rd24];
	cvt.rn.f32.u32	%f54, %r67;
	sub.f32 	%f55, %f54, %f19;
	fma.rn.f32 	%f75, %f55, %f55, %f74;
	add.s32 	%r98, %r97, 1;

BB1_20:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r98, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r68, [%rd28];
	cvt.rn.f32.u32	%f56, %r68;
	sub.f32 	%f57, %f56, %f19;
	fma.rn.f32 	%f78, %f57, %f57, %f75;
	add.s32 	%r100, %r98, 1;

BB1_21:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB1_23;

BB1_22:
	mul.wide.u32 	%rd30, %r100, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r69, [%rd31];
	cvt.rn.f32.u32	%f58, %r69;
	sub.f32 	%f59, %f58, %f19;
	fma.rn.f32 	%f60, %f59, %f59, %f78;
	add.s32 	%r70, %r100, 1;
	mul.wide.u32 	%rd32, %r70, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r71, [%rd33];
	cvt.rn.f32.u32	%f61, %r71;
	sub.f32 	%f62, %f61, %f19;
	fma.rn.f32 	%f63, %f62, %f62, %f60;
	add.s32 	%r72, %r100, 2;
	mul.wide.u32 	%rd34, %r72, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r73, [%rd35];
	cvt.rn.f32.u32	%f64, %r73;
	sub.f32 	%f65, %f64, %f19;
	fma.rn.f32 	%f66, %f65, %f65, %f63;
	add.s32 	%r74, %r100, 3;
	mul.wide.u32 	%rd36, %r74, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r75, [%rd37];
	cvt.rn.f32.u32	%f67, %r75;
	sub.f32 	%f68, %f67, %f19;
	fma.rn.f32 	%f78, %f68, %f68, %f66;
	add.s32 	%r100, %r100, 4;
	setp.lt.u32	%p23, %r100, %r6;
	@%p23 bra 	BB1_22;

BB1_23:
	add.s32 	%r76, %r6, -1;
	cvt.rn.f32.u32	%f69, %r76;
	div.rn.f32 	%f70, %f78, %f69;
	div.rn.f32 	%f29, %f70, %f19;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB1_25;

	// inline asm
	activemask.b32 %r77;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r79, %r80}, [%rd39];
	setp.eq.s32	%p25, %r79, %r80;
	vote.sync.all.pred 	%p26, %p25, %r77;
	mov.u32 	%r101, 2;
	@%p26 bra 	BB1_27;

BB1_25:
	// inline asm
	activemask.b32 %r84;
	// inline asm
	setp.lt.f32	%p27, %f29, 0f3C23D70A;
	vote.sync.all.pred 	%p28, %p27, %r84;
	mov.u32 	%r101, %r92;
	@%p28 bra 	BB1_27;

	// inline asm
	activemask.b32 %r86;
	// inline asm
	setp.le.f32	%p29, %f29, 0f3F800000;
	vote.sync.all.pred 	%p30, %p29, %r86;
	setp.ge.u32	%p31, %r6, %r57;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r101, %r92, %r8, %p32;

BB1_27:
	cvt.rn.f32.u32	%f79, %r101;
	setp.lt.u32	%p33, %r92, %r101;
	@%p33 bra 	BB1_8;
	bra.uni 	BB1_28;

BB1_6:
	mov.u32 	%r101, %r102;

BB1_28:
	mul.lo.s32 	%r89, %r5, %r25;
	cvt.u64.u32	%rd40, %r89;
	cvta.to.global.u64 	%rd41, %rd2;
	add.s64 	%rd42, %rd41, %rd40;
	mul.wide.u32 	%rd43, %r4, 8;
	add.s64 	%rd44, %rd42, %rd43;
	div.u32 	%r90, %r102, %r101;
	st.global.u32 	[%rd44], %r90;
	st.global.f32 	[%rd44+4], %f79;
	setp.gt.f32	%p34, %f79, 0f00000000;
	@%p34 bra 	BB1_30;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r91, 206;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r91;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_30:
	ret;
}

	// .globl	fractalRenderMainDouble
.visible .entry fractalRenderMainDouble(
	.param .u64 fractalRenderMainDouble_param_0,
	.param .u32 fractalRenderMainDouble_param_1,
	.param .align 4 .b8 fractalRenderMainDouble_param_2[8],
	.param .align 8 .b8 fractalRenderMainDouble_param_3[32],
	.param .u32 fractalRenderMainDouble_param_4,
	.param .u32 fractalRenderMainDouble_param_5,
	.param .u32 fractalRenderMainDouble_param_6
)
{
	.local .align 8 .b8 	__local_depot2[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<35>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<104>;
	.reg .f64 	%fd<75>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderMainDouble_param_0];
	ld.param.u32 	%r25, [fractalRenderMainDouble_param_1];
	ld.param.u32 	%r27, [fractalRenderMainDouble_param_2+4];
	ld.param.u32 	%r26, [fractalRenderMainDouble_param_2];
	ld.param.f64 	%fd31, [fractalRenderMainDouble_param_3+24];
	ld.param.f64 	%fd30, [fractalRenderMainDouble_param_3+16];
	ld.param.f64 	%fd29, [fractalRenderMainDouble_param_3+8];
	ld.param.f64 	%fd28, [fractalRenderMainDouble_param_3];
	ld.param.u32 	%r28, [fractalRenderMainDouble_param_4];
	ld.param.u32 	%r29, [fractalRenderMainDouble_param_5];
	ld.param.u32 	%r30, [fractalRenderMainDouble_param_6];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd3, $str1;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str2;
	cvta.global.u64 	%rd6, %rd5;
	mov.u32 	%r31, 71;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, 2;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r31;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB2_2:
	mov.u32 	%r32, %tid.x;
	mov.u32 	%r33, %tid.y;
	mad.lo.s32 	%r34, %r1, %r33, %r32;
	shl.b32 	%r35, %r1, 2;
	and.b32  	%r36, %r34, 15;
	rem.u32 	%r37, %r34, %r35;
	sub.s32 	%r38, %r37, %r36;
	shr.u32 	%r39, %r38, 2;
	and.b32  	%r40, %r34, 3;
	add.s32 	%r41, %r39, %r40;
	div.u32 	%r42, %r34, %r35;
	shl.b32 	%r43, %r42, 2;
	bfe.u32 	%r44, %r34, 2, 2;
	add.s32 	%r45, %r43, %r44;
	mov.u32 	%r46, %ctaid.x;
	mad.lo.s32 	%r4, %r46, %r1, %r41;
	mov.u32 	%r47, %ctaid.y;
	mov.u32 	%r48, %ntid.y;
	mad.lo.s32 	%r5, %r47, %r48, %r45;
	setp.lt.u32	%p2, %r4, %r26;
	setp.lt.u32	%p3, %r5, %r27;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB2_29;
	bra.uni 	BB2_3;

BB2_3:
	setp.lt.u32	%p5, %r29, 257;
	@%p5 bra 	BB2_5;

	mov.u64 	%rd9, $str9;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r49, 119;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB2_5:
	setp.eq.s32	%p6, %r29, 0;
	mov.u32 	%r102, 0;
	mov.u32 	%r101, %r102;
	@%p6 bra 	BB2_27;

	cvt.rn.f64.u32	%fd3, %r4;
	cvt.rn.f64.u32	%fd4, %r5;
	ld.const.f64 	%fd5, [julia_c];
	ld.const.f64 	%fd6, [julia_c+8];
	cvt.rn.f64.u32	%fd32, %r26;
	sub.f64 	%fd33, %fd30, %fd28;
	div.rn.f64 	%fd7, %fd33, %fd32;
	cvt.rn.f64.u32	%fd34, %r27;
	sub.f64 	%fd35, %fd31, %fd29;
	div.rn.f64 	%fd8, %fd35, %fd34;
	mov.u32 	%r53, 0;
	and.b32  	%r56, %r30, 1;
	mov.u32 	%r92, %r53;
	mov.u32 	%r102, %r53;
	mov.u32 	%r101, %r29;

BB2_7:
	mov.u32 	%r8, %r101;
	mov.u32 	%r6, %r92;
	cvt.rn.f64.u32	%fd36, %r8;
	cvt.rn.f64.u32	%fd37, %r6;
	div.rn.f64 	%fd38, %fd37, %fd36;
	add.f64 	%fd39, %fd3, %fd38;
	add.f64 	%fd40, %fd4, %fd38;
	neg.f64 	%fd41, %fd40;
	fma.rn.f64 	%fd69, %fd7, %fd39, %fd28;
	fma.rn.f64 	%fd68, %fd8, %fd41, %fd31;
	setp.eq.s32	%p7, %r28, 0;
	mov.u32 	%r96, %r53;
	@%p7 bra 	BB2_10;

BB2_8:
	mul.f64 	%fd13, %fd68, %fd68;
	mul.f64 	%fd14, %fd69, %fd69;
	add.f64 	%fd42, %fd14, %fd13;
	setp.geu.f64	%p8, %fd42, 0d4010000000000000;
	@%p8 bra 	BB2_10;

	sub.f64 	%fd43, %fd14, %fd13;
	add.f64 	%fd15, %fd5, %fd43;
	add.f64 	%fd44, %fd69, %fd69;
	fma.rn.f64 	%fd68, %fd44, %fd68, %fd6;
	add.s32 	%r96, %r96, 1;
	setp.lt.u32	%p9, %r96, %r28;
	mov.f64 	%fd69, %fd15;
	@%p9 bra 	BB2_8;

BB2_10:
	add.s32 	%r102, %r96, %r102;
	setp.gt.u32	%p10, %r6, 9;
	@%p10 bra 	BB2_12;

	add.u64 	%rd15, %SP, 0;
	cvta.to.local.u64 	%rd16, %rd15;
	mul.wide.u32 	%rd17, %r6, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.local.u32 	[%rd18], %r96;

BB2_12:
	setp.lt.u32	%p11, %r6, 10;
	setp.eq.b32	%p12, %r56, 1;
	setp.ne.s32	%p13, %r6, 0;
	and.pred  	%p14, %p11, %p13;
	and.pred  	%p15, %p14, %p12;
	shr.u32 	%r57, %r8, 1;
	setp.eq.s32	%p16, %r6, %r57;
	or.pred  	%p17, %p15, %p16;
	add.s32 	%r92, %r6, 1;
	mov.u32 	%r101, %r8;
	@!%p17 bra 	BB2_26;
	bra.uni 	BB2_13;

BB2_13:
	div.u32 	%r58, %r102, %r92;
	cvt.rn.f64.u32	%fd17, %r58;
	setp.eq.s32	%p18, %r6, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	@%p18 bra 	BB2_22;

	and.b32  	%r60, %r6, 3;
	setp.eq.s32	%p19, %r60, 0;
	mov.f64 	%fd74, 0d0000000000000000;
	mov.u32 	%r100, 0;
	@%p19 bra 	BB2_20;

	setp.eq.s32	%p20, %r60, 1;
	mov.f64 	%fd71, 0d0000000000000000;
	mov.u32 	%r98, 0;
	@%p20 bra 	BB2_19;

	setp.eq.s32	%p21, %r60, 2;
	mov.f64 	%fd70, 0d0000000000000000;
	mov.u32 	%r97, 0;
	@%p21 bra 	BB2_18;

	add.u64 	%rd19, %SP, 0;
	cvta.to.local.u64 	%rd20, %rd19;
	ld.local.u32 	%r66, [%rd20];
	cvt.rn.f64.u32	%fd49, %r66;
	sub.f64 	%fd50, %fd49, %fd17;
	fma.rn.f64 	%fd70, %fd50, %fd50, 0d0000000000000000;
	mov.u32 	%r97, 1;

BB2_18:
	add.u64 	%rd21, %SP, 0;
	cvta.to.local.u64 	%rd22, %rd21;
	mul.wide.u32 	%rd23, %r97, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.u32 	%r67, [%rd24];
	cvt.rn.f64.u32	%fd51, %r67;
	sub.f64 	%fd52, %fd51, %fd17;
	fma.rn.f64 	%fd71, %fd52, %fd52, %fd70;
	add.s32 	%r98, %r97, 1;

BB2_19:
	add.u64 	%rd25, %SP, 0;
	cvta.to.local.u64 	%rd26, %rd25;
	mul.wide.u32 	%rd27, %r98, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.local.u32 	%r68, [%rd28];
	cvt.rn.f64.u32	%fd53, %r68;
	sub.f64 	%fd54, %fd53, %fd17;
	fma.rn.f64 	%fd74, %fd54, %fd54, %fd71;
	add.s32 	%r100, %r98, 1;

BB2_20:
	add.u64 	%rd29, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd29;
	setp.lt.u32	%p22, %r6, 4;
	@%p22 bra 	BB2_22;

BB2_21:
	mul.wide.u32 	%rd30, %r100, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.local.u32 	%r69, [%rd31];
	cvt.rn.f64.u32	%fd55, %r69;
	sub.f64 	%fd56, %fd55, %fd17;
	fma.rn.f64 	%fd57, %fd56, %fd56, %fd74;
	add.s32 	%r70, %r100, 1;
	mul.wide.u32 	%rd32, %r70, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.local.u32 	%r71, [%rd33];
	cvt.rn.f64.u32	%fd58, %r71;
	sub.f64 	%fd59, %fd58, %fd17;
	fma.rn.f64 	%fd60, %fd59, %fd59, %fd57;
	add.s32 	%r72, %r100, 2;
	mul.wide.u32 	%rd34, %r72, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.local.u32 	%r73, [%rd35];
	cvt.rn.f64.u32	%fd61, %r73;
	sub.f64 	%fd62, %fd61, %fd17;
	fma.rn.f64 	%fd63, %fd62, %fd62, %fd60;
	add.s32 	%r74, %r100, 3;
	mul.wide.u32 	%rd36, %r74, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.local.u32 	%r75, [%rd37];
	cvt.rn.f64.u32	%fd64, %r75;
	sub.f64 	%fd65, %fd64, %fd17;
	fma.rn.f64 	%fd74, %fd65, %fd65, %fd63;
	add.s32 	%r100, %r100, 4;
	setp.lt.u32	%p23, %r100, %r6;
	@%p23 bra 	BB2_21;

BB2_22:
	add.s32 	%r76, %r6, -1;
	cvt.rn.f64.u32	%fd66, %r76;
	div.rn.f64 	%fd67, %fd74, %fd66;
	div.rn.f64 	%fd27, %fd67, %fd17;
	setp.ne.s32	%p24, %r6, 1;
	@%p24 bra 	BB2_24;

	// inline asm
	activemask.b32 %r77;
	// inline asm
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd39, %rd38;
	ld.local.v2.u32 	{%r79, %r80}, [%rd39];
	setp.eq.s32	%p25, %r79, %r80;
	vote.sync.all.pred 	%p26, %p25, %r77;
	mov.u32 	%r101, 2;
	@%p26 bra 	BB2_26;

BB2_24:
	// inline asm
	activemask.b32 %r84;
	// inline asm
	setp.lt.f64	%p27, %fd27, 0d3F847AE140000000;
	vote.sync.all.pred 	%p28, %p27, %r84;
	mov.u32 	%r101, %r92;
	@%p28 bra 	BB2_26;

	// inline asm
	activemask.b32 %r86;
	// inline asm
	setp.le.f64	%p29, %fd27, 0d3FF0000000000000;
	vote.sync.all.pred 	%p30, %p29, %r86;
	setp.ge.u32	%p31, %r6, %r57;
	and.pred  	%p32, %p30, %p31;
	selp.b32	%r101, %r92, %r8, %p32;

BB2_26:
	setp.lt.u32	%p33, %r92, %r101;
	@%p33 bra 	BB2_7;

BB2_27:
	mul.lo.s32 	%r89, %r5, %r25;
	cvt.u64.u32	%rd40, %r89;
	cvta.to.global.u64 	%rd41, %rd2;
	add.s64 	%rd42, %rd41, %rd40;
	mul.wide.u32 	%rd43, %r4, 8;
	add.s64 	%rd44, %rd42, %rd43;
	div.u32 	%r90, %r102, %r101;
	st.global.u32 	[%rd44], %r90;
	cvt.rn.f32.u32	%f1, %r101;
	st.global.f32 	[%rd44+4], %f1;
	setp.gt.f32	%p34, %f1, 0f00000000;
	@%p34 bra 	BB2_29;

	mov.u64 	%rd45, $str3;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, $str2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u32 	%r91, 206;
	mov.u64 	%rd49, 0;
	mov.u64 	%rd50, 2;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32	[param2+0], %r91;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB2_29:
	ret;
}

	// .globl	fractalRenderAdvancedFloat
.visible .entry fractalRenderAdvancedFloat(
	.param .u64 fractalRenderAdvancedFloat_param_0,
	.param .u32 fractalRenderAdvancedFloat_param_1,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_2[8],
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_3[16],
	.param .u32 fractalRenderAdvancedFloat_param_4,
	.param .u32 fractalRenderAdvancedFloat_param_5,
	.param .u32 fractalRenderAdvancedFloat_param_6,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_7[16],
	.param .u64 fractalRenderAdvancedFloat_param_8,
	.param .u32 fractalRenderAdvancedFloat_param_9,
	.param .align 4 .b8 fractalRenderAdvancedFloat_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot3[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<64>;
	.reg .b16 	%rs<7>;
	.reg .f32 	%f<175>;
	.reg .b32 	%r<143>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedFloat_param_0];
	ld.param.u32 	%r35, [fractalRenderAdvancedFloat_param_1];
	ld.param.u32 	%r37, [fractalRenderAdvancedFloat_param_2+4];
	ld.param.u32 	%r36, [fractalRenderAdvancedFloat_param_2];
	ld.param.f32 	%f53, [fractalRenderAdvancedFloat_param_3+12];
	ld.param.f32 	%f52, [fractalRenderAdvancedFloat_param_3+8];
	ld.param.f32 	%f51, [fractalRenderAdvancedFloat_param_3+4];
	ld.param.f32 	%f50, [fractalRenderAdvancedFloat_param_3];
	ld.param.u32 	%r38, [fractalRenderAdvancedFloat_param_4];
	ld.param.u32 	%r129, [fractalRenderAdvancedFloat_param_5];
	ld.param.u32 	%r40, [fractalRenderAdvancedFloat_param_6];
	ld.param.f32 	%f57, [fractalRenderAdvancedFloat_param_7+12];
	ld.param.f32 	%f56, [fractalRenderAdvancedFloat_param_7+8];
	ld.param.f32 	%f55, [fractalRenderAdvancedFloat_param_7+4];
	ld.param.f32 	%f54, [fractalRenderAdvancedFloat_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedFloat_param_8];
	ld.param.u32 	%r41, [fractalRenderAdvancedFloat_param_9];
	ld.param.u32 	%r43, [fractalRenderAdvancedFloat_param_10+4];
	ld.param.u32 	%r42, [fractalRenderAdvancedFloat_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r44, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r44;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB3_2:
	mov.u32 	%r45, %tid.x;
	mov.u32 	%r46, %tid.y;
	mad.lo.s32 	%r47, %r1, %r46, %r45;
	shl.b32 	%r48, %r1, 2;
	and.b32  	%r49, %r47, 15;
	rem.u32 	%r50, %r47, %r48;
	sub.s32 	%r51, %r50, %r49;
	shr.u32 	%r52, %r51, 2;
	and.b32  	%r53, %r47, 3;
	add.s32 	%r54, %r52, %r53;
	div.u32 	%r55, %r47, %r48;
	shl.b32 	%r56, %r55, 2;
	bfe.u32 	%r57, %r47, 2, 2;
	add.s32 	%r58, %r56, %r57;
	mov.u32 	%r59, %ctaid.x;
	mad.lo.s32 	%r4, %r59, %r1, %r54;
	mov.u32 	%r60, %ctaid.y;
	mov.u32 	%r61, %ntid.y;
	mad.lo.s32 	%r5, %r60, %r61, %r58;
	setp.lt.u32	%p2, %r4, %r36;
	setp.lt.u32	%p3, %r5, %r37;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB3_51;
	bra.uni 	BB3_3;

BB3_3:
	and.b32  	%r63, %r40, 8;
	setp.eq.s32	%p5, %r63, 0;
	mov.u16 	%rs6, 0;
	@%p5 bra 	BB3_11;

	cvt.rn.f32.u32	%f60, %r4;
	sub.f32 	%f61, %f56, %f54;
	cvt.rn.f32.u32	%f5, %r36;
	div.rn.f32 	%f62, %f61, %f5;
	sub.f32 	%f63, %f57, %f55;
	cvt.rn.f32.u32	%f6, %r37;
	div.rn.f32 	%f64, %f63, %f6;
	neg.f32 	%f65, %f64;
	sub.f32 	%f66, %f50, %f54;
	div.rn.f32 	%f67, %f66, %f62;
	sub.f32 	%f68, %f53, %f57;
	div.rn.f32 	%f69, %f68, %f65;
	sub.f32 	%f70, %f52, %f50;
	div.rn.f32 	%f71, %f70, %f61;
	sub.f32 	%f72, %f53, %f51;
	div.rn.f32 	%f73, %f72, %f63;
	cvt.rn.f32.u32	%f74, %r5;
	fma.rn.f32 	%f7, %f60, %f71, %f67;
	fma.rn.f32 	%f8, %f74, %f73, %f69;
	setp.lt.f32	%p6, %f7, 0f00000000;
	@%p6 bra 	BB3_11;

	setp.ltu.f32	%p7, %f7, %f5;
	setp.geu.f32	%p8, %f8, 0f00000000;
	and.pred  	%p9, %p8, %p7;
	setp.ltu.f32	%p10, %f8, %f6;
	and.pred  	%p11, %p9, %p10;
	@!%p11 bra 	BB3_11;
	bra.uni 	BB3_6;

BB3_6:
	abs.f32 	%f76, %f7;
	mov.b32 	 %r66, %f7;
	and.b32  	%r67, %r66, -2147483648;
	or.b32  	%r68, %r67, 1056964608;
	mov.b32 	 %f77, %r68;
	add.f32 	%f78, %f7, %f77;
	cvt.rzi.f32.f32	%f79, %f78;
	setp.gt.f32	%p12, %f76, 0f4B000000;
	selp.f32	%f163, %f7, %f79, %p12;
	setp.geu.f32	%p13, %f76, 0f3F000000;
	@%p13 bra 	BB3_8;

	cvt.rzi.f32.f32	%f163, %f7;

BB3_8:
	cvt.rzi.u32.f32	%r6, %f163;
	mov.b32 	 %r69, %f8;
	and.b32  	%r70, %r69, -2147483648;
	or.b32  	%r71, %r70, 1056964608;
	mov.b32 	 %f80, %r71;
	add.f32 	%f81, %f8, %f80;
	cvt.rzi.f32.f32	%f82, %f81;
	abs.f32 	%f83, %f8;
	setp.gt.f32	%p14, %f83, 0f4B000000;
	selp.f32	%f164, %f8, %f82, %p14;
	setp.geu.f32	%p15, %f83, 0f3F000000;
	@%p15 bra 	BB3_10;

	cvt.rzi.f32.f32	%f164, %f8;

BB3_10:
	cvt.rzi.u32.f32	%r72, %f164;
	mul.lo.s32 	%r73, %r72, %r41;
	cvt.u64.u32	%rd10, %r73;
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd10;
	mul.wide.u32 	%rd13, %r6, 8;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u32 	%r128, [%rd14];
	ld.global.f32 	%f165, [%rd14+4];
	mov.u16 	%rs6, 1;

BB3_11:
	and.b32  	%r74, %r40, 4;
	setp.eq.s32	%p16, %r74, 0;
	@%p16 bra 	BB3_18;

	and.b32  	%r75, %r4, -8;
	cvt.rn.f32.u32	%f84, %r75;
	and.b32  	%r76, %r5, -4;
	cvt.rn.f32.u32	%f85, %r76;
	cvt.rn.f32.u32	%f86, %r42;
	sub.f32 	%f87, %f86, %f84;
	cvt.rn.f32.u32	%f88, %r43;
	sub.f32 	%f89, %f88, %f85;
	mul.f32 	%f90, %f89, %f89;
	fma.rn.f32 	%f91, %f87, %f87, %f90;
	sqrt.rn.f32 	%f92, %f91;
	mul.f32 	%f93, %f92, 0f3CD94079;
	ld.global.f32 	%f94, [screenDistance];
	div.rn.f32 	%f17, %f93, %f94;
	abs.f32 	%f18, %f17;
	setp.leu.f32	%p17, %f18, 0f3F800000;
	mov.f32 	%f166, %f18;
	@%p17 bra 	BB3_14;

	rcp.rn.f32 	%f166, %f18;

BB3_14:
	mul.rn.f32 	%f95, %f166, %f166;
	mov.f32 	%f96, 0fC0B59883;
	mov.f32 	%f97, 0fBF52C7EA;
	fma.rn.f32 	%f98, %f95, %f97, %f96;
	mov.f32 	%f99, 0fC0D21907;
	fma.rn.f32 	%f100, %f98, %f95, %f99;
	mul.f32 	%f101, %f95, %f100;
	mul.f32 	%f102, %f166, %f101;
	add.f32 	%f103, %f95, 0f41355DC0;
	mov.f32 	%f104, 0f41E6BD60;
	fma.rn.f32 	%f105, %f103, %f95, %f104;
	mov.f32 	%f106, 0f419D92C8;
	fma.rn.f32 	%f107, %f105, %f95, %f106;
	rcp.rn.f32 	%f108, %f107;
	fma.rn.f32 	%f109, %f102, %f108, %f166;
	mov.f32 	%f110, 0f3FC90FDB;
	sub.f32 	%f111, %f110, %f109;
	setp.gt.f32	%p18, %f18, 0f3F800000;
	selp.f32	%f112, %f111, %f109, %p18;
	mov.b32 	 %r77, %f112;
	mov.b32 	 %r78, %f17;
	and.b32  	%r79, %r78, -2147483648;
	or.b32  	%r80, %r77, %r79;
	mov.b32 	 %f113, %r80;
	setp.gtu.f32	%p19, %f18, 0f7F800000;
	selp.f32	%f114, %f112, %f113, %p19;
	mul.f32 	%f115, %f114, 0f43340000;
	div.rn.f32 	%f21, %f115, 0f40490FDB;
	setp.ge.f32	%p20, %f21, 0f00000000;
	@%p20 bra 	BB3_16;

	mov.u64 	%rd15, $str6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str2;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r81, 250;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r81;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB3_16:
	fma.rn.f32 	%f116, %f21, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p21, %f21, 0f40B00000;
	selp.f32	%f117, %f116, 0f3F800000, %p21;
	cvt.rn.f32.u32	%f118, %r129;
	mul.f32 	%f119, %f118, %f117;
	cvt.rzi.u32.f32	%r129, %f119;
	setp.gtu.f32	%p22, %f21, 0f42700000;
	@%p22 bra 	BB3_18;

	mov.u32 	%r82, 1;
	max.u32 	%r129, %r82, %r129;

BB3_18:
	setp.eq.f32	%p23, %f165, 0f00000000;
	setp.eq.s16	%p24, %rs6, 0;
	or.pred  	%p25, %p24, %p23;
	setp.eq.s32	%p26, %r129, 0;
	and.pred  	%p27, %p25, %p26;
	selp.b32	%r12, 1, %r129, %p27;
	cvt.rn.f32.u32	%f120, %r36;
	sub.f32 	%f121, %f52, %f50;
	div.rn.f32 	%f22, %f121, %f120;
	cvt.rn.f32.u32	%f122, %r37;
	sub.f32 	%f123, %f53, %f51;
	div.rn.f32 	%f23, %f123, %f122;
	setp.lt.u32	%p28, %r12, 257;
	@%p28 bra 	BB3_20;

	mov.u64 	%rd21, $str9;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r83, 119;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r83;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB3_20:
	setp.eq.s32	%p29, %r12, 0;
	mov.u32 	%r140, 0;
	mov.u32 	%r139, %r140;
	@%p29 bra 	BB3_42;

	cvt.rn.f32.u32	%f24, %r4;
	cvt.rn.f32.u32	%f25, %r5;
	ld.const.f64 	%fd1, [julia_c];
	cvt.rn.f32.f64	%f26, %fd1;
	ld.const.f64 	%fd2, [julia_c+8];
	cvt.rn.f32.f64	%f27, %fd2;
	mov.u32 	%r87, 0;
	mov.u32 	%r130, %r87;
	mov.u32 	%r140, %r87;
	mov.u32 	%r139, %r12;

BB3_22:
	mov.u32 	%r15, %r139;
	mov.u32 	%r13, %r130;
	cvt.rn.f32.u32	%f124, %r15;
	cvt.rn.f32.u32	%f125, %r13;
	div.rn.f32 	%f126, %f125, %f124;
	add.f32 	%f127, %f24, %f126;
	add.f32 	%f128, %f25, %f126;
	neg.f32 	%f129, %f128;
	fma.rn.f32 	%f168, %f22, %f127, %f50;
	fma.rn.f32 	%f167, %f23, %f129, %f53;
	setp.eq.s32	%p30, %r38, 0;
	mov.u32 	%r134, %r87;
	@%p30 bra 	BB3_25;

BB3_23:
	mul.f32 	%f32, %f167, %f167;
	mul.f32 	%f33, %f168, %f168;
	add.f32 	%f130, %f33, %f32;
	setp.geu.f32	%p31, %f130, 0f40800000;
	@%p31 bra 	BB3_25;

	sub.f32 	%f131, %f33, %f32;
	add.f32 	%f34, %f26, %f131;
	add.f32 	%f132, %f168, %f168;
	fma.rn.f32 	%f167, %f132, %f167, %f27;
	add.s32 	%r134, %r134, 1;
	setp.lt.u32	%p32, %r134, %r38;
	mov.f32 	%f168, %f34;
	@%p32 bra 	BB3_23;

BB3_25:
	add.s32 	%r140, %r134, %r140;
	setp.gt.u32	%p33, %r13, 9;
	@%p33 bra 	BB3_27;

	add.u64 	%rd27, %SP, 0;
	cvta.to.local.u64 	%rd28, %rd27;
	mul.wide.u32 	%rd29, %r13, 4;
	add.s64 	%rd30, %rd28, %rd29;
	st.local.u32 	[%rd30], %r134;

BB3_27:
	setp.lt.u32	%p34, %r13, 10;
	and.b32  	%r90, %r40, 1;
	setp.eq.b32	%p35, %r90, 1;
	setp.ne.s32	%p36, %r13, 0;
	and.pred  	%p37, %p34, %p36;
	and.pred  	%p38, %p37, %p35;
	shr.u32 	%r91, %r15, 1;
	setp.eq.s32	%p39, %r13, %r91;
	or.pred  	%p40, %p38, %p39;
	add.s32 	%r130, %r13, 1;
	mov.u32 	%r139, %r15;
	@!%p40 bra 	BB3_41;
	bra.uni 	BB3_28;

BB3_28:
	div.u32 	%r92, %r140, %r130;
	cvt.rn.f32.u32	%f36, %r92;
	setp.eq.s32	%p41, %r13, 0;
	mov.f32 	%f173, 0f00000000;
	@%p41 bra 	BB3_37;

	and.b32  	%r94, %r13, 3;
	setp.eq.s32	%p42, %r94, 0;
	mov.f32 	%f173, 0f00000000;
	mov.u32 	%r138, 0;
	@%p42 bra 	BB3_35;

	setp.eq.s32	%p43, %r94, 1;
	mov.f32 	%f170, 0f00000000;
	mov.u32 	%r136, 0;
	@%p43 bra 	BB3_34;

	setp.eq.s32	%p44, %r94, 2;
	mov.f32 	%f169, 0f00000000;
	mov.u32 	%r135, 0;
	@%p44 bra 	BB3_33;

	add.u64 	%rd31, %SP, 0;
	cvta.to.local.u64 	%rd32, %rd31;
	ld.local.u32 	%r100, [%rd32];
	cvt.rn.f32.u32	%f137, %r100;
	sub.f32 	%f138, %f137, %f36;
	fma.rn.f32 	%f169, %f138, %f138, 0f00000000;
	mov.u32 	%r135, 1;

BB3_33:
	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r135, 4;
	add.s64 	%rd36, %rd34, %rd35;
	ld.local.u32 	%r101, [%rd36];
	cvt.rn.f32.u32	%f139, %r101;
	sub.f32 	%f140, %f139, %f36;
	fma.rn.f32 	%f170, %f140, %f140, %f169;
	add.s32 	%r136, %r135, 1;

BB3_34:
	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	mul.wide.u32 	%rd39, %r136, 4;
	add.s64 	%rd40, %rd38, %rd39;
	ld.local.u32 	%r102, [%rd40];
	cvt.rn.f32.u32	%f141, %r102;
	sub.f32 	%f142, %f141, %f36;
	fma.rn.f32 	%f173, %f142, %f142, %f170;
	add.s32 	%r138, %r136, 1;

BB3_35:
	add.u64 	%rd41, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd41;
	setp.lt.u32	%p45, %r13, 4;
	@%p45 bra 	BB3_37;

BB3_36:
	mul.wide.u32 	%rd42, %r138, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.local.u32 	%r103, [%rd43];
	cvt.rn.f32.u32	%f143, %r103;
	sub.f32 	%f144, %f143, %f36;
	fma.rn.f32 	%f145, %f144, %f144, %f173;
	add.s32 	%r104, %r138, 1;
	mul.wide.u32 	%rd44, %r104, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.local.u32 	%r105, [%rd45];
	cvt.rn.f32.u32	%f146, %r105;
	sub.f32 	%f147, %f146, %f36;
	fma.rn.f32 	%f148, %f147, %f147, %f145;
	add.s32 	%r106, %r138, 2;
	mul.wide.u32 	%rd46, %r106, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.local.u32 	%r107, [%rd47];
	cvt.rn.f32.u32	%f149, %r107;
	sub.f32 	%f150, %f149, %f36;
	fma.rn.f32 	%f151, %f150, %f150, %f148;
	add.s32 	%r108, %r138, 3;
	mul.wide.u32 	%rd48, %r108, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r109, [%rd49];
	cvt.rn.f32.u32	%f152, %r109;
	sub.f32 	%f153, %f152, %f36;
	fma.rn.f32 	%f173, %f153, %f153, %f151;
	add.s32 	%r138, %r138, 4;
	setp.lt.u32	%p46, %r138, %r13;
	@%p46 bra 	BB3_36;

BB3_37:
	add.s32 	%r110, %r13, -1;
	cvt.rn.f32.u32	%f154, %r110;
	div.rn.f32 	%f155, %f173, %f154;
	div.rn.f32 	%f46, %f155, %f36;
	setp.ne.s32	%p47, %r13, 1;
	@%p47 bra 	BB3_39;

	// inline asm
	activemask.b32 %r111;
	// inline asm
	add.u64 	%rd50, %SP, 0;
	cvta.to.local.u64 	%rd51, %rd50;
	ld.local.v2.u32 	{%r113, %r114}, [%rd51];
	setp.eq.s32	%p48, %r113, %r114;
	vote.sync.all.pred 	%p49, %p48, %r111;
	mov.u32 	%r139, 2;
	@%p49 bra 	BB3_41;

BB3_39:
	// inline asm
	activemask.b32 %r118;
	// inline asm
	setp.lt.f32	%p50, %f46, 0f3C23D70A;
	vote.sync.all.pred 	%p51, %p50, %r118;
	mov.u32 	%r139, %r130;
	@%p51 bra 	BB3_41;

	// inline asm
	activemask.b32 %r120;
	// inline asm
	setp.le.f32	%p52, %f46, 0f3F800000;
	vote.sync.all.pred 	%p53, %p52, %r120;
	setp.ge.u32	%p54, %r13, %r91;
	and.pred  	%p55, %p53, %p54;
	selp.b32	%r139, %r130, %r15, %p55;

BB3_41:
	setp.lt.u32	%p56, %r130, %r139;
	@%p56 bra 	BB3_22;

BB3_42:
	div.u32 	%r142, %r140, %r139;
	setp.ne.s16	%p57, %rs6, 0;
	setp.ne.s32	%p58, %r139, 0;
	or.pred  	%p59, %p58, %p57;
	@%p59 bra 	BB3_44;

	mov.u64 	%rd52, $str7;
	cvta.global.u64 	%rd53, %rd52;
	mov.u64 	%rd54, $str2;
	cvta.global.u64 	%rd55, %rd54;
	mov.u32 	%r123, 338;
	mov.u64 	%rd56, 0;
	mov.u64 	%rd57, 2;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd55;
	.param .b32 param2;
	st.param.b32	[param2+0], %r123;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd56;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd57;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_44:
	@%p24 bra 	BB3_48;

	setp.eq.s32	%p61, %r139, 0;
	@%p61 bra 	BB3_46;

	and.b32  	%r124, %r40, 16;
	setp.eq.s32	%p62, %r124, 0;
	mul.f32 	%f156, %f165, 0f3B808081;
	selp.f32	%f157, %f165, %f156, %p62;
	cvt.rn.f32.u32	%f158, %r139;
	add.f32 	%f165, %f157, %f158;
	cvt.rn.f32.u32	%f159, %r128;
	mul.lo.s32 	%r125, %r142, %r139;
	cvt.rn.f32.u32	%f160, %r125;
	fma.rn.f32 	%f161, %f159, %f157, %f160;
	div.rn.f32 	%f162, %f161, %f165;
	cvt.rzi.u32.f32	%r142, %f162;
	bra.uni 	BB3_49;

BB3_48:
	cvt.rn.f32.u32	%f165, %r139;
	bra.uni 	BB3_49;

BB3_46:
	mov.u32 	%r142, %r128;

BB3_49:
	mul.lo.s32 	%r126, %r5, %r35;
	cvt.u64.u32	%rd58, %r126;
	cvta.to.global.u64 	%rd59, %rd2;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r4, 8;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.u32 	[%rd62], %r142;
	st.global.f32 	[%rd62+4], %f165;
	setp.gt.f32	%p63, %f165, 0f00000000;
	@%p63 bra 	BB3_51;

	mov.u64 	%rd63, $str8;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r127, 360;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r127;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_51:
	ret;
}

	// .globl	fractalRenderAdvancedDouble
.visible .entry fractalRenderAdvancedDouble(
	.param .u64 fractalRenderAdvancedDouble_param_0,
	.param .u32 fractalRenderAdvancedDouble_param_1,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_2[8],
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_3[32],
	.param .u32 fractalRenderAdvancedDouble_param_4,
	.param .u32 fractalRenderAdvancedDouble_param_5,
	.param .u32 fractalRenderAdvancedDouble_param_6,
	.param .align 8 .b8 fractalRenderAdvancedDouble_param_7[32],
	.param .u64 fractalRenderAdvancedDouble_param_8,
	.param .u32 fractalRenderAdvancedDouble_param_9,
	.param .align 4 .b8 fractalRenderAdvancedDouble_param_10[8]
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<64>;
	.reg .b16 	%rs<7>;
	.reg .f32 	%f<60>;
	.reg .b32 	%r<147>;
	.reg .f64 	%fd<114>;
	.reg .b64 	%rd<69>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [fractalRenderAdvancedDouble_param_0];
	ld.param.u32 	%r35, [fractalRenderAdvancedDouble_param_1];
	ld.param.u32 	%r37, [fractalRenderAdvancedDouble_param_2+4];
	ld.param.u32 	%r36, [fractalRenderAdvancedDouble_param_2];
	ld.param.f64 	%fd43, [fractalRenderAdvancedDouble_param_3+24];
	ld.param.f64 	%fd42, [fractalRenderAdvancedDouble_param_3+16];
	ld.param.f64 	%fd41, [fractalRenderAdvancedDouble_param_3+8];
	ld.param.f64 	%fd40, [fractalRenderAdvancedDouble_param_3];
	ld.param.u32 	%r38, [fractalRenderAdvancedDouble_param_4];
	ld.param.u32 	%r133, [fractalRenderAdvancedDouble_param_5];
	ld.param.u32 	%r40, [fractalRenderAdvancedDouble_param_6];
	ld.param.f64 	%fd47, [fractalRenderAdvancedDouble_param_7+24];
	ld.param.f64 	%fd46, [fractalRenderAdvancedDouble_param_7+16];
	ld.param.f64 	%fd45, [fractalRenderAdvancedDouble_param_7+8];
	ld.param.f64 	%fd44, [fractalRenderAdvancedDouble_param_7];
	ld.param.u64 	%rd3, [fractalRenderAdvancedDouble_param_8];
	ld.param.u32 	%r41, [fractalRenderAdvancedDouble_param_9];
	ld.param.u32 	%r43, [fractalRenderAdvancedDouble_param_10+4];
	ld.param.u32 	%r42, [fractalRenderAdvancedDouble_param_10];
	mov.u32 	%r1, %ntid.x;
	setp.eq.s32	%p1, %r1, 32;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r44, 71;
	mov.u64 	%rd8, 0;
	mov.u64 	%rd9, 2;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r44;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB4_2:
	mov.u32 	%r45, %tid.x;
	mov.u32 	%r46, %tid.y;
	mad.lo.s32 	%r47, %r1, %r46, %r45;
	shl.b32 	%r48, %r1, 2;
	and.b32  	%r49, %r47, 15;
	rem.u32 	%r50, %r47, %r48;
	sub.s32 	%r51, %r50, %r49;
	shr.u32 	%r52, %r51, 2;
	and.b32  	%r53, %r47, 3;
	add.s32 	%r54, %r52, %r53;
	div.u32 	%r55, %r47, %r48;
	shl.b32 	%r56, %r55, 2;
	bfe.u32 	%r57, %r47, 2, 2;
	add.s32 	%r58, %r56, %r57;
	mov.u32 	%r59, %ctaid.x;
	mad.lo.s32 	%r4, %r59, %r1, %r54;
	mov.u32 	%r60, %ctaid.y;
	mov.u32 	%r61, %ntid.y;
	mad.lo.s32 	%r5, %r60, %r61, %r58;
	setp.lt.u32	%p2, %r4, %r36;
	setp.lt.u32	%p3, %r5, %r37;
	and.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_51;
	bra.uni 	BB4_3;

BB4_3:
	and.b32  	%r63, %r40, 8;
	setp.eq.s32	%p5, %r63, 0;
	mov.u16 	%rs6, 0;
	@%p5 bra 	BB4_11;

	cvt.rn.f64.u32	%fd48, %r4;
	sub.f64 	%fd49, %fd46, %fd44;
	cvt.rn.f64.u32	%fd5, %r36;
	div.rn.f64 	%fd50, %fd49, %fd5;
	sub.f64 	%fd51, %fd47, %fd45;
	cvt.rn.f64.u32	%fd6, %r37;
	div.rn.f64 	%fd52, %fd51, %fd6;
	neg.f64 	%fd53, %fd52;
	sub.f64 	%fd54, %fd40, %fd44;
	div.rn.f64 	%fd55, %fd54, %fd50;
	sub.f64 	%fd56, %fd43, %fd47;
	div.rn.f64 	%fd57, %fd56, %fd53;
	sub.f64 	%fd58, %fd42, %fd40;
	div.rn.f64 	%fd59, %fd58, %fd49;
	sub.f64 	%fd60, %fd43, %fd41;
	div.rn.f64 	%fd61, %fd60, %fd51;
	cvt.rn.f64.u32	%fd62, %r5;
	fma.rn.f64 	%fd105, %fd48, %fd59, %fd55;
	fma.rn.f64 	%fd106, %fd62, %fd61, %fd57;
	setp.lt.f64	%p6, %fd105, 0d0000000000000000;
	@%p6 bra 	BB4_11;

	setp.ltu.f64	%p7, %fd105, %fd5;
	setp.geu.f64	%p8, %fd106, 0d0000000000000000;
	and.pred  	%p9, %p8, %p7;
	setp.ltu.f64	%p10, %fd106, %fd6;
	and.pred  	%p11, %p9, %p10;
	@!%p11 bra 	BB4_11;
	bra.uni 	BB4_6;

BB4_6:
	abs.f64 	%fd9, %fd105;
	setp.ge.f64	%p12, %fd9, 0d4330000000000000;
	@%p12 bra 	BB4_8;

	add.f64 	%fd63, %fd9, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd64, %fd63;
	setp.lt.f64	%p13, %fd9, 0d3FE0000000000000;
	selp.f64	%fd65, 0d0000000000000000, %fd64, %p13;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r66, %temp}, %fd65;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r67}, %fd65;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r68}, %fd105;
	}
	and.b32  	%r69, %r68, -2147483648;
	or.b32  	%r70, %r67, %r69;
	mov.b64 	%fd105, {%r66, %r70};

BB4_8:
	cvt.rzi.u32.f64	%r6, %fd105;
	abs.f64 	%fd12, %fd106;
	setp.ge.f64	%p14, %fd12, 0d4330000000000000;
	@%p14 bra 	BB4_10;

	add.f64 	%fd66, %fd12, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd67, %fd66;
	setp.lt.f64	%p15, %fd12, 0d3FE0000000000000;
	selp.f64	%fd68, 0d0000000000000000, %fd67, %p15;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r71, %temp}, %fd68;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r72}, %fd68;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r73}, %fd106;
	}
	and.b32  	%r74, %r73, -2147483648;
	or.b32  	%r75, %r72, %r74;
	mov.b64 	%fd106, {%r71, %r75};

BB4_10:
	cvt.rzi.u32.f64	%r76, %fd106;
	mul.lo.s32 	%r77, %r76, %r41;
	cvt.u64.u32	%rd10, %r77;
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd10;
	mul.wide.u32 	%rd13, %r6, 8;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u32 	%r132, [%rd14];
	ld.global.f32 	%f57, [%rd14+4];
	mov.u16 	%rs6, 1;

BB4_11:
	and.b32  	%r78, %r40, 4;
	setp.eq.s32	%p16, %r78, 0;
	@%p16 bra 	BB4_18;

	and.b32  	%r79, %r4, -8;
	cvt.rn.f32.u32	%f14, %r79;
	and.b32  	%r80, %r5, -4;
	cvt.rn.f32.u32	%f15, %r80;
	cvt.rn.f32.u32	%f16, %r42;
	sub.f32 	%f17, %f16, %f14;
	cvt.rn.f32.u32	%f18, %r43;
	sub.f32 	%f19, %f18, %f15;
	mul.f32 	%f20, %f19, %f19;
	fma.rn.f32 	%f21, %f17, %f17, %f20;
	sqrt.rn.f32 	%f22, %f21;
	mul.f32 	%f23, %f22, 0f3CD94079;
	ld.global.f32 	%f24, [screenDistance];
	div.rn.f32 	%f3, %f23, %f24;
	abs.f32 	%f4, %f3;
	setp.leu.f32	%p17, %f4, 0f3F800000;
	mov.f32 	%f58, %f4;
	@%p17 bra 	BB4_14;

	rcp.rn.f32 	%f58, %f4;

BB4_14:
	mul.rn.f32 	%f25, %f58, %f58;
	mov.f32 	%f26, 0fC0B59883;
	mov.f32 	%f27, 0fBF52C7EA;
	fma.rn.f32 	%f28, %f25, %f27, %f26;
	mov.f32 	%f29, 0fC0D21907;
	fma.rn.f32 	%f30, %f28, %f25, %f29;
	mul.f32 	%f31, %f25, %f30;
	mul.f32 	%f32, %f58, %f31;
	add.f32 	%f33, %f25, 0f41355DC0;
	mov.f32 	%f34, 0f41E6BD60;
	fma.rn.f32 	%f35, %f33, %f25, %f34;
	mov.f32 	%f36, 0f419D92C8;
	fma.rn.f32 	%f37, %f35, %f25, %f36;
	rcp.rn.f32 	%f38, %f37;
	fma.rn.f32 	%f39, %f32, %f38, %f58;
	mov.f32 	%f40, 0f3FC90FDB;
	sub.f32 	%f41, %f40, %f39;
	setp.gt.f32	%p18, %f4, 0f3F800000;
	selp.f32	%f42, %f41, %f39, %p18;
	mov.b32 	 %r81, %f42;
	mov.b32 	 %r82, %f3;
	and.b32  	%r83, %r82, -2147483648;
	or.b32  	%r84, %r81, %r83;
	mov.b32 	 %f43, %r84;
	setp.gtu.f32	%p19, %f4, 0f7F800000;
	selp.f32	%f44, %f42, %f43, %p19;
	mul.f32 	%f45, %f44, 0f43340000;
	div.rn.f32 	%f7, %f45, 0f40490FDB;
	setp.ge.f32	%p20, %f7, 0f00000000;
	@%p20 bra 	BB4_16;

	mov.u64 	%rd15, $str6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, $str2;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r85, 250;
	mov.u64 	%rd19, 0;
	mov.u64 	%rd20, 2;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd18;
	.param .b32 param2;
	st.param.b32	[param2+0], %r85;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_16:
	fma.rn.f32 	%f46, %f7, 0fBC964FDA, 0f3F8CEADD;
	setp.gtu.f32	%p21, %f7, 0f40B00000;
	selp.f32	%f47, %f46, 0f3F800000, %p21;
	cvt.rn.f32.u32	%f48, %r133;
	mul.f32 	%f49, %f48, %f47;
	cvt.rzi.u32.f32	%r133, %f49;
	setp.gtu.f32	%p22, %f7, 0f42700000;
	@%p22 bra 	BB4_18;

	mov.u32 	%r86, 1;
	max.u32 	%r133, %r86, %r133;

BB4_18:
	setp.eq.f32	%p23, %f57, 0f00000000;
	setp.eq.s16	%p24, %rs6, 0;
	or.pred  	%p25, %p24, %p23;
	setp.eq.s32	%p26, %r133, 0;
	and.pred  	%p27, %p25, %p26;
	selp.b32	%r12, 1, %r133, %p27;
	cvt.rn.f64.u32	%fd69, %r36;
	sub.f64 	%fd70, %fd42, %fd40;
	div.rn.f64 	%fd15, %fd70, %fd69;
	cvt.rn.f64.u32	%fd71, %r37;
	sub.f64 	%fd72, %fd43, %fd41;
	div.rn.f64 	%fd16, %fd72, %fd71;
	setp.lt.u32	%p28, %r12, 257;
	@%p28 bra 	BB4_20;

	mov.u64 	%rd21, $str9;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r87, 119;
	mov.u64 	%rd25, 0;
	mov.u64 	%rd26, 2;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r87;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_20:
	setp.eq.s32	%p29, %r12, 0;
	mov.u32 	%r144, 0;
	mov.u32 	%r143, %r144;
	@%p29 bra 	BB4_42;

	cvt.rn.f64.u32	%fd17, %r4;
	cvt.rn.f64.u32	%fd18, %r5;
	ld.const.f64 	%fd19, [julia_c];
	mov.u32 	%r91, 0;
	ld.const.f64 	%fd20, [julia_c+8];
	mov.u32 	%r134, %r91;
	mov.u32 	%r144, %r91;
	mov.u32 	%r143, %r12;

BB4_22:
	mov.u32 	%r15, %r143;
	mov.u32 	%r13, %r134;
	cvt.rn.f64.u32	%fd73, %r15;
	cvt.rn.f64.u32	%fd74, %r13;
	div.rn.f64 	%fd75, %fd74, %fd73;
	add.f64 	%fd76, %fd17, %fd75;
	add.f64 	%fd77, %fd18, %fd75;
	neg.f64 	%fd78, %fd77;
	fma.rn.f64 	%fd108, %fd15, %fd76, %fd40;
	fma.rn.f64 	%fd107, %fd16, %fd78, %fd43;
	setp.eq.s32	%p30, %r38, 0;
	mov.u32 	%r138, %r91;
	@%p30 bra 	BB4_25;

BB4_23:
	mul.f64 	%fd25, %fd107, %fd107;
	mul.f64 	%fd26, %fd108, %fd108;
	add.f64 	%fd79, %fd26, %fd25;
	setp.geu.f64	%p31, %fd79, 0d4010000000000000;
	@%p31 bra 	BB4_25;

	sub.f64 	%fd80, %fd26, %fd25;
	add.f64 	%fd27, %fd19, %fd80;
	add.f64 	%fd81, %fd108, %fd108;
	fma.rn.f64 	%fd107, %fd81, %fd107, %fd20;
	add.s32 	%r138, %r138, 1;
	setp.lt.u32	%p32, %r138, %r38;
	mov.f64 	%fd108, %fd27;
	@%p32 bra 	BB4_23;

BB4_25:
	add.s32 	%r144, %r138, %r144;
	setp.gt.u32	%p33, %r13, 9;
	@%p33 bra 	BB4_27;

	add.u64 	%rd27, %SP, 0;
	cvta.to.local.u64 	%rd28, %rd27;
	mul.wide.u32 	%rd29, %r13, 4;
	add.s64 	%rd30, %rd28, %rd29;
	st.local.u32 	[%rd30], %r138;

BB4_27:
	setp.lt.u32	%p34, %r13, 10;
	and.b32  	%r94, %r40, 1;
	setp.eq.b32	%p35, %r94, 1;
	setp.ne.s32	%p36, %r13, 0;
	and.pred  	%p37, %p34, %p36;
	and.pred  	%p38, %p37, %p35;
	shr.u32 	%r95, %r15, 1;
	setp.eq.s32	%p39, %r13, %r95;
	or.pred  	%p40, %p38, %p39;
	add.s32 	%r134, %r13, 1;
	mov.u32 	%r143, %r15;
	@!%p40 bra 	BB4_41;
	bra.uni 	BB4_28;

BB4_28:
	div.u32 	%r96, %r144, %r134;
	cvt.rn.f64.u32	%fd29, %r96;
	setp.eq.s32	%p41, %r13, 0;
	mov.f64 	%fd113, 0d0000000000000000;
	@%p41 bra 	BB4_37;

	and.b32  	%r98, %r13, 3;
	setp.eq.s32	%p42, %r98, 0;
	mov.f64 	%fd113, 0d0000000000000000;
	mov.u32 	%r142, 0;
	@%p42 bra 	BB4_35;

	setp.eq.s32	%p43, %r98, 1;
	mov.f64 	%fd110, 0d0000000000000000;
	mov.u32 	%r140, 0;
	@%p43 bra 	BB4_34;

	setp.eq.s32	%p44, %r98, 2;
	mov.f64 	%fd109, 0d0000000000000000;
	mov.u32 	%r139, 0;
	@%p44 bra 	BB4_33;

	add.u64 	%rd31, %SP, 0;
	cvta.to.local.u64 	%rd32, %rd31;
	ld.local.u32 	%r104, [%rd32];
	cvt.rn.f64.u32	%fd86, %r104;
	sub.f64 	%fd87, %fd86, %fd29;
	fma.rn.f64 	%fd109, %fd87, %fd87, 0d0000000000000000;
	mov.u32 	%r139, 1;

BB4_33:
	add.u64 	%rd33, %SP, 0;
	cvta.to.local.u64 	%rd34, %rd33;
	mul.wide.u32 	%rd35, %r139, 4;
	add.s64 	%rd36, %rd34, %rd35;
	ld.local.u32 	%r105, [%rd36];
	cvt.rn.f64.u32	%fd88, %r105;
	sub.f64 	%fd89, %fd88, %fd29;
	fma.rn.f64 	%fd110, %fd89, %fd89, %fd109;
	add.s32 	%r140, %r139, 1;

BB4_34:
	add.u64 	%rd37, %SP, 0;
	cvta.to.local.u64 	%rd38, %rd37;
	mul.wide.u32 	%rd39, %r140, 4;
	add.s64 	%rd40, %rd38, %rd39;
	ld.local.u32 	%r106, [%rd40];
	cvt.rn.f64.u32	%fd90, %r106;
	sub.f64 	%fd91, %fd90, %fd29;
	fma.rn.f64 	%fd113, %fd91, %fd91, %fd110;
	add.s32 	%r142, %r140, 1;

BB4_35:
	add.u64 	%rd41, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd41;
	setp.lt.u32	%p45, %r13, 4;
	@%p45 bra 	BB4_37;

BB4_36:
	mul.wide.u32 	%rd42, %r142, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.local.u32 	%r107, [%rd43];
	cvt.rn.f64.u32	%fd92, %r107;
	sub.f64 	%fd93, %fd92, %fd29;
	fma.rn.f64 	%fd94, %fd93, %fd93, %fd113;
	add.s32 	%r108, %r142, 1;
	mul.wide.u32 	%rd44, %r108, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.local.u32 	%r109, [%rd45];
	cvt.rn.f64.u32	%fd95, %r109;
	sub.f64 	%fd96, %fd95, %fd29;
	fma.rn.f64 	%fd97, %fd96, %fd96, %fd94;
	add.s32 	%r110, %r142, 2;
	mul.wide.u32 	%rd46, %r110, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.local.u32 	%r111, [%rd47];
	cvt.rn.f64.u32	%fd98, %r111;
	sub.f64 	%fd99, %fd98, %fd29;
	fma.rn.f64 	%fd100, %fd99, %fd99, %fd97;
	add.s32 	%r112, %r142, 3;
	mul.wide.u32 	%rd48, %r112, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.local.u32 	%r113, [%rd49];
	cvt.rn.f64.u32	%fd101, %r113;
	sub.f64 	%fd102, %fd101, %fd29;
	fma.rn.f64 	%fd113, %fd102, %fd102, %fd100;
	add.s32 	%r142, %r142, 4;
	setp.lt.u32	%p46, %r142, %r13;
	@%p46 bra 	BB4_36;

BB4_37:
	add.s32 	%r114, %r13, -1;
	cvt.rn.f64.u32	%fd103, %r114;
	div.rn.f64 	%fd104, %fd113, %fd103;
	div.rn.f64 	%fd39, %fd104, %fd29;
	setp.ne.s32	%p47, %r13, 1;
	@%p47 bra 	BB4_39;

	// inline asm
	activemask.b32 %r115;
	// inline asm
	add.u64 	%rd50, %SP, 0;
	cvta.to.local.u64 	%rd51, %rd50;
	ld.local.v2.u32 	{%r117, %r118}, [%rd51];
	setp.eq.s32	%p48, %r117, %r118;
	vote.sync.all.pred 	%p49, %p48, %r115;
	mov.u32 	%r143, 2;
	@%p49 bra 	BB4_41;

BB4_39:
	// inline asm
	activemask.b32 %r122;
	// inline asm
	setp.lt.f64	%p50, %fd39, 0d3F847AE140000000;
	vote.sync.all.pred 	%p51, %p50, %r122;
	mov.u32 	%r143, %r134;
	@%p51 bra 	BB4_41;

	// inline asm
	activemask.b32 %r124;
	// inline asm
	setp.le.f64	%p52, %fd39, 0d3FF0000000000000;
	vote.sync.all.pred 	%p53, %p52, %r124;
	setp.ge.u32	%p54, %r13, %r95;
	and.pred  	%p55, %p53, %p54;
	selp.b32	%r143, %r134, %r15, %p55;

BB4_41:
	setp.lt.u32	%p56, %r134, %r143;
	@%p56 bra 	BB4_22;

BB4_42:
	div.u32 	%r146, %r144, %r143;
	setp.ne.s16	%p57, %rs6, 0;
	setp.ne.s32	%p58, %r143, 0;
	or.pred  	%p59, %p58, %p57;
	@%p59 bra 	BB4_44;

	mov.u64 	%rd52, $str7;
	cvta.global.u64 	%rd53, %rd52;
	mov.u64 	%rd54, $str2;
	cvta.global.u64 	%rd55, %rd54;
	mov.u32 	%r127, 338;
	mov.u64 	%rd56, 0;
	mov.u64 	%rd57, 2;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd55;
	.param .b32 param2;
	st.param.b32	[param2+0], %r127;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd56;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd57;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14

BB4_44:
	@%p24 bra 	BB4_48;

	setp.eq.s32	%p61, %r143, 0;
	@%p61 bra 	BB4_46;

	and.b32  	%r128, %r40, 16;
	setp.eq.s32	%p62, %r128, 0;
	mul.f32 	%f50, %f57, 0f3B808081;
	selp.f32	%f51, %f57, %f50, %p62;
	cvt.rn.f32.u32	%f52, %r143;
	add.f32 	%f57, %f51, %f52;
	cvt.rn.f32.u32	%f53, %r132;
	mul.lo.s32 	%r129, %r146, %r143;
	cvt.rn.f32.u32	%f54, %r129;
	fma.rn.f32 	%f55, %f53, %f51, %f54;
	div.rn.f32 	%f56, %f55, %f57;
	cvt.rzi.u32.f32	%r146, %f56;
	bra.uni 	BB4_49;

BB4_48:
	cvt.rn.f32.u32	%f57, %r143;
	bra.uni 	BB4_49;

BB4_46:
	mov.u32 	%r146, %r132;

BB4_49:
	mul.lo.s32 	%r130, %r5, %r35;
	cvt.u64.u32	%rd58, %r130;
	cvta.to.global.u64 	%rd59, %rd2;
	add.s64 	%rd60, %rd59, %rd58;
	mul.wide.u32 	%rd61, %r4, 8;
	add.s64 	%rd62, %rd60, %rd61;
	st.global.u32 	[%rd62], %r146;
	st.global.f32 	[%rd62+4], %f57;
	setp.gt.f32	%p63, %f57, 0f00000000;
	@%p63 bra 	BB4_51;

	mov.u64 	%rd63, $str8;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, $str2;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r131, 360;
	mov.u64 	%rd67, 0;
	mov.u64 	%rd68, 2;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd64;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd66;
	.param .b32 param2;
	st.param.b32	[param2+0], %r131;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd67;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd68;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB4_51:
	ret;
}

	// .globl	compose
.visible .entry compose(
	.param .u64 compose_param_0,
	.param .u32 compose_param_1,
	.param .u64 compose_param_2,
	.param .u32 compose_param_3,
	.param .u64 compose_param_4,
	.param .u32 compose_param_5,
	.param .u32 compose_param_6,
	.param .u64 compose_param_7,
	.param .u32 compose_param_8,
	.param .u32 compose_param_9
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [compose_param_0];
	ld.param.u32 	%r7, [compose_param_1];
	ld.param.u64 	%rd3, [compose_param_4];
	ld.param.u32 	%r10, [compose_param_5];
	ld.param.u32 	%r11, [compose_param_6];
	ld.param.u64 	%rd4, [compose_param_7];
	ld.param.u32 	%r8, [compose_param_8];
	ld.param.u32 	%r9, [compose_param_9];
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r13, %r12, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.u32	%p1, %r2, %r11;
	setp.ge.u32	%p2, %r1, %r10;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB5_7;

	cvta.to.global.u64 	%rd5, %rd2;
	mul.lo.s32 	%r18, %r2, %r7;
	cvt.u64.u32	%rd6, %r18;
	add.s64 	%rd7, %rd5, %rd6;
	ld.const.u8 	%rs1, [VISUALIZE_SAMPLE_COUNT];
	setp.eq.s16	%p4, %rs1, 0;
	mul.wide.u32 	%rd8, %r1, 8;
	add.s64 	%rd1, %rd7, %rd8;
	@%p4 bra 	BB5_3;

	ld.global.f32 	%f1, [%rd1+4];
	cvt.rzi.u32.f32	%r19, %f1;
	min.u32 	%r20, %r19, %r9;
	cvt.rn.f32.u32	%f2, %r20;
	cvt.rn.f32.u32	%f3, %r9;
	div.rn.f32 	%f4, %f2, %f3;
	mul.f32 	%f5, %f4, 0f437F0000;
	cvt.rzi.s32.f32	%r21, %f5;
	and.b32  	%r22, %r21, 255;
	prmt.b32 	%r23, %r22, %r22, 30212;
	prmt.b32 	%r24, %r22, %r23, 28756;
	or.b32  	%r32, %r24, -16777216;
	bra.uni 	BB5_6;

BB5_3:
	ld.global.u32 	%r25, [%rd1];
	rem.u32 	%r26, %r25, %r8;
	sub.s32 	%r27, %r8, %r26;
	add.s32 	%r4, %r27, -1;
	setp.lt.u32	%p5, %r4, %r8;
	@%p5 bra 	BB5_5;

	mov.u64 	%rd9, $str10;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str11;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r28, 22;
	mov.u64 	%rd13, 0;
	mov.u64 	%rd14, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r28;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd13;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd14;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB5_5:
	shl.b32 	%r29, %r4, 2;
	mov.u32 	%r30, 0;
	suld.b.2d.b32.trap {%r32}, [%rd4, {%r29, %r30}];

BB5_6:
	shl.b32 	%r31, %r1, 2;
	sust.b.2d.b32.trap 	[%rd3, {%r31, %r2}], {%r32};

BB5_7:
	ret;
}

	// .globl	fractalRenderUnderSampled
.visible .entry fractalRenderUnderSampled(
	.param .u64 fractalRenderUnderSampled_param_0,
	.param .u32 fractalRenderUnderSampled_param_1,
	.param .u32 fractalRenderUnderSampled_param_2,
	.param .u32 fractalRenderUnderSampled_param_3,
	.param .f32 fractalRenderUnderSampled_param_4,
	.param .f32 fractalRenderUnderSampled_param_5,
	.param .f32 fractalRenderUnderSampled_param_6,
	.param .f32 fractalRenderUnderSampled_param_7,
	.param .u32 fractalRenderUnderSampled_param_8,
	.param .u32 fractalRenderUnderSampled_param_9
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<31>;
	.reg .b32 	%r<46>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [fractalRenderUnderSampled_param_0];
	ld.param.u32 	%r12, [fractalRenderUnderSampled_param_1];
	ld.param.u32 	%r13, [fractalRenderUnderSampled_param_2];
	ld.param.u32 	%r14, [fractalRenderUnderSampled_param_3];
	ld.param.f32 	%f12, [fractalRenderUnderSampled_param_4];
	ld.param.f32 	%f13, [fractalRenderUnderSampled_param_5];
	ld.param.f32 	%f14, [fractalRenderUnderSampled_param_6];
	ld.param.f32 	%f15, [fractalRenderUnderSampled_param_7];
	ld.param.u32 	%r15, [fractalRenderUnderSampled_param_8];
	ld.param.u32 	%r16, [fractalRenderUnderSampled_param_9];
	mov.u32 	%r17, %ntid.x;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r20, %r18, %r17, %r19;
	mul.lo.s32 	%r1, %r20, %r16;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.u32 	%r23, %tid.y;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mul.lo.s32 	%r2, %r24, %r16;
	sub.s32 	%r25, %r14, %r16;
	setp.ge.u32	%p1, %r2, %r25;
	sub.s32 	%r26, %r13, %r16;
	setp.ge.u32	%p2, %r1, %r26;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_13;

	sub.f32 	%f16, %f14, %f12;
	cvt.rn.f32.u32	%f17, %r13;
	div.rn.f32 	%f18, %f16, %f17;
	cvt.rn.f32.u32	%f19, %r14;
	sub.f32 	%f20, %f15, %f13;
	div.rn.f32 	%f21, %f20, %f19;
	cvt.rn.f32.u32	%f22, %r1;
	fma.rn.f32 	%f30, %f22, %f18, %f12;
	cvt.rn.f32.u32	%f23, %r2;
	mul.f32 	%f24, %f23, %f21;
	sub.f32 	%f29, %f15, %f24;
	ld.const.f64 	%fd1, [julia_c];
	cvt.rn.f32.f64	%f3, %fd1;
	ld.const.f64 	%fd2, [julia_c+8];
	cvt.rn.f32.f64	%f4, %fd2;
	setp.eq.s32	%p4, %r15, 0;
	mov.u32 	%r41, 0;
	@%p4 bra 	BB6_4;

BB6_2:
	mul.f32 	%f7, %f29, %f29;
	mul.f32 	%f8, %f30, %f30;
	add.f32 	%f25, %f8, %f7;
	setp.geu.f32	%p5, %f25, 0f40800000;
	@%p5 bra 	BB6_4;

	sub.f32 	%f26, %f8, %f7;
	add.f32 	%f9, %f3, %f26;
	add.f32 	%f27, %f30, %f30;
	fma.rn.f32 	%f29, %f27, %f29, %f4;
	add.s32 	%r41, %r41, 1;
	setp.lt.u32	%p6, %r41, %r15;
	mov.f32 	%f30, %f9;
	@%p6 bra 	BB6_2;

BB6_4:
	setp.eq.s32	%p7, %r16, 0;
	@%p7 bra 	BB6_13;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.lo.s32 	%r33, %r2, %r12;
	cvt.u64.u32	%rd4, %r33;
	add.s64 	%rd5, %rd3, %rd4;
	cvt.rn.f32.u32	%f28, %r16;
	rcp.rn.f32 	%f11, %f28;
	mul.wide.u32 	%rd6, %r1, 8;
	add.s64 	%rd1, %rd5, %rd6;
	and.b32  	%r32, %r16, 3;
	mov.u32 	%r42, 1;
	mov.u32 	%r45, 0;
	setp.eq.s32	%p8, %r32, 0;
	@%p8 bra 	BB6_11;

	setp.eq.s32	%p9, %r32, 1;
	@%p9 bra 	BB6_10;

	setp.eq.s32	%p10, %r32, 2;
	@%p10 bra 	BB6_9;

	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f11;
	mov.u32 	%r42, 2;

BB6_9:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f11;
	mov.u32 	%r45, %r42;

BB6_10:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f11;
	add.s32 	%r45, %r45, 1;

BB6_11:
	setp.lt.u32	%p11, %r16, 4;
	@%p11 bra 	BB6_13;

BB6_12:
	st.global.u32 	[%rd1], %r41;
	st.global.f32 	[%rd1+4], %f11;
	add.s32 	%r45, %r45, 4;
	setp.lt.u32	%p12, %r45, %r16;
	@%p12 bra 	BB6_12;

BB6_13:
	ret;
}

	// .globl	debug
.visible .entry debug(

)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, %r1;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ntid.y;
	mul.lo.s32 	%r6, %r4, %r5;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.eq.s32	%p1, %r3, %r8;
	mov.u32 	%r9, %tid.y;
	neg.s32 	%r10, %r9;
	setp.eq.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_2;
	bra.uni 	BB7_1;

BB7_1:
	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 17

BB7_2:
	ret;
}


